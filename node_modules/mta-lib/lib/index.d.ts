import * as mta from "./mta";
export declare class Mta {
    private mtaPath;
    private mtaTempFilePath;
    private mtaFilePath;
    private hashcode;
    constructor(mtaDirPath: string);
    /**
     * Creates a new MTA:
     * Creates a new MTA project directory.
     * Creates a new "temp.mta.yaml" file in the new project directory.
     * Writes a descriptor for the "temp.mta.yaml" file.
     */
    create(descriptor: mta.MtaDescriptor): Promise<void>;
    /**
     * Gets the MTA file path;
     * if the MTA file path doesn't exist, an error message is displayed.
     */
    getMtaFilePath(): Promise<string>;
    /**
     *  Adds a new module.
     */
    addModule(module: mta.Module, force?: boolean): Promise<void>;
    /**
     *  Adds a new resource.
     */
    addResource(resource: mta.Resource, force?: boolean): Promise<void>;
    /**
     *  Gets all modules.
     */
    getModules(): Promise<mta.Module[]>;
    /**
     * Gets all resources
     */
    getResources(): Promise<mta.Resource[]>;
    /**
     * Updates an existing module.
     */
    updateModule(module: mta.Module): Promise<void>;
    /**
     * Updates an existing resource.
     */
    updateResource(resource: mta.Resource): Promise<void>;
    /**
     * Updates the build parameters.
     * Updates the existing build parameters or adds new build parameters if they don't exist.
     */
    updateBuildParameters(buildParameters: mta.ProjectBuildParameters, force?: boolean): Promise<void>;
    /**
     * Checks if the name given exists in the "mta.yaml" file.
     * @param name
     */
    doesNameExist(name: string): Promise<boolean>;
    /**
     * Saves the "mta.yaml" file:
     * Copies the "temp.mta.yaml" file content to the "mta.yaml" file.
     * Deletes the "temp.mta.yaml" file.
     */
    save(): Promise<void>;
    /**
     * Deletes the temporary mta file.
     */
    clean(): Promise<void>;
    /**
     * Runs the MTA command with the sent arguments and the additional argument `-p <temp file path>`.
     * Before running the MTA command, the function makes sure that the "temp.mta.yaml" exists
     * according to the following logic:
     * If the "temp.mta.yaml" file exists, runs the MTA command on it.
     * If the "temp.mta.yaml" file doesn't exist, checks if the "mta.yaml" file exists;
     * if not, displays an error message.
     * If the "mta.yaml" file exists, copies the "mta.yaml" file content to the "temp.mta.yaml" file
     * and then runs the MTA command on it.
     *
     * @param args - the arguments to send to the MTA executable.
     */
    private runOnTempFile;
    private runOnExistingFile;
}
export { mta };
export default Mta;
