"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("@ui5/fs");
const yaml_1 = __importDefault(require("yaml"));
const path_1 = require("path");
const fs_2 = require("fs");
const deploy_1 = __importDefault(require("../../tasks/deploy"));
const utils_1 = require("../utils");
const i18next_1 = __importDefault(require("i18next"));
/**
 * Default settings for parameters
 */
const defaultParams = {
    config: 'ui5-deploy.yaml'
};
/**
 * Supported CLI parameters
 */
const paramMap = {
    '-c': 'config',
    '-d': 'destination',
    '-u': 'url',
    '-t': 'transport'
};
/**
 * Read the deployment configuration (yaml) from file system
 * @param path path to config
 */
function readConfig(path) {
    const yaml = yaml_1.default.parseDocument(fs_2.readFileSync(path_1.join(process.cwd(), path), 'utf8')).toJSON();
    const { configuration } = yaml.builder.customTasks.find((element) => element['name'] === 'deploy-to-abap');
    if (configuration.credentials && configuration.credentials.serviceKeys) {
        configuration.credentials.serviceKeys = path_1.join(process.cwd(), configuration.credentials.serviceKeys);
    }
    return configuration;
}
/**
 * Merge CLI params with yaml configuration
 * @param config yaml configuration
 * @param params CLI params
 */
function mergeConfigAndParams(config, params) {
    if (params.destination) {
        config.target.destination = params.destination;
    }
    if (params.url) {
        config.target.url = params.url;
    }
    if (params.transport) {
        config.app.transport = params.transport;
    }
}
/**
 * Execute the deploy-to-abap task standalone
 * @param configuration deployment configuration
 */
async function executeTask(configuration) {
    const projectNamespace = 'fiori/cli';
    const virBasePath = `/resources/${projectNamespace}/`;
    const fs = new fs_1.adapters.FileSystem({
        virBasePath,
        fsBasePath: path_1.join(process.cwd(), 'dist')
    });
    const workspace = fs_1.resourceFactory.createWorkspace({ reader: fs, name: 'fiori', virBasePath: 'fiori' });
    const params = {
        workspace,
        options: {
            projectName: configuration.app.name,
            projectNamespace,
            configuration
        }
    };
    await deploy_1.default(params);
}
/**
 * deploy command handler
 * @param args CLI arguments
 */
async function deploy(args) {
    const params = utils_1.parseArgs(args, paramMap, defaultParams);
    const config = readConfig(params.config);
    mergeConfigAndParams(config, params);
    await executeTask(config);
    console.log(i18next_1.default.t('DEPLOY_EXECUTED'));
}
exports.deploy = deploy;
//# sourceMappingURL=deploy.js.map