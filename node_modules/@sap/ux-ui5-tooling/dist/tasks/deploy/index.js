"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const ux_odata_client_1 = require("@sap/ux-odata-client");
const logger_1 = require("@ui5/logger");
const steps_1 = require("./steps");
const i18next_1 = __importDefault(require("i18next"));
const i18n_1 = require("./../../i18n");
module.exports = async function task({ workspace, options }) {
    // Initialize i18next
    await i18n_1.initI18n();
    const log = logger_1.getLogger('builder:custom deploy-to-abap');
    // validate configuration
    const config = options.configuration;
    steps_1.validateConfig(config);
    try {
        const archive = await steps_1.createArchive(workspace, options.projectNamespace, config, log);
        log.info(i18next_1.default.t('INFO_STARTING_DEPLOYMENT'));
        let client;
        if (ux_odata_client_1.isAppStudio() || !!config.credentials) {
            client = new ux_odata_client_1.Ui5AbapRepository({ system: config.target, credentials: config.credentials, log });
        }
        else {
            let system = await ux_odata_client_1.getSapSystem(config.target.url, config.target.client);
            if (!system) {
                system = new ux_odata_client_1.SapSystem('', config.target, config.credentials);
            }
            client = await system.getUi5Repository(log);
        }
        await client.deploy(archive, config.app, config.test);
        log.info(i18next_1.default.t('INFO_DEPLOYMENT_SUCCESSFUL'));
    }
    catch (error) {
        log.info(i18next_1.default.t('INFO_DEPLOYMENT_FAILED', { message: error.message }));
    }
};
//# sourceMappingURL=index.js.map