"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const connectLivereload = require("connect-livereload");
const livereload_1 = require("livereload");
const path_1 = require("path");
const portfinder_1 = require("portfinder");
const logger_1 = require("@ui5/logger");
const i18next_1 = __importDefault(require("i18next"));
const i18n_1 = require("./../i18n");
/**
 * Checks if the given port is already in use and returns a different port, if needed.
 * @param port The port to check.
 */
const getAvailablePort = (port) => {
    return new Promise((resolve, reject) => {
        portfinder_1.getPort({
            port: port,
            stopPort: port + 30
        }, (error, port) => {
            if (error) {
                console.error(error), reject(error);
            }
            else {
                resolve(port);
            }
        });
    });
};
/**
 * Custom UI5 Server middleware example
 *
 * @param {Object} parameters Parameters
 * @param {Object} parameters.resources Resource collections
 * @param {module:@ui5/fs.AbstractReader} parameters.resources.all Reader or Collection to read resources of the
 *                                        root project and its dependencies
 * @param {module:@ui5/fs.AbstractReader} parameters.resources.rootProject Reader or Collection to read resources of
 *                                        the project the server is started in
 * @param {module:@ui5/fs.AbstractReader} parameters.resources.dependencies Reader or Collection to read resources of
 *                                        the projects dependencies
 * @param {Object} parameters.options Options
 * @param {string} [parameters.options.configuration] Custom server middleware configuration if given in ui5.yaml
 * @returns {function} Middleware function to use
 */
module.exports = async function ({ options }) {
    // Initialize i18next
    await i18n_1.initI18n();
    const log = logger_1.getLogger('server:liveload');
    const port = await getAvailablePort(options.configuration.port || 35729);
    const watchPath = options.configuration.path || 'webapp';
    const projectPath = process.cwd();
    const livereloadServer = livereload_1.createServer({
        debug: options.configuration.debug,
        extraExts: options.configuration.ext || 'html,js,json,xml,properties,change',
        port: port
    }, () => {
        log.info(i18next_1.default.t('INFO_LIVERELOAD_STARTED', { port: port, watchPath: watchPath }));
    });
    livereloadServer.watch(path_1.join(projectPath, watchPath));
    return connectLivereload({
        port: port,
        include: [/.*\.html/]
    });
};
//# sourceMappingURL=fiori-tools-appreload.js.map