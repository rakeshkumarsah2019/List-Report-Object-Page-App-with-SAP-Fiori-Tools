"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const proxy = __importStar(require("express-http-proxy"));
const express_1 = __importDefault(require("express"));
const https_proxy_agent_1 = __importDefault(require("https-proxy-agent"));
const ux_odata_client_1 = require("@sap/ux-odata-client");
const logger_1 = require("@ui5/logger");
const bodyParser = __importStar(require("body-parser"));
const path_1 = require("path");
const open = require("open");
const i18next_1 = __importDefault(require("i18next"));
/**
 * Custom UI5 Server middleware (https://sap.github.io/ui5-tooling/pages/extensibility/CustomServerMiddleware/)
 */
module.exports = async ({ options }) => {
    const log = logger_1.getLogger('server:ux-proxy');
    const router = express_1.default.Router();
    const corporateProxyServer = getCorporateProxyServer(options.configuration.proxy);
    const ignoreCertError = !!options.configuration.ignoreCertError;
    for (const backend of options.configuration.backend) {
        router.use(backend.path, await getBackendProxy({ config: backend, corporateProxyServer, ignoreCertError, log }));
    }
    if (options.configuration.ui5) {
        const ui5Proxy = getUi5Proxy({ config: options.configuration.ui5, ignoreCertError, corporateProxyServer, log });
        options.configuration.ui5.path.forEach((path) => router.use(path, ui5Proxy));
    }
    return router;
};
function getUi5Proxy({ config, corporateProxyServer, ignoreCertError, log }) {
    log.info('Proxy started for ' + config.url);
    const noProxyVal = process.env.no_proxy || process.env.npm_config_noproxy;
    let noProxy = [];
    // Process any runtime args passed in the general form '<ui5*>=<value>'
    const processUI5Args = (args) => {
        return args
            .filter((arg) => arg.startsWith('ui5') && arg.indexOf('='))
            .reduce((ui5Args, ui5Arg) => {
            ui5Arg
                .split(' ')
                .map((arg) => arg.split('='))
                .forEach((argKeyVal) => {
                if (argKeyVal.length === 2) {
                    ui5Args = Object.assign({
                        [argKeyVal[0]]: argKeyVal[1]
                    }, ui5Args);
                }
            });
            return ui5Args;
        }, {});
    };
    const ui5Args = processUI5Args(process.argv);
    // 'ui5' is the ui5Version
    let ui5Ver = ui5Args['ui5'] || process.env.FIORI_TOOLS_UI5_VERSION || config.version;
    ui5Ver = ui5Ver ? `/${ui5Ver}` : '';
    const ui5Uri = ui5Args['ui5Uri'] || process.env.FIORI_TOOLS_UI5_URI || config.url;
    // run the proxy middleware based on the baseUri configuration
    return proxy.default(() => ui5Uri, {
        memoizeHost: false,
        preserveHostHdr: false,
        proxyReqOptDecorator: function (proxyReqOpts) {
            // Allow self-signed certificates
            proxyReqOpts.rejectUnauthorized = !ignoreCertError;
            if (noProxyVal) {
                noProxy = noProxyVal.split(',');
            }
            if (corporateProxyServer && !noProxy.includes(proxyReqOpts.host)) {
                proxyReqOpts.agent = new https_proxy_agent_1.default(corporateProxyServer);
            }
            return proxyReqOpts;
        },
        proxyReqPathResolver: function (req) {
            req.app.set('etag', false);
            const targetPath = ui5Ver + req.originalUrl;
            log.info(targetPath);
            return targetPath;
        },
        proxyErrorHandler: function (err, res, next) {
            switch (err && err.code) {
                case 'UNABLE_TO_GET_ISSUER_CERT_LOCALLY': {
                    const errMsg = 'You are trying to connect to a server with a self signed certificate. Please check https://help.sap.com/viewer/a9f57505bbb34a6da3c5ba3a49d409d8/Latest/en-US/4b318bede7eb4021a8be385c46c74045.html for guidance.';
                    const error = new Error(errMsg);
                    next(error);
                    break;
                }
                default: {
                    next(err);
                }
            }
        }
    });
}
function getCorporateProxyServer(proxyServer) {
    let runtimeArgProxy;
    process.argv.forEach((arg) => {
        if (arg.match(/proxy=/g)) {
            runtimeArgProxy = arg.split('=')[1];
        }
    });
    const corporateProxyServer = runtimeArgProxy ||
        proxyServer ||
        process.env.FIORI_TOOLS_PROXY ||
        process.env.http_proxy ||
        process.env.HTTP_PROXY ||
        process.env.https_proxy ||
        process.env.HTTPS_PROXY ||
        process.env.npm_config_proxy ||
        process.env.npm_config_https_proxy;
    return corporateProxyServer;
}
async function getBackendProxy({ config, corporateProxyServer, ignoreCertError, log }) {
    let cookies;
    log.info('Proxy started for ' + config.url);
    // overwrite url if running in AppStudio
    if (ux_odata_client_1.isAppStudio()) {
        log.info('Used destination: ' + config.destination);
        const target = {
            url: config.url,
            destination: config.destination
        };
        await ux_odata_client_1.updateSystemConfig(target, log);
        config.url = target.url;
        config.pathPrefix = `${target.service ? target.service : ''}${config.path || ''}`;
    }
    else {
        // check if OAuth is required
        if (config.scp) {
            let system = await ux_odata_client_1.getSapSystem(config.url, config.client);
            if (!system) {
                const { systemName, serviceKeysContents, saveSystem } = await getSystemInfoFromUser({
                    systemUrl: config.url,
                    client: config.client
                });
                system = ux_odata_client_1.createSapSystemForSteampunk(systemName, serviceKeysContents);
                log.info('Storing details for system: ' + systemName);
                if (saveSystem) {
                    await ux_odata_client_1.saveSapSystem(system);
                }
            }
            const connection = await (await system.getCatalog()).getConnection();
            cookies = connection.cookies;
            config.url = system.config.url;
        }
        else {
            // monkey patch TLS to trust SAPs root CA
            if (ux_odata_client_1.TlsPatch.isPatchRequired(config.url)) {
                ux_odata_client_1.TlsPatch.apply();
            }
        }
    }
    cookies = cookies ? cookies : new ux_odata_client_1.Cookies();
    const noProxyVal = process.env.no_proxy || process.env.npm_config_noproxy;
    let noProxy = [];
    // run the proxy middleware based on the baseUri configuration
    return proxy.default(() => config.url, {
        memoizeHost: false,
        preserveHostHdr: false,
        proxyReqOptDecorator: function (proxyReqOpts) {
            delete proxyReqOpts.headers['cookie'];
            // Allow self-signed certificates
            proxyReqOpts.rejectUnauthorized = !ignoreCertError;
            if (noProxyVal) {
                noProxy = noProxyVal.split(',');
            }
            if (corporateProxyServer && !noProxy.includes(proxyReqOpts.host)) {
                proxyReqOpts.agent = new https_proxy_agent_1.default(corporateProxyServer);
            }
            proxyReqOpts.headers.Cookie = cookies.toString();
            return proxyReqOpts;
        },
        userResHeaderDecorator: function (headers) {
            // retrieve the set-cookie headers from the response and transform secure cookies to insecure ones
            if (headers['set-cookie']) {
                for (let i = headers['set-cookie'].length - 1; i >= 0; i--) {
                    headers['set-cookie'][i] = headers['set-cookie'][i]
                        .replace('domain=https;', 'domain=http;')
                        .replace(' secure;', '')
                        .replace(' secure', '');
                }
            }
            cookies.setCookie({ headers });
            return headers;
        },
        proxyReqPathResolver: function (req) {
            req.app.set('etag', false);
            const targetPath = `${config.pathPrefix
                ? req.originalUrl.replace(req.baseUrl, config.pathPrefix.replace(/\/$/, ''))
                : req.originalUrl}`;
            log.info(targetPath);
            return targetPath;
        },
        proxyErrorHandler: function (err, res, next) {
            switch (err && err.code) {
                case 'UNABLE_TO_GET_ISSUER_CERT_LOCALLY': {
                    const errMsg = 'You are trying to connect to a server with a self signed certificate. Please check https://help.sap.com/viewer/a9f57505bbb34a6da3c5ba3a49d409d8/Latest/en-US/4b318bede7eb4021a8be385c46c74045.html for guidance.';
                    const error = new Error(errMsg);
                    next(error);
                    break;
                }
                default: {
                    next(err);
                }
            }
        }
    });
}
async function getSystemInfoFromUser({ systemUrl, client = '' }) {
    // Cache instead of using session
    const systemDetails = {
        systemUrl,
        client,
        systemName: '',
        serviceKeysContents: '',
        systemCreationError: [],
        saveSystem: false
    };
    return new Promise((resolve) => {
        const createSystemApp = express_1.default();
        const viewDir = path_1.join(__dirname, '..', 'views');
        let createSystemServer = null;
        createSystemApp.use(bodyParser.urlencoded({ extended: true }));
        createSystemApp.set('views', viewDir);
        createSystemApp.set('view engine', 'ejs');
        createSystemApp.get("/create-system" /* CreateSystem */, (req, res) => res.render('create-system', Object.assign({}, systemDetails)));
        createSystemApp.get("/success" /* Success */, (_req, res) => {
            var _a;
            res.sendFile(path_1.join(viewDir, 'success.html'));
            (_a = createSystemServer) === null || _a === void 0 ? void 0 : _a.close();
        });
        createSystemApp.post("/create-system" /* CreateSystem */, async (req, res) => {
            var _a, _b;
            systemDetails.systemCreationError = [];
            const systemName = (_a = req.body.systemName) === null || _a === void 0 ? void 0 : _a.trim();
            const serviceKeysContents = (_b = req.body.serviceKeysContents) === null || _b === void 0 ? void 0 : _b.trim();
            const saveSystem = req.body.saveSystem;
            if (!systemName) {
                systemDetails.systemCreationError.push(i18next_1.default.t('SYSTEM_NAME_EMPTY'));
            }
            else if (await ux_odata_client_1.isSystemNameInUse({ name: systemName, scp: true })) {
                systemDetails.systemCreationError.push(i18next_1.default.t('SYSTEM_NAME_IN_USE', { name: systemName }));
            }
            // @todo: serivce keys validation (against schema?)
            if (!serviceKeysContents) {
                systemDetails.systemCreationError.push(i18next_1.default.t('SERVICE_KEYS_CONTENT_EMPTY'));
            }
            if (systemDetails.systemCreationError.length) {
                systemDetails.systemName = systemName;
                systemDetails.serviceKeysContents = serviceKeysContents;
                res.redirect("/create-system" /* CreateSystem */);
            }
            else {
                resolve({
                    systemName: systemName.toUpperCase(),
                    serviceKeysContents: serviceKeysContents,
                    saveSystem: saveSystem
                });
                res.redirect("/success" /* Success */);
            }
        });
        // eslint-disable-next-line prefer-const
        createSystemServer = createSystemApp.listen();
        open('http://127.0.0.1:' + createSystemServer.address().port + "/create-system" /* CreateSystem */);
    });
}
//# sourceMappingURL=fiori-tools-proxy.js.map