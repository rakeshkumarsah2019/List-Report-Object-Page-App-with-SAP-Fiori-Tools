import { SapSystem } from './sapSystem';
import { isAppStudio, listDestinations } from '../connection';
import { SystemConfig, ServiceInfo } from '../config';
import { getSystemStore } from './systemStore';

export interface SapSystems {
    [key: string]: SapSystem;
}

/**
 * Returns a list of available SapSystems
 */
export async function listSAPSystems(): Promise<SapSystems> {
    if (isAppStudio()) {
        const systems: SapSystems = {};
        const destinations = await listDestinations();
        Object.values(destinations).forEach((destination) => {
            systems[destination.Name] = new SapSystem(destination.Name, {
                url: destination.Host,
                destination: destination.Name,
                scp: destination.WebIDEUsage && destination.WebIDEUsage.includes('abap_cloud')
            });
        });
        return systems;
    } else {
        const store = getSystemStore();
        return store.getAll();
    }
}

function toSCPSystemName(systemName: string): string {
    return `${systemName} (SCP)`;
}

/**
 * Check if the system name is already in use
 *
 * @param name
 * @param scp
 */
export async function isSystemNameInUse({ name, scp = false }: { name: string; scp?: boolean }): Promise<boolean> {
    const systems = await getSystemStore().getAll();
    const sys = name.trim();
    return !!systems[scp ? toSCPSystemName(sys) : sys];
}

/**
 * Returns the credentials for the given system. If there are no credentials, then undefined is returned.
 * @param url pointing to the root of an on-premise ABAP system
 * @param client (optional) SAP client
 */
export async function getSapSystem(url: string, client?: string): Promise<SapSystem | undefined> {
    if (isAppStudio()) {
        throw Error('Not supported in AppStudio.');
    } else {
        const id = SapSystem.idFrom(url, client);
        return getSystemStore().get(id);
    }
}

/**
 * Create an SapSystem instance
 * @param name unique name/id of the SapSystem
 * @param url pointing to the root of an on-premise ABAP system
 * @param client (optional) SAP client
 */
export function createSapSystem(name: string, url: string, client?: string): SapSystem {
    return new SapSystem(name, { url, client });
}

/**
 * Create an SapSystem instance extract the path of the provided service url
 * @param urlString url pointing to any service with option sap-client parameter
 */
export function createForServiceUrl(urlString: string): { system: SapSystem; servicePath: string } {
    const url = new URL(urlString);
    return {
        system: this.createForOnPremSystem('temp', url.hostname, url.searchParams['sap-client']),
        servicePath: url.pathname
    };
}

/**
 * Create an SapSystem instance pointing to a Steampunk service
 * @param name unique name/id of the SapSystem
 * @param serviceKey serviceKey as string or ServiceInfo object
 */
export function createSapSystemForSteampunk(name: string, serviceKey: string | ServiceInfo): SapSystem {
    // todo: if string load from filesystem or parse
    const service = typeof serviceKey === 'string' ? JSON.parse(serviceKey) : (serviceKey as ServiceInfo);
    const config: SystemConfig = {
        url: service.url,
        scp: true
    };
    return new SapSystem(toSCPSystemName(name), config, { serviceKeysContents: service });
}

/**
 * Save an SAP System to the local system store
 * @param system
 */
export async function saveSapSystem(system: SapSystem): Promise<boolean> {
    const store = getSystemStore();
    return store.save(system);
}

/**
 * Delete an SAP System to the local system store
 * @param system
 */
export async function deleteSapSystem(system: SapSystem): Promise<boolean> {
    const store = getSystemStore();
    return store.delete(system);
}

/**
 * Renames an SAP System. Takes into account if it's an SCP system or not (to account for naming rules)
 *
 * @param newName new name for the SAP System
 * @param isScp Boolean to indicate if system is an SCP system or not (default is false)
 * @returns SAP System passed in, with new name
 */
export function renameSystem({
    newName,
    isScp = false,
    system
}: {
    newName: string;
    isScp: boolean;
    system: SapSystem;
}): SapSystem {
    system.name = isScp ? toSCPSystemName(newName) : newName;
    return system;
}

export { SapSystem };
