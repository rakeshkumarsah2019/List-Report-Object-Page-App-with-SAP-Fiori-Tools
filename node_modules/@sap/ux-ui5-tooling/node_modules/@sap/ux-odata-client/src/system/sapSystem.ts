import { ODataClient, ODataVersion, Catalog, Ui5AbapRepository } from '../client';
import { SystemConfig, Credentials, ServiceInfo } from '../config';
import { Connection } from '../connection';

export interface SerializedSapSystem {
    name: string;
    url: string;
    client?: string;
    serviceKeys?: ServiceInfo;
    username?: string;
    password?: string;
}

export class SapSystem {
    private _name: string;

    public readonly config: SystemConfig;

    private credentials: Credentials;

    private connection: Connection;

    public static fromSerialized(s: SerializedSapSystem): SapSystem {
        const credentials =
            s.serviceKeys || s.username || s.password
                ? {
                      serviceKeysContents: s.serviceKeys,
                      username: s.username,
                      password: s.password
                  }
                : undefined;
        return new SapSystem(s.name, { url: s.url, client: s.client }, credentials);
    }

    public static idFrom(url: string, client?: string): string {
        return `${url.trim().replace(/\/$/, '')}${client ? '/' + client : ''}`;
    }

    public constructor(name: string, config: SystemConfig, credentials?: Credentials) {
        this._name = name;
        this.config = config;
        this.credentials = credentials ?? {};

        // If `config.scp` is not passed in, infer from the presence of serviceKeys
        if (this.config.scp === void 0)
            this.config.scp = !!credentials?.serviceKeysContents || !!credentials?.serviceKeys;
    }

    public get name(): string {
        return this._name;
    }

    public set name(newName: string) {
        this._name = newName;
    }

    public isScp(): boolean {
        return this.config.scp;
    }

    /** Get a unique key to represent an SAP System */
    public getId(): string {
        return SapSystem.idFrom(this.config.url, this.config.client);
    }

    public serialize(): SerializedSapSystem {
        return {
            name: this._name,
            url: this.config?.url,
            client: this.config?.client,
            serviceKeys: this.credentials?.serviceKeysContents as ServiceInfo | undefined,
            username: this.credentials?.username,
            password: this.credentials?.password
        };
    }

    public async getService(path: string): Promise<ODataClient> {
        const system = JSON.parse(JSON.stringify(this.config));
        system.service = path;
        if (this.connection) {
            return new ODataClient({ system, connection: this.connection });
        } else {
            const client = new ODataClient({ system, credentials: this.credentials });
            this.connection = await client.getConnection();
            return client;
        }
    }

    public async getCatalog(odataVersion: ODataVersion = ODataVersion.v2): Promise<Catalog> {
        const system = JSON.parse(JSON.stringify(this.config));
        if (this.connection) {
            return new Catalog({ system, connection: this.connection, odataVersion });
        } else {
            const catalog = new Catalog({ system, credentials: this.credentials, odataVersion });
            this.connection = await catalog.getConnection();
            return catalog;
        }
    }

    public async getUi5Repository(log = console): Promise<Ui5AbapRepository> {
        const system = JSON.parse(JSON.stringify(this.config));
        if (this.connection) {
            return new Ui5AbapRepository({ system, connection: this.connection, log });
        } else {
            const repo = new Ui5AbapRepository({ system, credentials: this.credentials, log });
            this.connection = await repo.getConnection();
            return repo;
        }
    }

    public setCredentials(credentials: Credentials): void {
        this.credentials = credentials;
    }
}
