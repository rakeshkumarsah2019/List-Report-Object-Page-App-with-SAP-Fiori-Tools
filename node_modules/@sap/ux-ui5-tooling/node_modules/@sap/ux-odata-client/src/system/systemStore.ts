import { SapSystem, SapSystems } from './index';
import { Logger } from '../utils';
import { getSecureStore, SecureStore } from '../secure-store';
import { SerializedSapSystem } from './sapSystem';
import { ServiceName } from '../config';

interface SystemStore {
    getAll(): Promise<SapSystems>;
    get(id: string): Promise<SapSystem | undefined>;
    save(system: SapSystem): Promise<boolean>;
    delete(system: SapSystem): Promise<boolean>;
}

class DefaultImplementation implements SystemStore {
    private readonly secureStore: SecureStore;

    constructor(log: Logger) {
        this.secureStore = getSecureStore(log);
    }
    public async getAll(): Promise<SapSystems> {
        const systems: SapSystems = {};
        const serializedSystems: SerializedSapSystem[] = await this.secureStore.getAll(ServiceName.SystemInfo);
        serializedSystems.forEach((s) => {
            const sys = SapSystem.fromSerialized(s);
            systems[sys.name] = sys;
        });
        return systems;
    }

    public async get(id: string): Promise<SapSystem | undefined> {
        const serializedSystem = await this.secureStore.retrieve<SerializedSapSystem>(ServiceName.SystemInfo, id);
        if (serializedSystem) {
            return SapSystem.fromSerialized(serializedSystem);
        } else {
            return undefined;
        }
    }

    public async save(system: SapSystem): Promise<boolean> {
        return this.secureStore.save(ServiceName.SystemInfo, system.getId(), system.serialize());
    }

    public async delete(system: SapSystem): Promise<boolean> {
        return this.secureStore.delete(ServiceName.SystemInfo, system.getId());
    }
}

export const getSystemStore = (log: Logger = console): SystemStore => {
    return new DefaultImplementation(log);
};
