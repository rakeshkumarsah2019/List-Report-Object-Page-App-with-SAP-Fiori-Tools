// eslint-disable-next-line @typescript-eslint/no-var-requires
import { Logger } from '../utils';
import { SecureStore } from './index';
import * as Keytar from 'keytar';

export class KeytarStore implements SecureStore {
    private readonly log: Logger;
    private readonly keytar: typeof Keytar;

    constructor(log: Logger, keytar: typeof Keytar) {
        this.log = log;
        this.keytar = keytar;
    }

    public async save<T>(service: string, key: string, value: T): Promise<boolean> {
        try {
            const serialized = JSON.stringify(value);
            await this.keytar.setPassword(service, key, serialized);
            return true;
        } catch (e) {
            this.log.error(`Error saving to secure store. Service: [${service}], key: [${key}]`);
            this.log.error(e);
            return false;
        }
    }

    public async retrieve<T>(service: string, key: string): Promise<T | null> {
        try {
            const serializedValue = await this.keytar.getPassword(service, key);
            return JSON.parse(serializedValue);
        } catch (e) {
            this.log.error(`Error retrieving from secure store. Service: [${service}], key: [${key}]`);
            this.log.error(e);
            return null;
        }
    }

    public async delete(service: string, key: string): Promise<boolean> {
        try {
            return await this.keytar.deletePassword(service, key);
        } catch (e) {
            this.log.error(`Error deleting from secure store. Service: [${service}], key: [${key}]`);
            this.log.error(e);
            return false;
        }
    }

    public async getAll<T>(service: string): Promise<T[]> {
        try {
            return (await this.keytar.findCredentials(service)).map((x) => JSON.parse(x.password));
        } catch (e) {
            this.log.error(`Error getting values for service: [${service}]`);
            this.log.error(e);
            return [];
        }
    }
}
