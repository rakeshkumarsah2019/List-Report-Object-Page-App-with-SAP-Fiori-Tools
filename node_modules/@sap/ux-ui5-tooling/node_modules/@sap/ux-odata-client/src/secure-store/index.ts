import * as Keytar from 'keytar';
import { Logger } from '../utils';
import { isAppStudio } from '../connection';
import { DummyStore } from './dummyStore';
import { KeytarStore } from './keytarStore';

export interface SecureStore {
    /** Save a value in the secure store. Can overwrite previous values
     *
     * Returns `true` if successful, `false` if not
     */
    save<T>(service: string, key: string, value: T): Promise<boolean>;

    /** Retrieves a previous stored key. Returns null if not found */
    retrieve<T>(service: string, key: string): Promise<T | null>;

    /** Delete a previously stored key.
     *
     * Returns `true` if successful, `false` if not
     * */
    delete(service: string, key: string): Promise<boolean>;

    /** Get all the values stored for the service
     *
     * @param service
     */
    getAll<T>(service: string): Promise<T[]>;
}

function getKeytar(log: Logger): typeof Keytar | null {
    try {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        return require('keytar');
    } catch (e) {
        log.warn(e);
        log.warn(`Could not "require('keytar')". Trying VSCode's copy`);
        let vscode;
        try {
            vscode = require('vscode');
        } catch (e) {
            log.warn(e);
            log.warn('Could not get hold of vscode');
            return null;
        }
        try {
            return require(`${vscode?.env?.appRoot}/node_modules.asar/keytar`);
        } catch (e) {
            log.warn(e);
            log.warn('Could not get keytar from vscode node_modules.asar');
        }
        try {
            return require(`${vscode?.env?.appRoot}/node_modules/keytar`);
        } catch (e) {
            log.warn(e);
            log.warn('Could not get keytar from vscode node_modules');
        }
        return null;
    }
}

/**
 * Create an instance of a store
 */
export const getSecureStore = (log: Logger): SecureStore => {
    if (isAppStudio()) {
        return new DummyStore(log);
    } else {
        const keytar = getKeytar(log);
        return keytar ? new KeytarStore(log, keytar) : new DummyStore(log);
    }
};
