import axios from 'axios';
import { Logger } from '../utils';
import { Destination, Destinations, SystemConfig } from '../config';

/**
 * Enumeration of environment variables used in AppStudio
 */
export enum ENV {
    PROXY_URL = 'HTTP_PROXY',
    H2O_URL = 'H2O_URL'
}

/**
 * Check if we're running in App Studio
 */
export function isAppStudio(): boolean {
    return !!process.env[ENV.H2O_URL];
}

/**
 * Fetch a list of available destinations from an instance of an SCP destination service
 * @param log optional log output
 */
async function fetchDestinations(log: Logger = console): Promise<Destinations> {
    const destinations = {};
    await axios.get(process.env[ENV.PROXY_URL] + '/reload');
    const response = await axios.get<Destination[]>(process.env[ENV.H2O_URL] + '/api/listDestinations');
    response.data.forEach((destination) => {
        if (destination.WebIDEEnabled) {
            destinations[destination.Name] = destination;
        }
    });
    return destinations;
}

/**
 * If running on SCP, return available destinations otherwise return an empty object
 * @param log optional log output
 */
export async function listDestinations(log: Logger = console): Promise<Destinations> {
    if (isAppStudio()) {
        return fetchDestinations(log);
    } else {
        return {};
    }
}

export function replaceUrlForAppStudio(system: SystemConfig, destination: Destination): void {
    system.originalUrl = system.url;
    system.url = process.env[ENV.H2O_URL];
    system.service = `/destinations/${destination.Name}${system.service ?? ''}`;
    delete system.scp;
    delete system.client;
}

/**
 * If running on SCP, fetch available destination and check overwrite the system.url with the matching destination url
 * @param system System configuration that is to be updated
 * @param log optional log output
 */
export async function updateSystemConfig(system: SystemConfig, log: Logger = console): Promise<void> {
    if (isAppStudio() && system.destination) {
        const destinations = await fetchDestinations(log);
        if (destinations[system.destination]) {
            replaceUrlForAppStudio(system, destinations[system.destination]);
        }
    }
}
