import axios, { AxiosResponse, AxiosRequestConfig, AxiosBasicCredentials } from 'axios';
import { Connection } from './connection';
import { Cookies } from './cookies';
import { SystemConfig, Credentials } from '../config';
import { Logger } from '../utils';
import { connectUsingUaa } from './uaaOauth';

export enum CSRF {
    requestHeaderName = 'X-Csrf-Token',
    requestHeaderValue = 'Fetch',
    responseHeaderName = 'x-csrf-token'
}

export const sapClientQueryParam = 'sap-client';

/**
 * Implementation of basic authentication to SAP systems
 * @param target system that is to be connected to
 * @param credentials username/password required for BasicAuth
 */
async function connectWithBasicAuth(target: SystemConfig, credentials: Credentials): Promise<Connection> {
    const url = new URL(target.service, target.url).toString();
    const config: AxiosRequestConfig = {
        auth: credentials as AxiosBasicCredentials,
        params: {},
        headers: {
            [CSRF.requestHeaderName]: CSRF.requestHeaderValue
        },
        withCredentials: true
    };
    if (target.client !== undefined) {
        config.params[sapClientQueryParam] = target.client;
    }

    try {
        const response: AxiosResponse = await axios.get(`${url}/`, config);
        return {
            cookies: new Cookies().setCookie(response),
            xsrfToken: response.headers[CSRF.responseHeaderName]
        };
    } catch (error) {
        if (error.code === 'ENOTFOUND' || (error.response && error.response.status === 404)) {
            throw new Error(
                `Invalid service url: ${url} - Please validate this url and your target system configuration.`
            );
        } else {
            throw error;
        }
    }
}

/**
 * Generic connect method that will be used as abstraction of different authentication methods.
 * @param target system that is to be connected to
 * @param credentials optional required credentials
 * @param log optional logger that is used for any kind of log message
 */
export async function connect(target: SystemConfig, credentials?: Credentials, log?: Logger): Promise<Connection> {
    if (credentials && (credentials.serviceInfo || credentials.serviceKeysContents)) {
        return connectUsingUaa(target, credentials, log);
    } else {
        return connectWithBasicAuth(target, credentials);
    }
}

export * from './destination';
export { Connection, Cookies };
