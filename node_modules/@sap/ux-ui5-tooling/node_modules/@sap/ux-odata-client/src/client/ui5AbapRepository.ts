import { ODataClient, ODataClientOptions } from './oDataClient';
import { ApplicationConfig } from '../config';
import { AxiosResponse, AxiosRequestConfig, AxiosInstance } from 'axios';
import { readFileSync } from 'fs';
import { prettyPrintMessage } from './message';

/**
 * Application information object returned by the UI5 Repository service
 */
export interface AppInfo {
    Name: string;
    Package: string;
    Description?: string;
    Info?: string;
    ZipArchive?: string;
}

// DEFAULT parth of the UI5 Repository service
const DEFAULT_SERVICE_PATH = '/sap/opu/odata/UI5/ABAP_REPOSITORY_SRV';

/**
 * Extension of the generic OData client simplifying the consumption of the UI5 repository service
 */
export class Ui5AbapRepository extends ODataClient {
    public constructor({ system, credentials = undefined, log = console, connection = undefined }: ODataClientOptions) {
        system.service = system.service ?? DEFAULT_SERVICE_PATH;
        super({ system, credentials, log, connection });
    }

    /**
     * Get information about a deployed application. Returns undefined if the application cannot be found.
     * @param app application id (BSP application name)
     */
    public async getInfo(app: string): Promise<AppInfo> {
        try {
            return await this.get<AppInfo>(`/Repositories('${encodeURIComponent(app)}')`);
        } catch (error) {
            return undefined;
        }
    }

    /**
     * Deploy the given archive either by creating a new BSP or updating an existing one
     * @param archivePath path to a zip archive containing the application files
     * @param app application configuration
     * @param testMode if set to true, all requests will be send, the service checks them, but no actual deployment will happen
     */
    public async deploy(archivePath: string, app: ApplicationConfig, testMode = false): Promise<AxiosResponse> {
        const httpClient = await this.getClient();
        const info: AppInfo = await this.getInfo(app.name);
        const payload = this.createPayload(
            archivePath,
            app.name,
            app.description ?? 'Deployed with SAP Fiori tools',
            info ? info.Package : app.package,
            httpClient
        );
        const config = this.createConfig(app.transport, testMode);
        try {
            let response;
            if (info) {
                // sometimes a repo update request fails with a wrong duplicate ID error. If the same request is sent again, it works.
                try {
                    response = await httpClient.put(
                        `/Repositories('${encodeURIComponent(app.name)}')`,
                        payload,
                        config
                    );
                } catch (error) {
                    response = await httpClient.put(
                        `/Repositories('${encodeURIComponent(app.name)}')`,
                        payload,
                        config
                    );
                }
            } else {
                response = await httpClient.post('/Repositories', payload, config);
            }
            if (response.headers['sap-message']) {
                const message = JSON.parse(response.headers['sap-message']);
                prettyPrintMessage(message, this.log);
            }

            // log url of created/updated app
            const path = '/sap/bc/ui5_ui5' + (!app.name.startsWith('/') ? '/sap/' : '') + app.name.toLowerCase();
            const query = this.system.client ? '?sap-client=' + this.system.client : '';
            const frontendUrl = this.getAbapFrontendUrl(this.system.originalUrl ?? this.system.url);
            this.log.info(`App available at ${frontendUrl}${path}${query}`);

            return response;
        } catch (error) {
            this.logError(error);
            throw error;
        }
    }

    /**
     * Translate the technical SCP ABAP URL to the frontend URL
     *
     * @param technicalUrl Technical URL of the ABAP system from service keys
     */
    protected getAbapFrontendUrl(technicalUrl: string): string {
        return technicalUrl.replace(/\.abap\./, '.abap-web.');
    }

    /**
     * Internal helper method to generate a request configuration (headers, parameters)
     * @param transport optional transport request id
     * @param testMode test mode enabled or not
     */
    protected createConfig(transport?: string, testMode?: boolean): AxiosRequestConfig {
        const headers = {
            'Content-Type': 'application/atom+xml',
            type: 'entry',
            charset: 'UTF8'
        };
        const params: { [key: string]: string | boolean } = {
            CodePage: "'UTF8'",
            CondenseMessagesInHttpResponseHeader: 'X',
            format: 'json'
        };
        if (transport) {
            params.TransportRequest = transport;
        }
        if (testMode) {
            params.TestMode = true;
        }

        return { headers, params };
    }

    /**
     * Create the request payload for a deploy request
     * @param archive archive file path
     * @param name application name
     * @param description description for the deployed app
     * @param abapPackage ABAP package containing the app
     */
    protected createPayload(
        archive: string,
        name: string,
        description: string,
        abapPackage: string,
        httpClient: AxiosInstance
    ): string {
        const base64Data = readFileSync(archive, { encoding: 'base64' });
        const time = new Date().toISOString();
        const payload =
            `<entry xmlns="http://www.w3.org/2005/Atom"` +
            `       xmlns:m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"` +
            `       xmlns:d="http://schemas.microsoft.com/ado/2007/08/dataservices"` +
            `       xml:base="${httpClient.defaults.baseURL}">` +
            `  <id>${httpClient.defaults.baseURL}/Repositories('${name}')</id>` +
            `  <title type="text">Repositories('${name}')</title>` +
            `  <updated>${time}</updated>` +
            `  <category term="/UI5/ABAP_REPOSITORY_SRV.Repository" scheme="http://schemas.microsoft.com/ado/2007/08/dataservices/scheme"/>` +
            `  <link href="Repositories('${name}')" rel="edit" title="Repository"/>` +
            `  <content type="application/xml">` +
            `    <m:properties>` +
            `      <d:Name>${name}</d:Name>` +
            `      <d:Package>${abapPackage?.toUpperCase()}</d:Package>` +
            `      <d:Description>${description}</d:Description>` +
            `      <d:ZipArchive>${base64Data}</d:ZipArchive>` +
            `      <d:Info/>` +
            `    </m:properties>` +
            `  </content>` +
            `</entry>`;

        return payload;
    }
}
