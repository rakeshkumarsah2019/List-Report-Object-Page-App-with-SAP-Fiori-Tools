import { AxiosError, AxiosInstance } from 'axios';
import { Credentials, SystemConfig } from '../config';
import { Connection } from '../connection';
import { Logger } from '../utils';
import { newHttpClient } from './httpClient';
import { prettyPrintError } from './message';
import { isAppStudio, updateSystemConfig } from '../connection/destination';
import { TlsPatch } from './patchTls';

/**
 * Structure of OData responses.
 */
export interface OdataResponse<T> {
    d: {
        results: T[];
    };
}

export interface ODataClientOptions {
    system: SystemConfig;
    credentials?: Credentials;
    log?: Logger;
    connection?: Connection;
}

/**
 * Generic OData client that can be used to send requests to any OData service.
 */
export class ODataClient {
    protected connection: Connection | undefined;
    protected readonly system: SystemConfig;
    protected readonly credentials: Credentials;
    protected log: Logger;
    private client: AxiosInstance;

    public constructor({ system, credentials = undefined, log = console, connection = undefined }: ODataClientOptions) {
        this.system = system;
        this.credentials = credentials;
        this.log = log;
        this.connection = connection;

        // monkey patch TLS to trust SAPs root certificate
        if (system && TlsPatch.isPatchRequired(system.url)) {
            TlsPatch.apply();
        }
    }

    /**
     * Log errors more user friendly if it is a standard Gateway error
     * @param e error thrown by Axios after sending a request
     */
    protected logError(e: AxiosError): void {
        this.log.error(e.message);
        if (e.isAxiosError && e.response.data['error']) {
            prettyPrintError(e.response.data['error'], this.log);
        }
    }

    /**
     * Get an AxiosInstance after connecting to the endpoint
     */
    protected async getClient(): Promise<AxiosInstance> {
        if (!this.client) {
            // Check if we run in app studio
            if (isAppStudio()) {
                await updateSystemConfig(this.system);
            }
            const { connection, httpClient } = await newHttpClient({
                system: this.system,
                credentials: this.credentials,
                log: this.log,
                existingConnection: this.connection
            });
            this.connection = connection;
            this.client = httpClient;
        }
        return this.client;
    }

    public async getConnection(): Promise<Connection> {
        if (!this.connection) {
            await this.getClient();
        }
        return this.connection;
    }

    /**
     * Request the metadata of the odata service
     */
    public async metadata(): Promise<string> {
        const httpClient = await this.getClient();
        const response = await httpClient.get('/$metadata');
        return response.data;
    }

    /**
     * Get any data from an OData service
     * @param path service specific entity path
     */
    public async get<T>(path: string): Promise<T> {
        const httpClient = await this.getClient();
        const response = await httpClient.get(path);
        if (response?.data?.d) {
            if (response.data.d.results) {
                return response.data.d.results as T;
            } else {
                return response.data.d as T;
            }
        }
    }
}
