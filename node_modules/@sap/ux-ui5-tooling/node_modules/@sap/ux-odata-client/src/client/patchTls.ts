import tls, { SecureContext } from 'tls';
import { join } from 'path';
import { readFileSync } from 'fs';

export class TlsPatch {
    private static _patched: boolean;

    public static get isPatched(): boolean {
        return TlsPatch._patched;
    }

    public static isPatchRequired(url: string): boolean {
        return !TlsPatch.isPatched && url && url.includes('.sap.corp');
    }

    /**
     * Monkey patching the secure context to also support SAPs root CA
     */
    public static apply(): void {
        if (TlsPatch.isPatched) {
            return;
        }

        const origCreateSecureContext = tls.createSecureContext;
        tls.createSecureContext = (options): SecureContext => {
            const context = origCreateSecureContext(options);

            const pem = readFileSync(join(__dirname, '..', '..', 'static', 'sap-global-root-ca.pem'), {
                encoding: 'ascii'
            }).replace(/\r\n/g, '\n');

            const certs = pem.match(/-----BEGIN CERTIFICATE-----\n[\s\S]+?\n-----END CERTIFICATE-----/g);

            certs.forEach((cert) => {
                context.context.addCACert(cert.trim());
            });

            return context;
        };

        TlsPatch._patched = true;
    }
}
