import { join } from 'path';
import { validate } from 'fast-xml-parser';
import express from 'express';
import * as YAML from 'yamljs';
import { createMockMiddleware } from '@sap/ux-mock-server';
import { SystemConfig, ODataClient, Catalog } from '../../src';
import { URL } from 'url';
import { readFileSync } from 'fs';

jest.setTimeout(30000);

const mockRoot = join(process.cwd(), '..', '..', '..', '/test/apps/v2/products');
let url;
let server;

function updateRelativePaths(project: string, config: any): void {
    config.service.metadataXmlPath = join(project, config.service.metadataXmlPath);
    config.service.mockdataRootPath = join(project, config.service.mockdataRootPath);
    if (config.service.serviceXmlPath) {
        config.service.serviceXmlPath = join(project, config.service.serviceXmlPath);
    }
    if (config.static && config.static.localPath) {
        config.static.localPath = join(project, config.static.localPath);
    }
    if (config.annotations && config.annotations.localPath) {
        config.annotations.localPath = join(project, config.annotations.localPath);
    }
}

beforeAll(
    async (done): Promise<void> => {
        const yaml = readFileSync(join(mockRoot, 'ui5.yaml'), 'utf-8');
        const config = YAML.parse(yaml).server.customMiddleware[0].configuration;
        // update relative paths for local testing
        updateRelativePaths(mockRoot, config);
        const app = express();
        console.log(config);
        app.use(express.static(join(mockRoot, 'webapp')));
        app.use(await createMockMiddleware(config));
        const port = '1234';
        server = app.listen(port, () => {
            url = `http://0.0.0.0:${port}${config.service.urlBasePath}/${config.service.name}`;
            console.log(`Server started.\n\tService: ${url}\n\tApp: http://0.0.0.0:${port}`);
            done();
        });
    }
);

afterAll(() => {
    server.close();
});

test('test app-gen flow', async () => {
    console.log(url);
    const urlObject = new URL(url);
    const system: SystemConfig = {
        url: `${urlObject.protocol}${urlObject.host}`,
        service: urlObject.pathname
    };

    // fetch metadata
    const service = new ODataClient({ system });
    const metadata: string = await service.metadata();
    expect(metadata).toBeDefined();
    expect(validate(metadata)).toBe(true);

    // get annotations
    const catalog = new Catalog({
        system: { url: system.url },
        connection: await service.getConnection() // Re-use connection
    });
    const annotations = await catalog.getAnnotations({ path: urlObject.pathname });
    expect(annotations).toBeDefined();
    expect(annotations.length).toBe(1);

    const anno = annotations[0].Definitions;
    expect(anno).toBeDefined();
    expect(validate(anno)).toBe(true);
});
