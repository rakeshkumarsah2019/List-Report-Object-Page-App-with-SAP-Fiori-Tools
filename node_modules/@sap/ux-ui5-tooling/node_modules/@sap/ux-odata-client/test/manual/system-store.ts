import {
    SapSystem,
    saveSapSystem,
    listSAPSystems,
    createSapSystemForSteampunk,
    deleteSapSystem,
    getSapSystem,
    isSystemNameInUse
} from '../../src/system/index';
import * as fs from 'fs';
import { join, resolve } from 'path';

// this folder is hidden by vscode and webstorm
const configFolder = resolve(__dirname, '.hg', 'systems');

const sh4: any = JSON.parse(fs.readFileSync(join(configFolder, 'sh4.json'), 'utf-8'));
const ec1: any = JSON.parse(fs.readFileSync(join(configFolder, 'ec1.json'), 'utf-8'));

const systems = {
    sh4: new SapSystem('SH4', sh4.target, sh4.credentials),
    ec1: new SapSystem('EC1', ec1.target),
    uit: createSapSystemForSteampunk('UIT', fs.readFileSync(join(configFolder, 'uit-keys.json')).toString())
};

async function loadSystems(): Promise<void> {
    await saveSapSystem(systems.sh4);
    await saveSapSystem(systems.ec1);
    await saveSapSystem(systems.uit);
}

async function systemInUse(): Promise<void> {
    console.log(`${systems.sh4.name}: In use -> ${await isSystemNameInUse({ name: systems.sh4.name })}`);
    console.log(`${systems.ec1.name}: In use -> ${await isSystemNameInUse({ name: systems.ec1.name })}`);
    console.log(`${systems.uit.name}: In use -> ${await isSystemNameInUse({ name: 'UIT', scp: true })}`);
}

async function list(): Promise<void> {
    const systemList = await listSAPSystems();
    for (const s in systemList) {
        console.log('System: ' + s);
        console.dir(systemList[s]);
    }
}

async function get(): Promise<void> {
    const test = await getSapSystem(
        'https://4c7c8221-1340-459a-bfd2-ffeb690324db.abap.stagingaws.hanavlab.ondemand.com'
    );
    console.log(test);
}

async function deleteSystems(): Promise<void> {
    await deleteSapSystem(systems.sh4);
    await deleteSapSystem(systems.ec1);
    await deleteSapSystem(systems.uit);
}

if (require.main === module) {
    const command = process.argv[2] ?? 'list';
    switch (command) {
        case 'load':
            loadSystems();
            break;
        case 'list':
            list();
            break;
        case 'get':
            get();
            break;
        case 'del':
            deleteSystems();
            break;
        case 'used':
            systemInUse();
            break;
        default:
            break;
    }
}
