// jest.mock('../../../src/connection/uaaOauth');

import { connectUsingUaa, defaultUtils } from '../../../src/connection/uaaOauth';
import { ServiceInfo } from '../../../src/config';

describe('UAA OAuth Handler', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });

    test('Missing client id throws an error', async () => {
        const getServiceInfo = (): ServiceInfo => {
            return ({ uaa: { clientsecret: 'secret', url: 'url' } } as unknown) as ServiceInfo;
        };
        await expect(
            connectUsingUaa({ url: 'http://url' }, {}, console, { ...defaultUtils, serviceInfo: getServiceInfo })
        ).rejects.toThrowError(/client id missing/i);
    });

    test('Missing client secret throws an error', async () => {
        const getServiceInfo = (): ServiceInfo => {
            return ({ uaa: { clientid: 'id', url: 'url' } } as unknown) as ServiceInfo;
        };
        await expect(
            connectUsingUaa({ url: 'http://url' }, {}, console, { ...defaultUtils, serviceInfo: getServiceInfo })
        ).rejects.toThrowError(/client secret missing/i);
    });

    test('Missing client secret throws an error', async () => {
        const getServiceInfo = (): ServiceInfo => {
            return ({ uaa: { clientid: 'id', clientsecret: 'secret' } } as unknown) as ServiceInfo;
        };
        await expect(
            connectUsingUaa({ url: 'http://url' }, {}, console, { ...defaultUtils, serviceInfo: getServiceInfo })
        ).rejects.toThrowError(/uaa url missing/i);
    });
});
