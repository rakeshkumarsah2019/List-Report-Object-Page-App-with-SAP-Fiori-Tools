import { createSapSystem, createSapSystemForSteampunk } from '../../../src/system/index';
import { SerializedSapSystem, SapSystem } from '../../../src/system/sapSystem';

describe('SAP System', () => {
    it('Serializes all the necessary properties for non-SCP systems', () => {
        const systemName = 'sys1';
        const url = 'http://sys.com';
        const client = '000';
        const sys = createSapSystem(systemName, url, client);

        const serialized = sys.serialize();

        expect(serialized.name).toBe(systemName);
        expect(serialized.url).toBe(url);
        expect(serialized.client).toBe(client);
        expect(serialized.serviceKeys).toBeUndefined();
        expect(serialized.username).toBeUndefined();
        expect(serialized.password).toBeUndefined();
    });

    it('Serializes all the necessary properties for SCP systems', () => {
        const name = 'sys1';
        const serviceKey = {
            uaa: {
                clientid: 'client1',
                clientsecret: 'secret1',
                url: 'http://sys.com'
            },
            url: 'http://sys.com',
            catalogs: {
                abap: {
                    path: 'http://www.sys.abap.com',
                    type: 'sap_abap_catalog_v1'
                }
            }
        };
        const sys = createSapSystemForSteampunk(name, serviceKey);
        const serialized = sys.serialize();
        expect(serialized.name).toBe(`${name} (SCP)`);
        expect(serialized.url).toBe(serviceKey.url);
        expect(serialized.client).toBeUndefined();
        expect(serialized.serviceKeys).toBe(serviceKey);
        expect(serialized.username).toBeUndefined();
        expect(serialized.password).toBeUndefined();
    });

    it('isScp() returns false for non-SCP systems', () => {
        const sys = createSapSystem('sys1', 'http://sys.com', '100');
        expect(sys.isScp()).toBe(false);
    });

    it('isScp() returns true for SCP systems', () => {
        const name = 'sys1';
        const serviceKey = {
            uaa: {
                clientid: 'client1',
                clientsecret: 'secret1',
                url: 'http://sys.com'
            },
            url: 'http://sys.com',
            catalogs: {
                abap: {
                    path: 'http://www.sys.abap.com',
                    type: 'sap_abap_catalog_v1'
                }
            }
        };
        const sys = createSapSystemForSteampunk(name, serviceKey);
        expect(sys.isScp()).toBe(true);
    });

    it('SCP systems are deserialized correctly', () => {
        const name = 'sys1';
        const serviceKeys = {
            uaa: {
                clientid: 'client1',
                clientsecret: 'secret1',
                url: 'http://sys.com'
            },
            url: 'http://sys.com',
            catalogs: {
                abap: {
                    path: 'http://www.sys.abap.com',
                    type: 'sap_abap_catalog_v1'
                }
            }
        };
        const serialized: SerializedSapSystem = {
            name,
            url: serviceKeys.url,
            serviceKeys
        };
        const sys = SapSystem.fromSerialized(serialized);
        expect(sys.name).toBe(name);
        expect(sys.isScp()).toBe(true);
    });

    it('Non-SCP sytems are deserialized correctly', () => {
        const name = 'sys1';
        const serialized: SerializedSapSystem = {
            name,
            url: 'http://sys.com',
            client: '000'
        };

        const sys = SapSystem.fromSerialized(serialized);
        expect(sys.name).toBe(name);
        expect(sys.isScp()).toBe(false);
    });
});
