import { connect, CSRF } from '../../../src/connection';
import axios from 'axios';
import { mocked } from 'ts-jest/utils';

jest.mock('axios');
const mockedAxios = mocked(axios, true);

describe('Basic Auth', () => {
    beforeEach(() => {
        mockedAxios.mockClear();
    });

    it('Client is passed in query params', async () => {
        mockedAxios.get.mockImplementationOnce(async () => {
            return Promise.resolve({ data: {}, status: 200, statusText: 'OK', config: {}, headers: {} });
        });
        const expectedClient = 'someClient';
        await connect({ url: 'http://url', client: expectedClient });
        expect(mockedAxios.get.mock.calls[0]).toHaveProperty(['1', 'params', 'sap-client'], expectedClient);
    });

    it('X-Csrf-Token request header is set to "Fetch"', async () => {
        mockedAxios.get.mockImplementationOnce(async () => {
            return Promise.resolve({ data: {}, status: 200, statusText: 'OK', config: {}, headers: {} });
        });
        await connect({ url: 'http://url' });
        expect(mockedAxios.get.mock.calls[0]).toHaveProperty(
            ['1', 'headers', CSRF.requestHeaderName],
            CSRF.requestHeaderValue
        );
    });

    it('X-Csrf-Token header value is returned', async () => {
        const expectedXsrfToken = 'someToken';
        mockedAxios.get.mockImplementationOnce(async () => {
            return Promise.resolve({
                data: {},
                status: 200,
                statusText: 'OK',
                config: {},
                headers: { [CSRF.responseHeaderName]: expectedXsrfToken }
            });
        });
        const response = await connect({ url: 'http://url' });
        expect(response).toHaveProperty('xsrfToken', expectedXsrfToken);
    });

    it('Cookies are returned correctly', async () => {
        mockedAxios.get.mockImplementationOnce(async () => {
            return Promise.resolve({
                data: {},
                status: 200,
                statusText: 'OK',
                config: {},
                headers: { 'set-cookie': ['cookie1=value1;cookie2=value2', 'cookie3=value3'] }
            });
        });
        const response = await connect({ url: 'http://url' });
        expect(response.cookies.toString()).toBe('cookie1=value1; cookie3=value3');
    });

    it('Error in thrown when service cannot be found: ENOTFOUND', async () => {
        mockedAxios.get.mockImplementationOnce(async () => {
            return Promise.reject({
                code: 'ENOTFOUND'
            });
        });
        await expect(connect({ url: 'http://url' })).rejects.toThrow(/invalid service url/i);
    });

    it('Error in thrown when service cannot be found: 404', async () => {
        mockedAxios.get.mockImplementationOnce(async () => {
            return Promise.reject({
                response: { status: 404 }
            });
        });
        await expect(connect({ url: 'http://url' })).rejects.toThrow(/invalid service url/i);
    });
});
