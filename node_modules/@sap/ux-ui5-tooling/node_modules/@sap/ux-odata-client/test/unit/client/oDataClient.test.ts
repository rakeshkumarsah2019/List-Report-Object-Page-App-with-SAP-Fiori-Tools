import { ODataClient } from '../../../src/client';
import { AxiosInstance } from 'axios';

const mockGet = jest.fn();
const mockAxiosInstance = ({ get: mockGet } as unknown) as AxiosInstance;
jest.mock('../../../src/client/httpClient', () => {
    return {
        newHttpClient: (): { httpClient: AxiosInstance } => {
            return {
                httpClient: mockAxiosInstance
            };
        }
    };
});

describe('OData Client', () => {
    beforeEach(() => {
        mockGet.mockClear();
    });

    it('metadata() GETs "/$metadata"', async () => {
        mockGet.mockResolvedValueOnce({ data: 'foo' });
        const odataClient = new ODataClient({ system: { url: 'http://url', service: 'service1' } });
        await odataClient.metadata();
        expect(mockGet.mock.calls[0]).toHaveProperty('0', '/$metadata');
    });

    it('metadata() throws an error if connection fails', () => {
        mockGet.mockRejectedValueOnce('Cannot connect');
        const odataClient = new ODataClient({ system: { url: 'http://url', service: 'service1' } });
        expect(odataClient.metadata()).rejects.toThrow();
    });

    it('get() returns a single object correctly', async () => {
        const expectedData = { a: 1, b: 'sample', c: 42 };
        mockGet.mockResolvedValueOnce({
            data: {
                d: expectedData
            }
        });
        const odataClient = new ODataClient({ system: { url: 'http://url', service: 'service1' } });
        const actualData = await odataClient.get('/somepath');
        expect(actualData).toBe(expectedData);
    });

    it('get() returns a array correctly', async () => {
        const expectedData = [
            { a: 1, b: 'sample', c: 42 },
            { a: 2, b: 'sample2', c: 13 }
        ];
        mockGet.mockResolvedValueOnce({
            data: {
                d: { results: expectedData }
            }
        });
        const odataClient = new ODataClient({ system: { url: 'http://url', service: 'service1' } });
        const actualData = await odataClient.get('/somepath');
        expect(actualData).toBe(expectedData);
    });

    it('get() returns undefined when data is not in recognizable format', async () => {
        mockGet.mockResolvedValueOnce({
            data: {
                e: {
                    results: [
                        { a: 1, b: 'sample', c: 42 },
                        { a: 2, b: 'sample2', c: 13 }
                    ]
                }
            }
        });
        const odataClient = new ODataClient({ system: { url: 'http://url', service: 'service1' } });
        const actualData = await odataClient.get('/somepath');
        expect(actualData).toBe(undefined);
    });

    it('get() throws an error if connection fails', () => {
        mockGet.mockRejectedValueOnce('Cannot connect');
        const odataClient = new ODataClient({ system: { url: 'http://url', service: 'service1' } });
        expect(odataClient.get('/somepath')).rejects.toThrow();
    });
});
