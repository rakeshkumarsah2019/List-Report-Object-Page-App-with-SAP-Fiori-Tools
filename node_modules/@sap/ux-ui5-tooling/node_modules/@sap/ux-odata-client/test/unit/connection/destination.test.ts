import { isAppStudio, ENV, listDestinations, updateSystemConfig } from '../../../src/connection';
import { SystemConfig } from '../../../src';

const testConfig: SystemConfig = {
    url: 'http://abcdef.com',
    client: '123',
    destination: 'ABC'
};

jest.mock('axios', () => {
    return {
        get: jest.fn(() =>
            Promise.resolve({
                data: [{ Name: testConfig.destination, Host: 'http://ABC.dest', WebIDEEnabled: true }]
            })
        )
    };
});

describe('isAppStudio', () => {
    it('Mimic AppStudio', () => {
        process.env[ENV.H2O_URL] = 'abcdef';
        expect(isAppStudio()).toBe(true);
    });

    it('Mimic local VSCode', () => {
        delete process.env[ENV.H2O_URL];
        expect(isAppStudio()).toBe(false);
    });
});

describe('listDestinations', () => {
    it('Mimic AppStudio', async () => {
        process.env[ENV.H2O_URL] = 'abcdef';
        process.env[ENV.PROXY_URL] = 'http://localhost:8080';
        const destinations = await listDestinations();
        expect(Object.keys(destinations).length).toBe(1);
    });

    it('Mimic local VSCode', async () => {
        delete process.env[ENV.H2O_URL];
        const destinations = await listDestinations();
        expect(Object.keys(destinations).length).toBe(0);
    });
});

describe('updateSystemConfig', () => {
    it('Mimic AppStudio', async () => {
        process.env[ENV.H2O_URL] = 'abcdef';
        process.env[ENV.PROXY_URL] = 'http://localhost:8080';
        const otherConfig = JSON.parse(JSON.stringify(testConfig));
        await updateSystemConfig(otherConfig);
        expect(otherConfig.url).not.toBe(testConfig.url);
        expect(otherConfig.client).not.toBeDefined();
    });

    it('Mimic local VSCode', async () => {
        delete process.env[ENV.H2O_URL];
        const otherConfig = JSON.parse(JSON.stringify(testConfig));
        await updateSystemConfig(otherConfig);
        expect(otherConfig.url).toBe(testConfig.url);
    });
});
