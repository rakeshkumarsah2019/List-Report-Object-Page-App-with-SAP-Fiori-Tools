import * as keytar from 'keytar';
import { mocked } from 'ts-jest/utils';
import { getSecureStore } from '../../../src/secure-store';

jest.mock('keytar');
const mockedKeytar = mocked(keytar, true);

describe('Secure Store', () => {
    const store = getSecureStore(console);
    const service = 'com/sap/dummy';

    beforeEach(() => {
        jest.clearAllMocks();
    });

    test('Saves an object as a serialized string', async () => {
        const value = { url: 'https://sap.com/oauth', refreshToken: '1234567890' };
        await store.save(service, value.url, value);
        expect(mockedKeytar.setPassword.mock.calls[0]).toHaveProperty(['1'], value.url);
        expect(mockedKeytar.setPassword.mock.calls[0]).toHaveProperty(['2'], JSON.stringify(value));
    });

    test('Retrieves an object from a serialized string', async () => {
        const value = { url: 'https://sap.com/oauth', refreshToken: '1234567890' };
        mockedKeytar.getPassword.mockResolvedValueOnce(JSON.stringify(value));
        const actualValue = await store.retrieve(service, value.url);
        expect(actualValue).toEqual(value);
    });

    test('Retrieve returns null if a value cannot be found', async () => {
        const value = { url: 'https://sap.com/oauth', refreshToken: '1234567890' };
        mockedKeytar.getPassword.mockResolvedValueOnce(JSON.stringify(null));
        const actualValue = await store.retrieve(service, value.url);
        expect(actualValue).toBeNull();
    });

    test('Delete return true on success', async () => {
        const value = { url: 'https://sap.com/oauth', refreshToken: '1234567890' };
        mockedKeytar.deletePassword.mockResolvedValueOnce(true);
        const actualValue = await store.delete(service, value.url);
        expect(actualValue).toBe(true);
    });

    test('Delete returns false if no key is found', async () => {
        const value = { url: 'https://sap.com/oauth', refreshToken: '1234567890' };
        mockedKeytar.deletePassword.mockResolvedValueOnce(false);
        const actualValue = await store.delete(service, value.url);
        expect(actualValue).toBe(false);
    });
});
