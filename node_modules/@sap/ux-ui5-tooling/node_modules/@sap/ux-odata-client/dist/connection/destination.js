"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
/**
 * Enumeration of environment variables used in AppStudio
 */
var ENV;
(function (ENV) {
    ENV["PROXY_URL"] = "HTTP_PROXY";
    ENV["H2O_URL"] = "H2O_URL";
})(ENV = exports.ENV || (exports.ENV = {}));
/**
 * Check if we're running in App Studio
 */
function isAppStudio() {
    return !!process.env[ENV.H2O_URL];
}
exports.isAppStudio = isAppStudio;
/**
 * Fetch a list of available destinations from an instance of an SCP destination service
 * @param log optional log output
 */
async function fetchDestinations(log = console) {
    const destinations = {};
    await axios_1.default.get(process.env[ENV.PROXY_URL] + '/reload');
    const response = await axios_1.default.get(process.env[ENV.H2O_URL] + '/api/listDestinations');
    response.data.forEach((destination) => {
        if (destination.WebIDEEnabled) {
            destinations[destination.Name] = destination;
        }
    });
    return destinations;
}
/**
 * If running on SCP, return available destinations otherwise return an empty object
 * @param log optional log output
 */
async function listDestinations(log = console) {
    if (isAppStudio()) {
        return fetchDestinations(log);
    }
    else {
        return {};
    }
}
exports.listDestinations = listDestinations;
function replaceUrlForAppStudio(system, destination) {
    var _a;
    system.originalUrl = system.url;
    system.url = process.env[ENV.H2O_URL];
    system.service = `/destinations/${destination.Name}${_a = system.service, (_a !== null && _a !== void 0 ? _a : '')}`;
    delete system.scp;
    delete system.client;
}
exports.replaceUrlForAppStudio = replaceUrlForAppStudio;
/**
 * If running on SCP, fetch available destination and check overwrite the system.url with the matching destination url
 * @param system System configuration that is to be updated
 * @param log optional log output
 */
async function updateSystemConfig(system, log = console) {
    if (isAppStudio() && system.destination) {
        const destinations = await fetchDestinations(log);
        if (destinations[system.destination]) {
            replaceUrlForAppStudio(system, destinations[system.destination]);
        }
    }
}
exports.updateSystemConfig = updateSystemConfig;
//# sourceMappingURL=destination.js.map