"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const cookies_1 = require("./cookies");
exports.Cookies = cookies_1.Cookies;
const uaaOauth_1 = require("./uaaOauth");
var CSRF;
(function (CSRF) {
    CSRF["requestHeaderName"] = "X-Csrf-Token";
    CSRF["requestHeaderValue"] = "Fetch";
    CSRF["responseHeaderName"] = "x-csrf-token";
})(CSRF = exports.CSRF || (exports.CSRF = {}));
exports.sapClientQueryParam = 'sap-client';
/**
 * Implementation of basic authentication to SAP systems
 * @param target system that is to be connected to
 * @param credentials username/password required for BasicAuth
 */
async function connectWithBasicAuth(target, credentials) {
    const url = new URL(target.service, target.url).toString();
    const config = {
        auth: credentials,
        params: {},
        headers: {
            [CSRF.requestHeaderName]: CSRF.requestHeaderValue
        },
        withCredentials: true
    };
    if (target.client !== undefined) {
        config.params[exports.sapClientQueryParam] = target.client;
    }
    try {
        const response = await axios_1.default.get(`${url}/`, config);
        return {
            cookies: new cookies_1.Cookies().setCookie(response),
            xsrfToken: response.headers[CSRF.responseHeaderName]
        };
    }
    catch (error) {
        if (error.code === 'ENOTFOUND' || (error.response && error.response.status === 404)) {
            throw new Error(`Invalid service url: ${url} - Please validate this url and your target system configuration.`);
        }
        else {
            throw error;
        }
    }
}
/**
 * Generic connect method that will be used as abstraction of different authentication methods.
 * @param target system that is to be connected to
 * @param credentials optional required credentials
 * @param log optional logger that is used for any kind of log message
 */
async function connect(target, credentials, log) {
    if (credentials && (credentials.serviceInfo || credentials.serviceKeysContents)) {
        return uaaOauth_1.connectUsingUaa(target, credentials, log);
    }
    else {
        return connectWithBasicAuth(target, credentials);
    }
}
exports.connect = connect;
__export(require("./destination"));
//# sourceMappingURL=index.js.map