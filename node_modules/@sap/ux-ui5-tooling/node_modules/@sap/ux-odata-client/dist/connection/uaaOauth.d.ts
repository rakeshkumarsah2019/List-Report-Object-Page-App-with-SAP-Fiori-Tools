import { AxiosRequestConfig } from 'axios';
import { SystemConfig, Credentials, ServiceInfo } from '../config';
import { Logger } from '../utils';
import { Connection } from './connection';
declare class Uaa {
    private readonly serviceInfo;
    constructor(serviceInfo: any);
    private validatePropertyExists;
    getAuthCodeUrl({ redirectUri }: {
        redirectUri: any;
    }): string;
    getTokenRequestForAuthCode({ redirectUri, authCode }: {
        redirectUri: any;
        authCode: any;
    }): AxiosRequestConfig;
    getTokenRequestForRefreshToken(refreshToken: any): AxiosRequestConfig;
}
export declare function getServiceInfo(credentials: Credentials): ServiceInfo;
interface UaaUtils {
    serviceInfo: (credentials: Credentials) => ServiceInfo;
    accessToken: ({ uaa, url, log }: {
        uaa: Uaa;
        url: string;
        log: Logger;
    }) => Promise<string>;
    connection: (target: SystemConfig, accessToken: string) => Promise<Connection>;
}
export declare const defaultUtils: UaaUtils;
export declare function connectUsingUaa(target: SystemConfig, credentials: Credentials, log?: Logger, { serviceInfo, connection, accessToken }?: UaaUtils): Promise<Connection>;
export {};
