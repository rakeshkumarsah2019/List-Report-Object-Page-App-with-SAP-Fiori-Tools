"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const httpClient_1 = require("./httpClient");
const message_1 = require("./message");
const destination_1 = require("../connection/destination");
const patchTls_1 = require("./patchTls");
/**
 * Generic OData client that can be used to send requests to any OData service.
 */
class ODataClient {
    constructor({ system, credentials = undefined, log = console, connection = undefined }) {
        this.system = system;
        this.credentials = credentials;
        this.log = log;
        this.connection = connection;
        // monkey patch TLS to trust SAPs root certificate
        if (system && patchTls_1.TlsPatch.isPatchRequired(system.url)) {
            patchTls_1.TlsPatch.apply();
        }
    }
    /**
     * Log errors more user friendly if it is a standard Gateway error
     * @param e error thrown by Axios after sending a request
     */
    logError(e) {
        this.log.error(e.message);
        if (e.isAxiosError && e.response.data['error']) {
            message_1.prettyPrintError(e.response.data['error'], this.log);
        }
    }
    /**
     * Get an AxiosInstance after connecting to the endpoint
     */
    async getClient() {
        if (!this.client) {
            // Check if we run in app studio
            if (destination_1.isAppStudio()) {
                await destination_1.updateSystemConfig(this.system);
            }
            const { connection, httpClient } = await httpClient_1.newHttpClient({
                system: this.system,
                credentials: this.credentials,
                log: this.log,
                existingConnection: this.connection
            });
            this.connection = connection;
            this.client = httpClient;
        }
        return this.client;
    }
    async getConnection() {
        if (!this.connection) {
            await this.getClient();
        }
        return this.connection;
    }
    /**
     * Request the metadata of the odata service
     */
    async metadata() {
        const httpClient = await this.getClient();
        const response = await httpClient.get('/$metadata');
        return response.data;
    }
    /**
     * Get any data from an OData service
     * @param path service specific entity path
     */
    async get(path) {
        var _a, _b;
        const httpClient = await this.getClient();
        const response = await httpClient.get(path);
        if ((_b = (_a = response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.d) {
            if (response.data.d.results) {
                return response.data.d.results;
            }
            else {
                return response.data.d;
            }
        }
    }
}
exports.ODataClient = ODataClient;
//# sourceMappingURL=oDataClient.js.map