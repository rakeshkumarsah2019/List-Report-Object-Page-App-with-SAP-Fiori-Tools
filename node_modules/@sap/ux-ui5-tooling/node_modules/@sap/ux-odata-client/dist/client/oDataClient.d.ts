import { AxiosError, AxiosInstance } from 'axios';
import { Credentials, SystemConfig } from '../config';
import { Connection } from '../connection';
import { Logger } from '../utils';
/**
 * Structure of OData responses.
 */
export interface OdataResponse<T> {
    d: {
        results: T[];
    };
}
export interface ODataClientOptions {
    system: SystemConfig;
    credentials?: Credentials;
    log?: Logger;
    connection?: Connection;
}
/**
 * Generic OData client that can be used to send requests to any OData service.
 */
export declare class ODataClient {
    protected connection: Connection | undefined;
    protected readonly system: SystemConfig;
    protected readonly credentials: Credentials;
    protected log: Logger;
    private client;
    constructor({ system, credentials, log, connection }: ODataClientOptions);
    /**
     * Log errors more user friendly if it is a standard Gateway error
     * @param e error thrown by Axios after sending a request
     */
    protected logError(e: AxiosError): void;
    /**
     * Get an AxiosInstance after connecting to the endpoint
     */
    protected getClient(): Promise<AxiosInstance>;
    getConnection(): Promise<Connection>;
    /**
     * Request the metadata of the odata service
     */
    metadata(): Promise<string>;
    /**
     * Get any data from an OData service
     * @param path service specific entity path
     */
    get<T>(path: string): Promise<T>;
}
