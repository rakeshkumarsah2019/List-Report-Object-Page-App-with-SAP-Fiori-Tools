import { ODataClient, ODataClientOptions } from './oDataClient';
import { ApplicationConfig } from '../config';
import { AxiosResponse, AxiosRequestConfig, AxiosInstance } from 'axios';
/**
 * Application information object returned by the UI5 Repository service
 */
export interface AppInfo {
    Name: string;
    Package: string;
    Description?: string;
    Info?: string;
    ZipArchive?: string;
}
/**
 * Extension of the generic OData client simplifying the consumption of the UI5 repository service
 */
export declare class Ui5AbapRepository extends ODataClient {
    constructor({ system, credentials, log, connection }: ODataClientOptions);
    /**
     * Get information about a deployed application. Returns undefined if the application cannot be found.
     * @param app application id (BSP application name)
     */
    getInfo(app: string): Promise<AppInfo>;
    /**
     * Deploy the given archive either by creating a new BSP or updating an existing one
     * @param archivePath path to a zip archive containing the application files
     * @param app application configuration
     * @param testMode if set to true, all requests will be send, the service checks them, but no actual deployment will happen
     */
    deploy(archivePath: string, app: ApplicationConfig, testMode?: boolean): Promise<AxiosResponse>;
    /**
     * Translate the technical SCP ABAP URL to the frontend URL
     *
     * @param technicalUrl Technical URL of the ABAP system from service keys
     */
    protected getAbapFrontendUrl(technicalUrl: string): string;
    /**
     * Internal helper method to generate a request configuration (headers, parameters)
     * @param transport optional transport request id
     * @param testMode test mode enabled or not
     */
    protected createConfig(transport?: string, testMode?: boolean): AxiosRequestConfig;
    /**
     * Create the request payload for a deploy request
     * @param archive archive file path
     * @param name application name
     * @param description description for the deployed app
     * @param abapPackage ABAP package containing the app
     */
    protected createPayload(archive: string, name: string, description: string, abapPackage: string, httpClient: AxiosInstance): string;
}
