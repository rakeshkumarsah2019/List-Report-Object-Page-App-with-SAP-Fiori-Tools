"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_1 = require("../client");
class SapSystem {
    constructor(name, config, credentials) {
        var _a, _b;
        this._name = name;
        this.config = config;
        this.credentials = (credentials !== null && credentials !== void 0 ? credentials : {});
        // If `config.scp` is not passed in, infer from the presence of serviceKeys
        if (this.config.scp === void 0)
            this.config.scp = !!((_a = credentials) === null || _a === void 0 ? void 0 : _a.serviceKeysContents) || !!((_b = credentials) === null || _b === void 0 ? void 0 : _b.serviceKeys);
    }
    static fromSerialized(s) {
        const credentials = s.serviceKeys || s.username || s.password
            ? {
                serviceKeysContents: s.serviceKeys,
                username: s.username,
                password: s.password
            }
            : undefined;
        return new SapSystem(s.name, { url: s.url, client: s.client }, credentials);
    }
    static idFrom(url, client) {
        return `${url.trim().replace(/\/$/, '')}${client ? '/' + client : ''}`;
    }
    get name() {
        return this._name;
    }
    set name(newName) {
        this._name = newName;
    }
    isScp() {
        return this.config.scp;
    }
    /** Get a unique key to represent an SAP System */
    getId() {
        return SapSystem.idFrom(this.config.url, this.config.client);
    }
    serialize() {
        var _a, _b, _c, _d, _e;
        return {
            name: this._name,
            url: (_a = this.config) === null || _a === void 0 ? void 0 : _a.url,
            client: (_b = this.config) === null || _b === void 0 ? void 0 : _b.client,
            serviceKeys: (_c = this.credentials) === null || _c === void 0 ? void 0 : _c.serviceKeysContents,
            username: (_d = this.credentials) === null || _d === void 0 ? void 0 : _d.username,
            password: (_e = this.credentials) === null || _e === void 0 ? void 0 : _e.password
        };
    }
    async getService(path) {
        const system = JSON.parse(JSON.stringify(this.config));
        system.service = path;
        if (this.connection) {
            return new client_1.ODataClient({ system, connection: this.connection });
        }
        else {
            const client = new client_1.ODataClient({ system, credentials: this.credentials });
            this.connection = await client.getConnection();
            return client;
        }
    }
    async getCatalog(odataVersion = client_1.ODataVersion.v2) {
        const system = JSON.parse(JSON.stringify(this.config));
        if (this.connection) {
            return new client_1.Catalog({ system, connection: this.connection, odataVersion });
        }
        else {
            const catalog = new client_1.Catalog({ system, credentials: this.credentials, odataVersion });
            this.connection = await catalog.getConnection();
            return catalog;
        }
    }
    async getUi5Repository(log = console) {
        const system = JSON.parse(JSON.stringify(this.config));
        if (this.connection) {
            return new client_1.Ui5AbapRepository({ system, connection: this.connection, log });
        }
        else {
            const repo = new client_1.Ui5AbapRepository({ system, credentials: this.credentials, log });
            this.connection = await repo.getConnection();
            return repo;
        }
    }
    setCredentials(credentials) {
        this.credentials = credentials;
    }
}
exports.SapSystem = SapSystem;
//# sourceMappingURL=sapSystem.js.map