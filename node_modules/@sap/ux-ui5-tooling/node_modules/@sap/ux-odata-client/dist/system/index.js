"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sapSystem_1 = require("./sapSystem");
exports.SapSystem = sapSystem_1.SapSystem;
const connection_1 = require("../connection");
const systemStore_1 = require("./systemStore");
/**
 * Returns a list of available SapSystems
 */
async function listSAPSystems() {
    if (connection_1.isAppStudio()) {
        const systems = {};
        const destinations = await connection_1.listDestinations();
        Object.values(destinations).forEach((destination) => {
            systems[destination.Name] = new sapSystem_1.SapSystem(destination.Name, {
                url: destination.Host,
                destination: destination.Name,
                scp: destination.WebIDEUsage && destination.WebIDEUsage.includes('abap_cloud')
            });
        });
        return systems;
    }
    else {
        const store = systemStore_1.getSystemStore();
        return store.getAll();
    }
}
exports.listSAPSystems = listSAPSystems;
function toSCPSystemName(systemName) {
    return `${systemName} (SCP)`;
}
/**
 * Check if the system name is already in use
 *
 * @param name
 * @param scp
 */
async function isSystemNameInUse({ name, scp = false }) {
    const systems = await systemStore_1.getSystemStore().getAll();
    const sys = name.trim();
    return !!systems[scp ? toSCPSystemName(sys) : sys];
}
exports.isSystemNameInUse = isSystemNameInUse;
/**
 * Returns the credentials for the given system. If there are no credentials, then undefined is returned.
 * @param url pointing to the root of an on-premise ABAP system
 * @param client (optional) SAP client
 */
async function getSapSystem(url, client) {
    if (connection_1.isAppStudio()) {
        throw Error('Not supported in AppStudio.');
    }
    else {
        const id = sapSystem_1.SapSystem.idFrom(url, client);
        return systemStore_1.getSystemStore().get(id);
    }
}
exports.getSapSystem = getSapSystem;
/**
 * Create an SapSystem instance
 * @param name unique name/id of the SapSystem
 * @param url pointing to the root of an on-premise ABAP system
 * @param client (optional) SAP client
 */
function createSapSystem(name, url, client) {
    return new sapSystem_1.SapSystem(name, { url, client });
}
exports.createSapSystem = createSapSystem;
/**
 * Create an SapSystem instance extract the path of the provided service url
 * @param urlString url pointing to any service with option sap-client parameter
 */
function createForServiceUrl(urlString) {
    const url = new URL(urlString);
    return {
        system: this.createForOnPremSystem('temp', url.hostname, url.searchParams['sap-client']),
        servicePath: url.pathname
    };
}
exports.createForServiceUrl = createForServiceUrl;
/**
 * Create an SapSystem instance pointing to a Steampunk service
 * @param name unique name/id of the SapSystem
 * @param serviceKey serviceKey as string or ServiceInfo object
 */
function createSapSystemForSteampunk(name, serviceKey) {
    // todo: if string load from filesystem or parse
    const service = typeof serviceKey === 'string' ? JSON.parse(serviceKey) : serviceKey;
    const config = {
        url: service.url,
        scp: true
    };
    return new sapSystem_1.SapSystem(toSCPSystemName(name), config, { serviceKeysContents: service });
}
exports.createSapSystemForSteampunk = createSapSystemForSteampunk;
/**
 * Save an SAP System to the local system store
 * @param system
 */
async function saveSapSystem(system) {
    const store = systemStore_1.getSystemStore();
    return store.save(system);
}
exports.saveSapSystem = saveSapSystem;
/**
 * Delete an SAP System to the local system store
 * @param system
 */
async function deleteSapSystem(system) {
    const store = systemStore_1.getSystemStore();
    return store.delete(system);
}
exports.deleteSapSystem = deleteSapSystem;
/**
 * Renames an SAP System. Takes into account if it's an SCP system or not (to account for naming rules)
 *
 * @param newName new name for the SAP System
 * @param isScp Boolean to indicate if system is an SCP system or not (default is false)
 * @returns SAP System passed in, with new name
 */
function renameSystem({ newName, isScp = false, system }) {
    system.name = isScp ? toSCPSystemName(newName) : newName;
    return system;
}
exports.renameSystem = renameSystem;
//# sourceMappingURL=index.js.map