import { SapSystem } from './sapSystem';
import { ServiceInfo } from '../config';
export interface SapSystems {
    [key: string]: SapSystem;
}
/**
 * Returns a list of available SapSystems
 */
export declare function listSAPSystems(): Promise<SapSystems>;
/**
 * Check if the system name is already in use
 *
 * @param name
 * @param scp
 */
export declare function isSystemNameInUse({ name, scp }: {
    name: string;
    scp?: boolean;
}): Promise<boolean>;
/**
 * Returns the credentials for the given system. If there are no credentials, then undefined is returned.
 * @param url pointing to the root of an on-premise ABAP system
 * @param client (optional) SAP client
 */
export declare function getSapSystem(url: string, client?: string): Promise<SapSystem | undefined>;
/**
 * Create an SapSystem instance
 * @param name unique name/id of the SapSystem
 * @param url pointing to the root of an on-premise ABAP system
 * @param client (optional) SAP client
 */
export declare function createSapSystem(name: string, url: string, client?: string): SapSystem;
/**
 * Create an SapSystem instance extract the path of the provided service url
 * @param urlString url pointing to any service with option sap-client parameter
 */
export declare function createForServiceUrl(urlString: string): {
    system: SapSystem;
    servicePath: string;
};
/**
 * Create an SapSystem instance pointing to a Steampunk service
 * @param name unique name/id of the SapSystem
 * @param serviceKey serviceKey as string or ServiceInfo object
 */
export declare function createSapSystemForSteampunk(name: string, serviceKey: string | ServiceInfo): SapSystem;
/**
 * Save an SAP System to the local system store
 * @param system
 */
export declare function saveSapSystem(system: SapSystem): Promise<boolean>;
/**
 * Delete an SAP System to the local system store
 * @param system
 */
export declare function deleteSapSystem(system: SapSystem): Promise<boolean>;
/**
 * Renames an SAP System. Takes into account if it's an SCP system or not (to account for naming rules)
 *
 * @param newName new name for the SAP System
 * @param isScp Boolean to indicate if system is an SCP system or not (default is false)
 * @returns SAP System passed in, with new name
 */
export declare function renameSystem({ newName, isScp, system }: {
    newName: string;
    isScp: boolean;
    system: SapSystem;
}): SapSystem;
export { SapSystem };
