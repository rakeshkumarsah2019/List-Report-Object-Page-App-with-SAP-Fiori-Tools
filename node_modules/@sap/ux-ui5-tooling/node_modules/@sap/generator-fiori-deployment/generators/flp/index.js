"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const yeoman_generator_1 = __importDefault(require("yeoman-generator"));
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const mta_lib_1 = require("mta-lib");
const utils_1 = require("../utils");
const ROUTER_MODULE_TYPE = 'approuter.nodejs';
module.exports = class extends yeoman_generator_1.default {
    constructor(opts, args) {
        super(opts, args);
        this.createFlpArtifacts = true;
        this.appPath = this.destinationRoot();
        // We're going to be working mostly on the parent directory
        this.destinationRoot(path.join(this.destinationRoot(), '..'));
        this.sourceRoot(path.join(__dirname, '..', '..', 'templates'));
        this.inboundName = args.inboundName;
    }
    initializing() {
        var _a, _b, _c;
        let manifest;
        try {
            manifest = this.fs.readJSON(path.join(this.appPath, 'webapp', 'manifest.json'));
        }
        catch (e) {
            this.log('Error: could not read webapp/manifest.json');
            process.exit(1);
        }
        if (!manifest) {
            this.log('Error: could not read webapp/manifest.json');
            process.exit(1);
        }
        const app = manifest['sap.app'];
        this.appName = (_a = app) === null || _a === void 0 ? void 0 : _a.id;
        if (!this.appName)
            throw new Error('Could not determine app name from manifest');
        this.prefix = this.appName.includes('.')
            ? this.appName.substring(0, this.appName.lastIndexOf('.')).replace(/\./g, '-')
            : 'test';
        this.appVersion = (_c = (_b = app) === null || _b === void 0 ? void 0 : _b.applicationVersion) === null || _c === void 0 ? void 0 : _c.version;
        if (!this.appVersion)
            throw new Error('Could not determine app ID from manifest');
        // Are we updating or creating mta.yaml & other artifacts?
        this.createFlpArtifacts = !fs.existsSync(this.destinationPath('flp'));
    }
    async prompting() {
        this.answers = await this.prompt([
            {
                type: 'confirm',
                name: 'confirmGeneration',
                message: `Generate FLP project in parent folder: ${this.destinationPath()}?`
            },
            {
                type: 'input',
                name: 'inboundName',
                when: !this.inboundName,
                message: 'Enter inbound name (look at key in crossNavigation.inbounds in manifest.json)'
            }
        ]);
    }
    async writing() {
        var _a, _b, _c;
        if (!this.answers.confirmGeneration)
            return;
        const inboundName = (_a = this.answers.inboundName, (_a !== null && _a !== void 0 ? _a : this.inboundName));
        this.log('Adding FLP artifacts');
        this.fs.copyTpl(this.templatePath('app-xs-app.json'), path.join(this.appPath, 'xs-app.json'), {});
        const mtaConfig = new mta_lib_1.Mta(this.destinationPath());
        if (this.createFlpArtifacts) {
            await this._initFlpProject(mtaConfig);
        }
        // Add project to FLP
        const flpAppId = `${utils_1.toMtaModuleName(this.appName)}-${this.appVersion}`;
        if (this.createFlpArtifacts) {
            this.fs.copyTpl(this.templatePath('flp/portal-site/CommonDataModel.json'), this.destinationPath('flp/portal-site/CommonDataModel.json'), { id: flpAppId, appId: this.appName, prefix: this.prefix, inboundName });
        }
        else {
            // @todo(ullas): is this the correct thing to do?
            const flpDataModel = this.fs.readJSON(this.destinationPath('flp/portal-site/CommonDataModel.json'));
            const catalogPayloadViz = (_b = flpDataModel.payload.catalogs[0].payload.viz, (_b !== null && _b !== void 0 ? _b : []));
            flpDataModel.payload.catalogs[0].payload.viz = [
                ...catalogPayloadViz.filter((i) => i.appId !== this.appName),
                { vizId: inboundName, appId: this.appName }
            ];
            const groupsPayloadViz = (_c = flpDataModel.payload.groups[0].payload.viz, (_c !== null && _c !== void 0 ? _c : []));
            flpDataModel.payload.groups[0].payload.viz = [
                ...groupsPayloadViz.filter((i) => i.appId !== this.appName),
                {
                    id: flpAppId,
                    appId: this.appName,
                    vizId: inboundName
                }
            ];
            fs.writeFileSync(this.destinationPath('flp/portal-site/CommonDataModel.json'), JSON.stringify(flpDataModel, null, 4));
        }
        // Add build step to copy application's xs-app.json to dist/
        const appModule = (await mtaConfig.getModules()).find((m) => m.name === utils_1.toMtaModuleName(this.appName));
        if (!appModule)
            throw new Error('Could not find the application module in mta.yaml');
        appModule['build-parameters'].commands.push('cp ./xs-app.json dist/xs-app.json');
        await mtaConfig.updateModule(appModule);
        await mtaConfig.save();
    }
    async _initFlpProject(mtaConfig) {
        this.fs.copyTpl(this.templatePath('flp/package.json'), this.destinationPath('flp/package.json'), {});
        // Update welcome file
        const routerXsAppConfig = this.fs.readJSON(this.destinationPath('router/xs-app.json'));
        routerXsAppConfig.welcomeFile = '/cp.portal';
        fs.writeFileSync(this.destinationPath('router/xs-app.json'), JSON.stringify(routerXsAppConfig, null, 4));
        // Add portal service to the MTA
        await mtaConfig.addResource({
            name: `${this.prefix}-portal`,
            type: 'org.cloudfoundry.managed-service',
            parameters: { 'service-plan': 'standard', service: 'portal' }
        });
        // Add portal service to the router
        const modules = await mtaConfig.getModules();
        const router = modules.find((m) => m.type === ROUTER_MODULE_TYPE);
        if (!router)
            throw new Error('Could not find the router module in mta.yaml');
        router.requires = [{ name: `${this.prefix}-portal` }, ...router.requires];
        await mtaConfig.updateModule(router);
        // Add FLP module
        await mtaConfig.addModule({
            name: `${this.prefix}-flp`,
            type: 'com.sap.portal.content',
            path: 'flp',
            'deployed-after': [`${this.prefix}-deployer`],
            parameters: { memory: '32M', 'disk-quota': '32M' },
            requires: [
                { name: `${this.prefix}-portal` },
                { name: `${this.prefix}-uaa` },
                { name: `${this.prefix}-html5-repo-host` }
            ]
        });
    }
};
//# sourceMappingURL=index.js.map