"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const yeoman_generator_1 = __importDefault(require("yeoman-generator"));
const path = __importStar(require("path"));
const js_yaml_1 = __importDefault(require("js-yaml"));
const mta_lib_1 = require("mta-lib");
const utils_1 = require("../utils");
const DEPLOYER_MODULE_TYPE = 'com.sap.html5.application-content';
const FIORI_TOOLS_PROXY = 'fiori-tools-proxy';
module.exports = class extends yeoman_generator_1.default {
    constructor(opts, args) {
        super(opts, args);
        this.createMta = true;
        this.appPath = this.destinationRoot();
        // We're going to be working mostly on the parent directory
        this.destinationRoot(path.join(this.destinationRoot(), '..'));
        this.sourceRoot(path.join(__dirname, '..', '..', 'templates'));
    }
    initializing() {
        var _a, _b, _c, _d, _e, _f, _g;
        let manifest;
        try {
            manifest = this.fs.readJSON(path.join(this.appPath, 'webapp', 'manifest.json'));
        }
        catch (e) {
            this.log('Error: could not read webapp/manifest.json');
            process.exit(1);
        }
        if (!manifest) {
            this.log('Error: could not read webapp/manifest.json');
            process.exit(1);
        }
        this.appName = (_a = manifest['sap.app']) === null || _a === void 0 ? void 0 : _a.id;
        this.prefix = this.appName.includes('.')
            ? this.appName.substring(0, this.appName.lastIndexOf('.')).replace(/\./g, '-')
            : 'test';
        if (!this.appName)
            throw new Error('Could not determine app name from manifest');
        // Are we updating or creating mta.yaml & other artifacts?
        this.createMta = !this.fs.exists(this.destinationPath('mta.yaml'));
        if (this.createMta) {
            // Try and read the destination from ui5.yaml if there's _one_ backend configured with
            // a destination
            const ui5Config = js_yaml_1.default.safeLoad(this.fs.read(path.join(this.appPath, 'ui5.yaml')));
            const backends = (_f = (_e = (_d = (_c = (_b = ui5Config) === null || _b === void 0 ? void 0 : _b.server) === null || _c === void 0 ? void 0 : _c.customMiddleware) === null || _d === void 0 ? void 0 : _d.find((m) => m.name === FIORI_TOOLS_PROXY)) === null || _e === void 0 ? void 0 : _e.configuration) === null || _f === void 0 ? void 0 : _f.backend;
            this.destination = ((_g = backends) === null || _g === void 0 ? void 0 : _g.length) === 1 && backends[0].destination;
        }
    }
    async prompting() {
        this.answers = await this.prompt([
            {
                type: 'confirm',
                name: 'confirmGeneration',
                message: `Generate project artifacts in parent folder: ${this.destinationPath()}?`
            },
            {
                type: 'input',
                when: (previousAnswers) => previousAnswers.confirmGeneration && this.createMta,
                default: this.destination,
                name: 'destination',
                message: 'Destination name'
            }
        ]);
    }
    async writing() {
        if (!this.answers.confirmGeneration)
            return;
        if (this.createMta) {
            this._initMtaProject();
        }
        else {
            await this._updateMtaProject();
        }
    }
    _initMtaProject() {
        // Root Project
        this.fs.copyTpl(this.templatePath('package.json'), this.destinationPath('package.json'), {});
        this.fs.copyTpl(this.templatePath('gitignore'), this.destinationPath('.gitignore'), {});
        this.fs.copyTpl(this.templatePath('mta.yaml'), this.destinationPath('mta.yaml'), {
            namespacedAppName: utils_1.toMtaModuleName(this.appName),
            relativePath: path.basename(this.appPath),
            mtaPrefix: this.prefix
        });
        // Router
        this.fs.copyTpl(this.templatePath('router/package.json'), this.destinationPath('router/package.json'), {});
        this.fs.copyTpl(this.templatePath('router/xs-app.json'), this.destinationPath('router/xs-app.json'), {
            appName: this.appName.replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>]/gi, ''),
            destination: this.answers.destination
        });
        // Deployer
        this.fs.copyTpl(this.templatePath('deployer/package.json'), this.destinationPath('deployer/package.json'), {});
    }
    async _updateMtaProject() {
        var _a;
        let needsUpdate = false;
        const mtaConfig = new mta_lib_1.Mta(this.destinationPath());
        const moduleName = utils_1.toMtaModuleName(this.appName);
        const modulePath = path.basename(this.appPath);
        const existingModules = await mtaConfig.getModules();
        if (!existingModules.find((m) => m.name === moduleName)) {
            // Add new module
            const htmlModule = {
                name: moduleName,
                type: 'html5',
                path: modulePath,
                'build-parameters': {
                    builder: 'custom',
                    commands: ['npm run deploy'],
                    'supported-platforms': [],
                    'build-result': 'dist'
                }
            };
            await mtaConfig.addModule(htmlModule);
            needsUpdate = true;
        }
        // Add ref to module in deployer
        const deployerModule = existingModules.find((m) => m.type === DEPLOYER_MODULE_TYPE);
        if (!deployerModule)
            throw new Error('Module to deploy HTML5 application content not found in mta.yaml');
        if (!((_a = deployerModule['build-parameters'].requires) === null || _a === void 0 ? void 0 : _a.find((r) => r.name === moduleName))) {
            deployerModule['build-parameters'].requires = [
                {
                    name: moduleName,
                    artifacts: ['./*'],
                    'target-path': `resources/${modulePath}`
                },
                ...deployerModule['build-parameters'].requires
            ];
            await mtaConfig.updateModule(deployerModule);
            needsUpdate = true;
        }
        if (needsUpdate) {
            this.log('Updating mta.yaml with module information');
            await mtaConfig.save();
        }
    }
    install() {
        if (this.answers.confirmGeneration)
            this.npmInstall();
    }
};
//# sourceMappingURL=index.js.map