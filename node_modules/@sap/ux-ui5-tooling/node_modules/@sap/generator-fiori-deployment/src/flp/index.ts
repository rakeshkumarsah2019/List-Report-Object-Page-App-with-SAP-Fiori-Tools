import Generator from 'yeoman-generator';
import * as path from 'path';
import * as fs from 'fs';
import { Mta } from 'mta-lib';
import { toMtaModuleName } from '../utils';

interface Answers {
    confirmGeneration: boolean;
    inboundName?: string;
}

const ROUTER_MODULE_TYPE = 'approuter.nodejs';

module.exports = class extends Generator {
    private readonly appPath: string;
    private prefix: string;
    private appName: string;
    private appVersion: string;
    private answers: Answers;
    private createFlpArtifacts = true;
    private inboundName: string;

    constructor(opts: string | string[], args: { inboundName?: string }) {
        super(opts, args);
        this.appPath = this.destinationRoot();

        // We're going to be working mostly on the parent directory
        this.destinationRoot(path.join(this.destinationRoot(), '..'));
        this.sourceRoot(path.join(__dirname, '..', '..', 'templates'));
        this.inboundName = args.inboundName;
    }

    public initializing(): void {
        type manifestType = {
            'sap.app'?: { id: string; title: string; applicationVersion: { version: string }; i18n: string };
        };
        let manifest: manifestType;
        try {
            manifest = this.fs.readJSON(path.join(this.appPath, 'webapp', 'manifest.json')) as manifestType;
        } catch (e) {
            this.log('Error: could not read webapp/manifest.json');
            process.exit(1);
        }
        if (!manifest) {
            this.log('Error: could not read webapp/manifest.json');
            process.exit(1);
        }
        const app = manifest['sap.app'];

        this.appName = app?.id;
        if (!this.appName) throw new Error('Could not determine app name from manifest');

        this.prefix = this.appName.includes('.')
            ? this.appName.substring(0, this.appName.lastIndexOf('.')).replace(/\./g, '-')
            : 'test';

        this.appVersion = app?.applicationVersion?.version;
        if (!this.appVersion) throw new Error('Could not determine app ID from manifest');

        // Are we updating or creating mta.yaml & other artifacts?
        this.createFlpArtifacts = !fs.existsSync(this.destinationPath('flp'));
    }

    public async prompting(): Promise<void> {
        this.answers = await this.prompt([
            {
                type: 'confirm',
                name: 'confirmGeneration',
                message: `Generate FLP project in parent folder: ${this.destinationPath()}?`
            },
            {
                type: 'input',
                name: 'inboundName',
                when: !this.inboundName,
                message: 'Enter inbound name (look at key in crossNavigation.inbounds in manifest.json)'
            }
        ]);
    }

    public async writing(): Promise<void> {
        if (!this.answers.confirmGeneration) return;

        const inboundName = this.answers.inboundName ?? this.inboundName;

        this.log('Adding FLP artifacts');
        this.fs.copyTpl(this.templatePath('app-xs-app.json'), path.join(this.appPath, 'xs-app.json'), {});

        const mtaConfig = new Mta(this.destinationPath());
        if (this.createFlpArtifacts) {
            await this._initFlpProject(mtaConfig);
        }

        // Add project to FLP
        const flpAppId = `${toMtaModuleName(this.appName)}-${this.appVersion}`;
        if (this.createFlpArtifacts) {
            this.fs.copyTpl(
                this.templatePath('flp/portal-site/CommonDataModel.json'),
                this.destinationPath('flp/portal-site/CommonDataModel.json'),
                { id: flpAppId, appId: this.appName, prefix: this.prefix, inboundName }
            );
        } else {
            // @todo(ullas): is this the correct thing to do?
            const flpDataModel = this.fs.readJSON(this.destinationPath('flp/portal-site/CommonDataModel.json'));
            const catalogPayloadViz = flpDataModel.payload.catalogs[0].payload.viz ?? [];
            flpDataModel.payload.catalogs[0].payload.viz = [
                ...catalogPayloadViz.filter((i) => i.appId !== this.appName),
                { vizId: inboundName, appId: this.appName }
            ];

            const groupsPayloadViz = flpDataModel.payload.groups[0].payload.viz ?? [];
            flpDataModel.payload.groups[0].payload.viz = [
                ...groupsPayloadViz.filter((i) => i.appId !== this.appName),
                {
                    id: flpAppId,
                    appId: this.appName,
                    vizId: inboundName
                }
            ];
            fs.writeFileSync(
                this.destinationPath('flp/portal-site/CommonDataModel.json'),
                JSON.stringify(flpDataModel, null, 4)
            );
        }
        // Add build step to copy application's xs-app.json to dist/
        const appModule = (await mtaConfig.getModules()).find((m) => m.name === toMtaModuleName(this.appName));
        if (!appModule) throw new Error('Could not find the application module in mta.yaml');
        appModule['build-parameters'].commands.push('cp ./xs-app.json dist/xs-app.json');
        await mtaConfig.updateModule(appModule);

        await mtaConfig.save();
    }

    private async _initFlpProject(mtaConfig: Mta): Promise<void> {
        this.fs.copyTpl(this.templatePath('flp/package.json'), this.destinationPath('flp/package.json'), {});

        // Update welcome file
        const routerXsAppConfig = this.fs.readJSON(this.destinationPath('router/xs-app.json'));
        routerXsAppConfig.welcomeFile = '/cp.portal';
        fs.writeFileSync(this.destinationPath('router/xs-app.json'), JSON.stringify(routerXsAppConfig, null, 4));

        // Add portal service to the MTA
        await mtaConfig.addResource({
            name: `${this.prefix}-portal`,
            type: 'org.cloudfoundry.managed-service',
            parameters: { 'service-plan': 'standard', service: 'portal' }
        });
        // Add portal service to the router
        const modules = await mtaConfig.getModules();
        const router = modules.find((m) => m.type === ROUTER_MODULE_TYPE);
        if (!router) throw new Error('Could not find the router module in mta.yaml');
        router.requires = [{ name: `${this.prefix}-portal` }, ...router.requires];
        await mtaConfig.updateModule(router);
        // Add FLP module
        await mtaConfig.addModule({
            name: `${this.prefix}-flp`,
            type: 'com.sap.portal.content',
            path: 'flp',
            'deployed-after': [`${this.prefix}-deployer`],
            parameters: { memory: '32M', 'disk-quota': '32M' },
            requires: [
                { name: `${this.prefix}-portal` },
                { name: `${this.prefix}-uaa` },
                { name: `${this.prefix}-html5-repo-host` }
            ]
        });
    }
};
