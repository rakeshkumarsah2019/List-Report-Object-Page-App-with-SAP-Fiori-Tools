import Generator from 'yeoman-generator';
import * as path from 'path';
import yaml from 'js-yaml';
import { mta, Mta } from 'mta-lib';
import { toMtaModuleName } from '../utils';

const DEPLOYER_MODULE_TYPE = 'com.sap.html5.application-content';
const FIORI_TOOLS_PROXY = 'fiori-tools-proxy';

interface Answers {
    confirmGeneration: boolean;
    destination: string;
}
module.exports = class extends Generator {
    private readonly appPath: string;
    private appName: string;
    private prefix: string;
    private answers: Answers;
    private createMta = true;
    private destination: string;

    constructor(opts: string | string[], args: {}) {
        super(opts, args);
        this.appPath = this.destinationRoot();

        // We're going to be working mostly on the parent directory
        this.destinationRoot(path.join(this.destinationRoot(), '..'));
        this.sourceRoot(path.join(__dirname, '..', '..', 'templates'));
    }

    public initializing(): void {
        type manifestType = { 'sap.app'?: { id: string } };
        let manifest: manifestType;
        try {
            manifest = this.fs.readJSON(path.join(this.appPath, 'webapp', 'manifest.json')) as manifestType;
        } catch (e) {
            this.log('Error: could not read webapp/manifest.json');
            process.exit(1);
        }
        if (!manifest) {
            this.log('Error: could not read webapp/manifest.json');
            process.exit(1);
        }
        this.appName = manifest['sap.app']?.id;
        this.prefix = this.appName.includes('.')
            ? this.appName.substring(0, this.appName.lastIndexOf('.')).replace(/\./g, '-')
            : 'test';
        if (!this.appName) throw new Error('Could not determine app name from manifest');

        // Are we updating or creating mta.yaml & other artifacts?
        this.createMta = !this.fs.exists(this.destinationPath('mta.yaml'));

        if (this.createMta) {
            // Try and read the destination from ui5.yaml if there's _one_ backend configured with
            // a destination
            const ui5Config = yaml.safeLoad(this.fs.read(path.join(this.appPath, 'ui5.yaml')));
            const backends = ui5Config?.server?.customMiddleware?.find((m) => m.name === FIORI_TOOLS_PROXY)
                ?.configuration?.backend;
            this.destination = backends?.length === 1 && backends[0].destination;
        }
    }

    public async prompting(): Promise<void> {
        this.answers = await this.prompt([
            {
                type: 'confirm',
                name: 'confirmGeneration',
                message: `Generate project artifacts in parent folder: ${this.destinationPath()}?`
            },
            {
                type: 'input',
                when: (previousAnswers: Answers): boolean => previousAnswers.confirmGeneration && this.createMta,
                default: this.destination,
                name: 'destination',
                message: 'Destination name'
            }
        ]);
    }

    public async writing(): Promise<void> {
        if (!this.answers.confirmGeneration) return;

        if (this.createMta) {
            this._initMtaProject();
        } else {
            await this._updateMtaProject();
        }
    }

    private _initMtaProject(): void {
        // Root Project
        this.fs.copyTpl(this.templatePath('package.json'), this.destinationPath('package.json'), {});
        this.fs.copyTpl(this.templatePath('gitignore'), this.destinationPath('.gitignore'), {});
        this.fs.copyTpl(this.templatePath('mta.yaml'), this.destinationPath('mta.yaml'), {
            namespacedAppName: toMtaModuleName(this.appName),
            relativePath: path.basename(this.appPath),
            mtaPrefix: this.prefix
        });

        // Router
        this.fs.copyTpl(this.templatePath('router/package.json'), this.destinationPath('router/package.json'), {});
        this.fs.copyTpl(this.templatePath('router/xs-app.json'), this.destinationPath('router/xs-app.json'), {
            appName: this.appName.replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>]/gi, ''),
            destination: this.answers.destination
        });

        // Deployer
        this.fs.copyTpl(this.templatePath('deployer/package.json'), this.destinationPath('deployer/package.json'), {});
    }

    private async _updateMtaProject(): Promise<void> {
        let needsUpdate = false;

        const mtaConfig = new Mta(this.destinationPath());

        const moduleName = toMtaModuleName(this.appName);
        const modulePath = path.basename(this.appPath);
        const existingModules = await mtaConfig.getModules();

        if (!existingModules.find((m) => m.name === moduleName)) {
            // Add new module
            const htmlModule: mta.Module = {
                name: moduleName,
                type: 'html5',
                path: modulePath,
                'build-parameters': {
                    builder: 'custom',
                    commands: ['npm run deploy'],
                    'supported-platforms': [],
                    'build-result': 'dist'
                }
            };
            await mtaConfig.addModule(htmlModule);
            needsUpdate = true;
        }

        // Add ref to module in deployer
        const deployerModule = existingModules.find((m) => m.type === DEPLOYER_MODULE_TYPE);
        if (!deployerModule) throw new Error('Module to deploy HTML5 application content not found in mta.yaml');
        if (!deployerModule['build-parameters'].requires?.find((r) => r.name === moduleName)) {
            deployerModule['build-parameters'].requires = [
                {
                    name: moduleName,
                    artifacts: ['./*'],
                    'target-path': `resources/${modulePath}`
                },
                ...deployerModule['build-parameters'].requires
            ];
            await mtaConfig.updateModule(deployerModule);
            needsUpdate = true;
        }

        if (needsUpdate) {
            this.log('Updating mta.yaml with module information');
            await mtaConfig.save();
        }
    }

    public install(): void {
        if (this.answers.confirmGeneration) this.npmInstall();
    }
};
