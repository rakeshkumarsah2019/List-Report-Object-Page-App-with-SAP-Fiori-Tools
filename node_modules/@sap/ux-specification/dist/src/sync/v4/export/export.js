"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pages_1 = require("./pages");
const controls_1 = require("./controls");
const common_1 = require("../../common");
const v4_1 = require("../../../v4");
const application_1 = require("../application");
const manifest_1 = require("./manifest");
const flexibleColumnLayout_1 = require("./flexibleColumnLayout");
const utils_1 = require("../../common/utils");
/**
 * Return the skeleton of a exportResultManifest's "sap.ui.generic.app" entry, prefilled with some values
 * @param name - name of the template, e.g. "sap.suite.ui.generic.template.ObjectPage"
 * @param entitySet - the main entity set
 * @param navigationProperty - navigation property
 */
const getV4ManifestPageTemplate = (name, entitySet) => {
    const V4Page = {
        type: 'Component',
        id: '',
        name: name,
        options: {
            settings: {
                entitySet: entitySet,
                navigation: {},
                controlConfiguration: {}
            }
        }
    };
    return V4Page;
};
const defaultExportResult = {
    flexChanges: [],
    manifest: {
        'sap.ui5': {
            flexEnabled: true,
            routing: {
                targets: {}
            }
        },
        'sap.app': {}
    }
};
/**
 * Evaluates an export rule for a property or object, transfers to flex change or manifest setting
 * @param exportPropertyRule - export rule from the object classes decorator
 * @param baseId - selector id of the current page
 * @param breadcrumbs - list of breadcrumbs, i.e. ID parts for building the stable ID
 * @param localIdParts - list of parent and child ID's
 * @param key - key of the given property
 * @param configObject - current (sub)object of the configuration file
 * @param exportResults - object with all collected manifest entries and flex changes
 * @param fullManifest - old or existing manifest
 * @param ids - list of parent & child ids
 * @param pageName - array comprising the page name
 */
function evaluateExportRule(exportPropertyRule, baseId, localIdParts, breadcrumbs, key, configObject, exportResults, fullManifest, ids, pageName) {
    // handle flex change
    if (exportPropertyRule.flex) {
        //eliminate subsections' hierarchy
        let index = breadcrumbs.indexOf('subsections');
        while (index > -1) {
            breadcrumbs.splice(index - 1, 2);
            index = breadcrumbs.indexOf('subsections');
        }
        const flexChange = {
            controlId: exportPropertyRule.flex.controlId(baseId, localIdParts, breadcrumbs),
            controlType: exportPropertyRule.flex.controlType(),
            content: {
                property: key,
                newValue: configObject[key]
            }
        };
        exportResults.flexChanges.push(exportPropertyRule.flex.exportFunction(flexChange, fullManifest));
    }
    else if (exportPropertyRule.manifest) {
        // handle manifest change
        //eliminate subsections' hierarchy
        let index = ids.indexOf('subsections');
        while (index > -1) {
            ids.splice(index - 1, 2);
            index = ids.indexOf('subsections');
        }
        let targetAnnotation = '', targetAnnotationEncoded = '', custom = false;
        if (ids[0] === 'sections') {
            if (ids[1] === 'custom' && ids[2] !== ids[ids.length - 1]) {
                custom = true;
                targetAnnotationEncoded = ids[2];
            }
            else {
                targetAnnotation = ids[1];
                targetAnnotationEncoded = targetAnnotation && targetAnnotation.replace('/', '::');
            }
        }
        const path = exportPropertyRule.manifest.path(pageName, targetAnnotationEncoded);
        const manifestSection = common_1.getManifestSectionByPathV4(exportResults.manifest, path, targetAnnotation, custom ? undefined : targetAnnotationEncoded);
        const manifestKey = exportPropertyRule.manifest.key || key;
        if (configObject[key] !== undefined) {
            const exportHandler = exportPropertyRule.manifest.export;
            if (exportHandler !== false) {
                if (exportHandler && typeof exportHandler === 'function') {
                    exportHandler(manifestSection, configObject);
                }
                else {
                    manifestSection[manifestKey] = configObject[key];
                }
            }
        }
        else if (manifestSection[manifestKey]) {
            delete manifestSection[manifestKey];
        }
        utils_1.deleteEmptyStructure(exportResults.manifest, path, targetAnnotation, targetAnnotationEncoded);
    }
}
/**
 * Recursive function that traverses the content of the current object. It reads decorators and fills exportResultManifest entries and flex changes
 * @param configObject - current object to traverse
 * @param parentIds - array of collected parent ids
 * @param stableIdParts - list of parts of the stable ID for flex changes
 * @param breadcrumbs - array of sequence of properties that we are currently processing. Required for instance for table column name
 * @param exportResults - result object with all collected exportResultManifest entries and flex changes
 * @param appId - id of the Fiori elements app, which is usually namespace.appid
 * @param baseId - selector id of the current page
 * @param pageName - array comprising the page name
 * @param jsonSchema - application specific schema
 * @param targetDefinition - the current entry point or definition in the app schema
 */
function transferManifestEntriesAndFlexChange(fullManifest, configObject, parentIds, stableIdParts, breadcrumbs, exportResults, appId, baseId, pageName, jsonSchema, targetDefinition) {
    let currentConfigObject;
    if (targetDefinition && targetDefinition['properties']) {
        for (const key in targetDefinition['properties']) {
            currentConfigObject = configObject[key];
            const childId = common_1.getChildId(configObject, key);
            const ids = childId ? [...parentIds, childId] : [...parentIds, key];
            const localIdParts = childId ? [...stableIdParts, childId] : stableIdParts;
            const exportPropertyRule = common_1.getExportRuleMetadata(configObject, key);
            if (exportPropertyRule) {
                evaluateExportRule(exportPropertyRule, baseId, localIdParts, breadcrumbs, key, configObject, exportResults, fullManifest, ids, pageName);
                continue;
            }
            const propertyDefinition = targetDefinition['properties'][key];
            if (currentConfigObject && typeof currentConfigObject === 'object' && propertyDefinition) {
                let objects = [];
                let isArray = false, nextTargetDefinition, definitionArray;
                if (propertyDefinition.$ref) {
                    objects.push(currentConfigObject);
                    definitionArray = propertyDefinition.$ref.split('#/definitions/');
                    nextTargetDefinition = jsonSchema['definitions'][definitionArray[definitionArray.length - 1]];
                }
                else if (propertyDefinition.type === 'array') {
                    const itemsRef = propertyDefinition.items && propertyDefinition.items.$ref;
                    if (itemsRef) {
                        objects = currentConfigObject;
                        isArray = true;
                        definitionArray = itemsRef.split('#/definitions/');
                        nextTargetDefinition = jsonSchema['definitions'][definitionArray[definitionArray.length - 1]];
                    }
                }
                else if (propertyDefinition.anyOf) {
                    propertyDefinition.anyOf.forEach((element) => {
                        const additionalIds = [];
                        definitionArray = element.$ref.split('#/definitions/');
                        nextTargetDefinition = jsonSchema['definitions'][definitionArray[definitionArray.length - 1]];
                        transferManifestEntriesAndFlexChange(fullManifest, currentConfigObject, [...ids, ...additionalIds], localIdParts, [...breadcrumbs, key], exportResults, appId, baseId, pageName, jsonSchema, nextTargetDefinition);
                    });
                    continue;
                }
                else {
                    //e.g. sections ==> loop over all properties = subsections or other
                    nextTargetDefinition = propertyDefinition;
                    objects.push(currentConfigObject);
                }
                for (const innerObject of objects) {
                    const additionalIds = [];
                    if (breadcrumbs[0] === 'sections' && key === 'custom' && isArray) {
                        // We need add custom section 'id' into breadcrumbs to retrieve correct path to manifest
                        additionalIds.push(innerObject['id']);
                    }
                    transferManifestEntriesAndFlexChange(fullManifest, innerObject, [...ids, ...additionalIds], localIdParts, [...breadcrumbs, key], exportResults, appId, baseId, pageName, jsonSchema, nextTargetDefinition);
                }
            }
        }
    }
}
/**
 * Instantiates the export classes for the object page section
 * @param objectPageConfig - the given object page configuration
 * @param objectPage - the overall object page export class where the sections shall be included
 */
function getExportClassesForSections(objectPageConfig, objectPage) {
    /**
     * Instantiates the export classes for a single object page section
     * @param section - Export class as an object, to be updated
     * @param sectionId - Current section ID
     */
    function getClassesForSingleSection(section, sectionId) {
        if (section && section['table']) {
            section['table'] = Object.assign(new controls_1.ObjectPageTable(), section['table']);
        }
        else if (sectionId === 'custom' && Array.isArray(objectPageConfig.sections[sectionId])) {
            const customSections = objectPageConfig.sections.custom;
            for (const index in customSections) {
                customSections[index] = Object.assign(new controls_1.ObjectPageCustomSectionFragment(), customSections[index]);
            }
        }
    }
    /**
     * Recursive sub-function for handling subsections
     * @param section - Object page section in config
     */
    function getSubsectionClasses(section) {
        if (section['subsections']) {
            let subSection;
            for (const subSectionId in section['subsections']) {
                subSection = section['subsections'][subSectionId];
                getClassesForSingleSection(subSection, subSectionId);
                getSubsectionClasses(subSection);
            }
        }
    }
    // Main
    let section;
    for (const sectionId in objectPageConfig.sections) {
        section = objectPage.sections[sectionId];
        getClassesForSingleSection(section, sectionId);
        getSubsectionClasses(section);
    }
}
/**
 * Run through the given ObjectPage config and return respective exportResultManifest entry and flex changes
 * @param appId - id of the Fiori elements app, which is usually namespace.appid
 * @param objectPageConfig - content of the src/ObjectPage_<entity_set>.json file
 * @param manifest - manifest of the application
 * @param pageName - routing target defined in manfiest
 */
exports.exportObjectPage = (appId, objectPageConfig, manifest, pageName, jsonSchema) => {
    const exportResults = defaultExportResult;
    exportResults.manifest = manifest;
    const objectPage = Object.assign(new pages_1.ObjectPage(), objectPageConfig);
    objectPage.header = Object.assign(new controls_1.ObjectPageHeader(), objectPage.header);
    objectPage.layout = Object.assign(new controls_1.ObjectPageLayout(), objectPage.layout);
    const pageLayoutInformation = common_1.getPageLayoutInformation(objectPage);
    const baseId = `${appId}::${pageLayoutInformation.id}::${pageName[0]}--`;
    if (objectPageConfig && objectPageConfig.sections) {
        getExportClassesForSections(objectPageConfig, objectPage);
    }
    transferManifestEntriesAndFlexChange(JSON.parse(JSON.stringify(manifest)), objectPage, [], //no parentIds
    [], // no stableIds
    [], // no breadcrumbs
    exportResults, appId, baseId, pageName, jsonSchema, jsonSchema //starting point for target definition
    );
    return exportResults;
};
/**
 * Run through the given ListReport config and return respective exportResultManifest entry and flex changes
 * @param appId - id of the Fiori elements app, which is usually namespace.appid
 * @param listReportConfig - content of the src/ListReport_<entity_set>.json file
 * @param pageName - routing target defined in manifest
 */
exports.exportListReportPage = (appId, listReportConfig, manifest, pageName, jsonSchema) => {
    const exportResults = defaultExportResult;
    exportResults.manifest = manifest;
    const listReport = Object.assign(new pages_1.ListReport(), listReportConfig);
    // when assigning a JSON structure to an object structure we need to assign all children, otherwise decorators will not exist
    // find a better way to do this generically, perhaps using the schema?
    listReport.table = Object.assign(new controls_1.Table(), listReport.table);
    const pageLayoutInformation = common_1.getPageLayoutInformation(listReport);
    const baseId = `${appId}::${pageLayoutInformation.id}::${pageName[0]}--`;
    if (!exportResults.manifest['sap.ui5']['routing']['targets'][pageName[0]]) {
        const newV4Page = getV4ManifestPageTemplate(pageLayoutInformation.pageId, pageName[0]);
        exportResults.manifest['sap.ui5']['routing']['targets'][pageName[0]] = newV4Page;
    }
    transferManifestEntriesAndFlexChange(JSON.parse(JSON.stringify(manifest)), listReport, [], //no parentIds
    [], // no stableIds
    [], // no breadcrumbs
    exportResults, appId, baseId, pageName, jsonSchema, jsonSchema //starting point for target definition
    );
    return exportResults;
};
/**
 * General API for the export of a V4 config page
 * Export means the transfer of the properties and values of the given config to manifest entries or flex changes
 * @param appId - Application ID
 * @param page - Current page (config)
 * @param manifest - Manifest of the given app
 * @param jsonSchema - App schema
 *
 * @returns ExportResults = object comprising the updated manifest and a list of flex changes
 */
exports.exportPageV4 = (appId, page, manifest, jsonSchema) => {
    switch (page.pageType) {
        case v4_1.PageType.ObjectPage: {
            return exports.exportObjectPage(appId, page.config, manifest, [page.name], jsonSchema);
        }
        case v4_1.PageType.ListReport: {
            return exports.exportListReportPage(appId, page.config, manifest, [page.name], jsonSchema);
        }
    }
};
/**
 * API for the export of a V4 app configuration
 * Export means the transfer of the properties and values of the given config to manifest entries or flex changes
 * @param application - V4 application (app.json config file)
 * @param manifest - Manifest of the given app
 * @param jsonSchema - App schema
 *
 * @returns ExportResults = object comprising the updated manifest and a list of flex changes
 */
exports.exportApplicationV4 = (application, manifest, jsonSchema) => {
    const exportResults = defaultExportResult;
    exportResults.manifest = manifest;
    const applicationV4 = Object.assign(new application_1.ApplicationV4(), application);
    //transform application settings
    applicationV4.settings = Object.assign(new application_1.AppSettings(), applicationV4.settings);
    for (const key in jsonSchema['definitions']['AppSettings']['properties']) {
        const exportPropertyRule = common_1.getExportRuleMetadata(applicationV4.settings, key);
        if (exportPropertyRule && exportPropertyRule.manifest) {
            const path = exportPropertyRule.manifest.path();
            const manifestSection = common_1.getManifestSectionByPathV4(exportResults.manifest, path);
            if (application['settings'] && application['settings'][key]) {
                manifestSection[key] = application['settings'][key];
            }
            else {
                delete manifestSection[key];
            }
            utils_1.deleteEmptyStructure(exportResults.manifest, path);
        }
    }
    //transform routing
    exportResults.manifest['sap.ui5'].routing = manifest_1.transformRoutingV4(application['home'], application['pages'], manifest);
    // Update FCL data
    flexibleColumnLayout_1.updateFcl(manifest['sap.ui5'], application);
    return exportResults;
};
//# sourceMappingURL=export.js.map