"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../../common/utils");
const objectPage_1 = require("./objectPage");
const listReportObjectPage_1 = require("./listReportObjectPage");
const common_1 = require("../../common");
const utils_2 = require("./utils");
/**
 * Generates an app specific schema out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 *
 * @param genericSchema - generic JSON schema of an object page
 * @param entitySet - the base entity type of the given page
 * @param annotations - list of all annotation files (file content plus URI as identifier)
 * @param manifest - manifest.json of the app
 * @param service - service metadata of the app
 *
 * @returns the app specific JSON schema
 */
function generateObjectPageInterfaceV2(genericSchema, entitySet, annotations, manifest) {
    const service = utils_1.parseAndMergeAndConvert(annotations);
    return objectPage_1.generateObjectPageSchemaV2(genericSchema, entitySet, service.entityTypes, manifest);
}
exports.generateObjectPageInterfaceV2 = generateObjectPageInterfaceV2;
/**
 * Generates an app specific schema out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 *
 * @param genericSchema - generic JSON schema of a list report
 * @param entitySet - the base entity type of the given page
 * @param annotations - list of all annotation files (file content plus URI as identifier)
 *
 * @returns the app specific JSON schema
 */
function generateListReportInterfaceV2(genericSchema, entitySet, annotations) {
    const service = utils_1.parseAndMergeAndConvert(annotations);
    return listReportObjectPage_1.generateListReportSchemaV2(genericSchema, entitySet, service.entityTypes);
}
exports.generateListReportInterfaceV2 = generateListReportInterfaceV2;
function generateOVPInterfaceV2(fileContent) {
    return fileContent;
}
exports.generateOVPInterfaceV2 = generateOVPInterfaceV2;
function generateAnalyticalListPageInterfaceV2(genericSchema, entitySet, annotations) {
    const service = utils_1.parseAndMergeAndConvert(annotations);
    const lineItemAnnotation = service.entityTypes.find((et) => et.name === entitySet).annotations.UI.LineItem;
    const lineItemIDs = common_1.getLineItemsTyped(lineItemAnnotation);
    const appSchema = JSON.parse(JSON.stringify(genericSchema));
    appSchema['properties']['table']['$ref'] = '#/definitions/AnalyticalTableALP<LineItems>';
    const analyticalTableDefinition = JSON.parse(JSON.stringify(appSchema['definitions']['AnalyticalTableALP<GenericColumns>']));
    appSchema['definitions']['AnalyticalTableALP<LineItems>'] = analyticalTableDefinition;
    delete appSchema['definitions']['AnalyticalTableALP<GenericColumns>'];
    delete appSchema['definitions']['GenericColumns'];
    utils_2.addLineItemsType(appSchema, lineItemIDs);
    return appSchema;
}
exports.generateAnalyticalListPageInterfaceV2 = generateAnalyticalListPageInterfaceV2;
//# sourceMappingURL=generate.js.map