"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../../../../specification/common");
const appProvider_1 = require("../../../common/appProvider");
const utils_1 = require("../utils");
const listReport_1 = require("../pages/listReport");
const analyticalListPage_1 = require("../pages/analyticalListPage");
const objectPage_1 = require("../pages/objectPage");
const application_1 = require("../../application");
const common_2 = require("../../../common");
const schemaAccess_1 = require("../../../../specification/schemaAccess");
/**
 * Return the page type for a given page in manifest
 * @param name - page component name
 */
function getPageType(name) {
    return name.split('sap.suite.ui.generic.template.')[1];
}
exports.getPageType = getPageType;
/**
 * Method which generates id for passed page
 * @param page - Generic Page object.
 * @returns {string} Generated page id
 */
function generateId(page) {
    return utils_1.generatePageId(common_1.FioriElementsVersion.v2, getPageType(page.component.name), page.entitySet, page.navigationProperty);
}
function convertPages(v2Pages, flex, manifest, schemas) {
    const pages = {};
    for (const v2PageName in v2Pages) {
        const v2Page = v2Pages[v2PageName];
        const id = generateId(v2Page);
        const page = {
            pageType: getPageType(v2Page.component.name),
            entitySet: v2Page.entitySet,
            ...(v2Page.navigationProperty && { navigationProperty: v2Page.navigationProperty }),
            ...(v2Page.defaultLayoutType && { defaultLayoutType: v2Page.defaultLayoutType })
        };
        pages[id] = page;
        // Get the JSON schema for the page. If no page specific schema exists, fall back top the generic schema for the page type
        const jsonSchema = Object.keys(schemas).find((element) => element.includes(id)) ||
            Object.keys(schemas).find((element) => element.includes(page.pageType));
        // convert settings to config
        if (jsonSchema) {
            if (page.pageType === common_1.PageType.ListReport) {
                page.config = listReport_1.createListReportConfig(manifest, flex, schemas[jsonSchema]);
            }
            else if (page.pageType === common_1.PageType.AnalyticalListPage) {
                page.config = analyticalListPage_1.createAnalyticalListPageConfig(manifest, flex, schemas[jsonSchema]);
            }
            else {
                page.config = objectPage_1.createObjectPageConfig(manifest, flex, schemas[jsonSchema], page.entitySet);
            }
        }
        if (v2Page.pages) {
            page.navigation = {};
            const targets = convertPages(v2Page.pages, flex, manifest, schemas);
            for (const pageId in targets) {
                const target = targets[pageId];
                pages[pageId] = target;
            }
            for (const v2ChildPageName in v2Page.pages) {
                const id = generateId(v2Page.pages[v2ChildPageName]);
                page.navigation[id] = targets[id].navigationProperty
                    ? page.entitySet + '.' + targets[id].navigationProperty
                    : page.entitySet;
            }
        }
    }
    return pages;
}
class V2AppProvider extends appProvider_1.AppProvider {
    constructor(manifest, changes, schemas) {
        const v2Pages = manifest['sap.ui.generic.app'].pages;
        // Import settings
        const appSettings = new application_1.AppSettings();
        const schemaFile = common_2.getSchemaFilePath(schemaAccess_1.SchemaType.Application);
        utils_1.transferSettingsOfObject(appSettings, manifest, schemas[schemaFile.filename]['definitions']['AppSettings'], []);
        // Call base
        super(manifest, schemas, generateId(v2Pages[Object.keys(v2Pages)[0]]), convertPages(v2Pages, changes, manifest, schemas), common_1.FioriElementsVersion.v2, appSettings);
        this.app.settings = { ...this.app.settings, ...(manifest['sap.ui.generic.app'].settings || {}) };
    }
    /**
     * Public method which receives application controllers content and handles it
     * There no to handle it for V2 applications
     * @param {Controllers} controllers Object which contains string content of controllers
     */
    handleControllers() {
        // There no need for V2 applications to handle controllers content right now
    }
}
exports.V2AppProvider = V2AppProvider;
//# sourceMappingURL=appProvider.js.map