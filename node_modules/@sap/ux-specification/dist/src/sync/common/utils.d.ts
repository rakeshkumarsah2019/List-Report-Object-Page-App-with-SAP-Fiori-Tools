import { FacetConfigs, AnnotationData, FacetConfig, FacetSection, SchemaFilePath } from './types';
import { FioriElementsVersion, Manifest, PageType } from '../../specification/common';
import { EntityType, AnnotationTerm, LineItem, CollectionFacet, ReferenceFacet, ReferenceURLFacet, ConverterOutput } from '@sap-ux/vocabularies-types';
import { QualifiedName } from '@sap-ux/vocabularies-types/dist/generated/Common';
import { SchemaType } from '../../specification/schemaAccess';
/**
 * Parses, merges, and converts a list of annotation files with aid of tools from annotation-vocabularies-tools
 * @param annotationFiles
 * @returns the typed entity types with annotations
 */
export declare function parseAndMergeAndConvert(annotationFiles: AnnotationData[]): ConverterOutput;
export declare const getAnnotationPropertyValue: (annotationProperty: any) => string;
/**
 * Resolve page section(get key and label->description).
 * @param facetDefinition - the actual annotation record
 * @returns {FacetSection} - object comprising the relevant facet information
 */
export declare function getSectionFacet(facetDefinition: AnnotationTerm<CollectionFacet> | AnnotationTerm<ReferenceFacet> | AnnotationTerm<ReferenceURLFacet>): FacetSection | undefined;
export declare const getManifestSectionByPathV4: (exportResultManifest: object, path: string, targetAnnotation?: string, targetAnnotationEncoded?: string) => object;
/**
 * The function parses the line item annotation and returns a list of keys, one for each record.
 * It simulates the work of the V2 StableIdHelper, as it calculates the last section of the stable ID.
 * Note: no leading 'template:::TableColumn:::' is added for this last section, for easier reading.
 * This corresponds to the import logic at src/sync/v2/import/controls/table.ts.
 * The string 'template:::TableColumn:::' must be added for flex changes during the export.
 *
 * @param annotationTerm - object of the line item annotation
 * @returns items - Array of keys, each representig the last part of the stable id of a line item record
 */
export declare function getLineItemsTyped(annotationTerm: AnnotationTerm<LineItem>): string[];
/**
 * Retrieve facet configurations that can be used to generate ObjectPage schemas
 * @param {QualifiedName} entitySet - the actual entitySet (corresponds to the given page)
 * @param {{Array.<EntityType>}} entityTypes - annotation schema, as delivered by parse & merge & convert
 */
export declare function getObjectPageFacets(entitySet: QualifiedName, entityTypes: EntityType[]): FacetConfigs;
/**
 * Returns the version of Fiori elements (v2/v4) from a given manifest
 * @param manifest - the manifest.json file
 */
export declare function getVersionFromManifest(manifest: Manifest): FioriElementsVersion;
/**
 * Creates a default object for a new section or subsection, and adds the ID as title if present.
 * @param facet Facet configuration, to be analyzed
 * @returns the new section object
 */
export declare function createSectionWithoutProperties(facet?: FacetConfig): object;
/**
 * Retrieve page section data(so far id/key and label/description).
 * @param {QualifiedName} entitySet The actual entitySet (corresponds to the given page)
 * @param {EntityType[]} entityTypes Entity types, as delivered by parse & merge & convert
 */
export declare function getObjectPageFacetSection(entitySet: QualifiedName, entityTypes: EntityType[]): FacetSection[];
/**
 * Cleans empty sub-structures from the export result for manifest
 * @param manifest - manifest.json part of the export result
 * @param path  - path in the manifest
 * @param targetAnnotation - target annotation (optional, in case of sections, subsections)
 * @param targetAnnotationEncoded - encoded version of the target annotation, as represented in the manifest
 */
export declare const deleteEmptyStructure: (manifest: object, path: string, targetAnnotation?: string, targetAnnotationEncoded?: string) => void;
/**
 * Method which returns schema file name and path depending on passed schema or page type.
 * @param {SchemaType | PageType} schemaType Schema type or Page type.
 * @param {string} [entitySet] Entity set string.
 * @return {SchemaFilePath} File path info.
 */
export declare const getSchemaFilePath: (schemaType: PageType | SchemaType, entitySet?: string) => SchemaFilePath;
