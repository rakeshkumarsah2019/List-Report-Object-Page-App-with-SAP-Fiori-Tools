"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schemaAccess_1 = require("../../specification/schemaAccess");
const common_1 = require("../../specification/common");
const generate_1 = require("../v2/generate");
const ovpProvider_1 = require("../v2/import/app/ovpProvider");
const appProvider_1 = require("../v2/import/app/appProvider");
const appProvider_2 = require("../v4/import/app/appProvider");
const utils_1 = require("./utils");
const types_1 = require("./types");
const generate_2 = require("../v4/generate");
async function getGenericSchemas(fioriElementsVersion) {
    const genericSchemas = {};
    let schemaTypes = [];
    if (fioriElementsVersion === common_1.FioriElementsVersion.v2) {
        schemaTypes = [
            common_1.SchemaType.Application,
            common_1.SchemaType.ListReport,
            common_1.SchemaType.ObjectPage,
            common_1.SchemaType.OverviewPage,
            common_1.SchemaType.AnalyticalListPage
        ];
    }
    if (fioriElementsVersion === common_1.FioriElementsVersion.v4) {
        schemaTypes = [common_1.SchemaType.Application, common_1.SchemaType.ListReport, common_1.SchemaType.ObjectPage];
    }
    for (const schemaType of schemaTypes) {
        const schemaFile = utils_1.getSchemaFilePath(schemaType);
        genericSchemas[schemaFile.filename] = await schemaAccess_1.getGenericSchema(fioriElementsVersion, schemaType);
    }
    return genericSchemas;
}
/**
 * Get the relavant UI.ListItem and UI.Facet entity sets
 * @param allEntityTypes - array of entity types, parsed, merged, and converted by AVT
 */
function getAnnotationsForUi(allEntityTypes) {
    const filteredEntityTypes = {
        Facets: [],
        LineItems: []
    };
    if (allEntityTypes) {
        for (const entity of allEntityTypes) {
            if (!entity.annotations || !entity.annotations.UI) {
                continue;
            }
            const name = entity.name || entity.fullyQualifiedName.split('.').pop();
            const { LineItem, Facets } = entity.annotations.UI;
            if (LineItem &&
                !LineItem.qualifier &&
                LineItem.find((li) => li.$Type === 'com.sap.vocabularies.UI.v1.DataField' ||
                    li.$Type === 'com.sap.vocabularies.UI.v1.DataFieldForAnnotation')) {
                filteredEntityTypes.LineItems.push(name);
            }
            if (Facets && !Facets.qualifier) {
                filteredEntityTypes.Facets.push(name);
            }
        }
    }
    return filteredEntityTypes;
}
function generateAppSchemasV2(genericSchemas, uiEntityTypes, service, manifest) {
    const appSchemas = {}, entityTypes = service && service.entityTypes;
    if (uiEntityTypes) {
        // ObjectPage
        for (const entityType of uiEntityTypes.Facets) {
            const schemaFile = utils_1.getSchemaFilePath(common_1.SchemaType.ObjectPage, entityType);
            const genericSchemaFile = utils_1.getSchemaFilePath(common_1.SchemaType.ObjectPage);
            appSchemas[schemaFile.filename] = generate_1.generateObjectPageSchemaV2(genericSchemas[genericSchemaFile.filename], entityType, entityTypes, manifest);
        }
        // ListReport
        for (const entityType of uiEntityTypes.LineItems) {
            const schemaFile = utils_1.getSchemaFilePath(common_1.SchemaType.ListReport, entityType);
            const genericSchemaFile = utils_1.getSchemaFilePath(common_1.SchemaType.ListReport);
            appSchemas[schemaFile.filename] = generate_1.generateListReportSchemaV2(genericSchemas[genericSchemaFile.filename], entityType, entityTypes);
        }
    }
    return { ...genericSchemas, ...appSchemas };
}
function generateAppSchemasV4(genericSchemas, uiEntityTypes, service, manifest) {
    const appSchemas = {};
    if (uiEntityTypes) {
        // ObjectPage
        for (const entityType of uiEntityTypes.Facets) {
            const schemaFile = utils_1.getSchemaFilePath(common_1.SchemaType.ObjectPage, entityType);
            const genericSchemaFile = utils_1.getSchemaFilePath(common_1.SchemaType.ObjectPage);
            appSchemas[schemaFile.filename] = generate_2.generateObjectPageSchemaV4(genericSchemas[genericSchemaFile.filename], entityType, service.entityTypes, manifest);
        }
        // ListReport
        for (const entityType of uiEntityTypes.LineItems) {
            const schemaFile = utils_1.getSchemaFilePath(common_1.SchemaType.ListReport, entityType);
            const genericSchemaFile = utils_1.getSchemaFilePath(common_1.SchemaType.ListReport);
            appSchemas[schemaFile.filename] = generate_2.generateListReportSchemaV4(genericSchemas[genericSchemaFile.filename]);
        }
    }
    return { ...genericSchemas, ...appSchemas };
}
async function generateAppSchemas(uiEntityTypes, fioriElementsVersion, service, manifest) {
    const genericSchemas = await getGenericSchemas(fioriElementsVersion);
    if (fioriElementsVersion === common_1.FioriElementsVersion.v4) {
        return generateAppSchemasV4(genericSchemas, uiEntityTypes, service, manifest);
    }
    else {
        return generateAppSchemasV2(genericSchemas, uiEntityTypes, service, manifest);
    }
}
function importConfigs(manifest, flex, appSchemas, service) {
    let provider;
    const files = [];
    if (manifest['sap.ovp']) {
        provider = new ovpProvider_1.V2OvpProvider(manifest, appSchemas);
    }
    else if (manifest['sap.ui.generic.app']) {
        provider = new appProvider_1.V2AppProvider(manifest, flex, appSchemas);
    }
    else {
        provider = new appProvider_2.V4AppProvider(manifest, appSchemas);
    }
    if (provider) {
        const { appConfig, pageConfigs } = provider.createConfigFiles(service);
        for (const app in appConfig) {
            files.push({ dataSourceUri: app, fileContent: JSON.stringify(appConfig[app], null, 4) });
        }
        for (const config in pageConfigs) {
            files.push({ dataSourceUri: config, fileContent: JSON.stringify(pageConfigs[config], null, 4) });
        }
    }
    return files;
}
function getFileList(schema, configs) {
    let files = [];
    for (const schemaName of Object.keys(schema).sort()) {
        let dataSourceUri;
        if (schemaName === common_1.SchemaType.Application) {
            dataSourceUri = `${types_1.DirName.Schemas}/${types_1.FileName.App[0].toUpperCase()}${types_1.FileName.App.slice(1)}`;
        }
        else {
            dataSourceUri = `${types_1.DirName.Schemas}/${schemaName}.json`;
        }
        files.push({ dataSourceUri, fileContent: JSON.stringify(schema[schemaName], null, 4) });
    }
    if (configs) {
        files = files.concat(configs);
    }
    return files;
}
/**
 * Import the schema and config files for a given project
 * @param importParameters - files of the project: manifest, flex changes, odata files
 */
async function importProjectSchema(importProjectParameters) {
    let files = [];
    const { manifest, annotations } = importProjectParameters;
    const fioriElementsVersion = utils_1.getVersionFromManifest(manifest);
    const service = utils_1.parseAndMergeAndConvert(annotations);
    const entityTypes = service && service.entityTypes;
    const uiEntityTypes = getAnnotationsForUi(entityTypes);
    const schemas = await generateAppSchemas(uiEntityTypes, fioriElementsVersion, service, manifest);
    files = getFileList(schemas);
    return files;
}
exports.importProjectSchema = importProjectSchema;
/**
 * Import the schema and config files for a given project
 * @param importParameters - files of the project: manifest, flex changes, odata files
 */
async function importProjectSchemaAndConfig(importProjectParameters) {
    let files = [];
    let configFiles = [];
    const { manifest, annotations, flex } = importProjectParameters;
    const fioriElementsVersion = utils_1.getVersionFromManifest(manifest);
    const service = utils_1.parseAndMergeAndConvert(annotations);
    const entityTypes = service && service.entityTypes;
    const uiEntityTypes = entityTypes && getAnnotationsForUi(entityTypes);
    const appSchemas = await generateAppSchemas(uiEntityTypes, fioriElementsVersion, service, manifest);
    configFiles = importConfigs(manifest, flex, appSchemas, service);
    files = getFileList(appSchemas, configFiles);
    return files;
}
exports.importProjectSchemaAndConfig = importProjectSchemaAndConfig;
//# sourceMappingURL=importProject.js.map