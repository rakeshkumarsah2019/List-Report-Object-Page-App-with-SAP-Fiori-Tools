import {
	Property as ParserProperty,
	V2NavigationProperty as ParserV2NavigationProperty,
	V4NavigationProperty as ParserV4NavigationProperty,
	EntityType as ParserEntityType,
	EntitySet as ParserEntitySet,
	Action as ParserAction,
	Reference
} from "./Parser";

import { Annotation as EdmAnnotation, AnnotationList } from "./BaseEdm";
import {
	ActionAnnotations,
	ActionImportAnnotations,
	AnnotationAnnotations,
	ComplexTypeAnnotations,
	EntityContainerAnnotations,
	EntitySetAnnotations,
	EntityTypeAnnotations,
	EnumTypeAnnotations,
	FunctionAnnotations,
	FunctionImportAnnotations,
	IncludeAnnotations,
	NavigationPropertyAnnotations,
	ParameterAnnotations,
	PropertyAnnotations,
	ReferenceAnnotations,
	ReturnTypeAnnotations,
	SchemaAnnotations,
	SingletonAnnotations,
	TermAnnotations,
	TypeDefinitionAnnotations,
	PropertyValueAnnotations,
	RecordAnnotations
} from "./generated/Edm_Types";
import { AnnotationRecord, Collection, Expression, FullyQualifiedName, SimpleIdentifier } from "./BaseEdm";

export type AnyAnnotation =
	| EnumTypeAnnotations
	| PropertyValueAnnotations
	| IncludeAnnotations
	| ReferenceAnnotations
	| ActionAnnotations
	| FunctionImportAnnotations
	| ActionImportAnnotations
	| TypeDefinitionAnnotations
	| SingletonAnnotations
	| EntityContainerAnnotations
	| FunctionAnnotations
	| ReturnTypeAnnotations
	| ParameterAnnotations
	| ComplexTypeAnnotations
	| TermAnnotations
	| RecordAnnotations
	| SchemaAnnotations
	| AnnotationAnnotations
	| EntitySetAnnotations
	| EntityTypeAnnotations
	| PropertyAnnotations
	| NavigationPropertyAnnotations;

export type Property = ParserProperty & {
	annotations: PropertyAnnotations;
};

export type V2NavigationProperty = ParserV2NavigationProperty & {
	targetType: EntityType;
	annotations: NavigationPropertyAnnotations;
};

export type V4NavigationProperty = ParserV4NavigationProperty & {
	_type: "NavigationProperty";
	targetType: EntityType;
	annotations: NavigationPropertyAnnotations;
};

export type EntityType = ParserEntityType & {
	_type: "EntityType";
	entityProperties: Property[];
	keys: Property[];
	navigationProperties: (V2NavigationProperty | V4NavigationProperty)[];
	actions: Record<string, Action>;
	annotations: EntityTypeAnnotations;
	resolvePath(relativePath: string): any;
};

export type EntitySet = ParserEntitySet & {
	_type: "EntitySet";
	entityType: EntityType;
	navigationPropertyBinding: Record<string, EntitySet>;
	annotations: EntitySetAnnotations;
};

export type Action = ParserAction & {
	_type: "Action";
	sourceEntityType?: EntityType;
	returnEntityType?: EntityType;
	annotations: ActionAnnotations;
	parameters: {
		_type: "ActionParameter";
		isEntitySet: boolean;
		fullyQualifiedName: string;
		type: string;
		annotations: ParameterAnnotations;
	}[];
};

export type Annotation = EdmAnnotation & {
	fullyQualifiedName: string;
};

export type ConverterOutput = {
	version: string;
	annotations: Record<string, AnnotationList[]>;
	namespace: string;
	actions: Action[];
	entitySets: EntitySet[];
	entityTypes: EntityType[];
	references: Reference[];
};
