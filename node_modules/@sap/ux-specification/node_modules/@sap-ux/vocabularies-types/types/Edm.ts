// PURE EDM Types
import {
	EntityType as _EntityType,
	Action as _Action,
	Property,
	V2NavigationProperty,
	V4NavigationProperty
} from "./Converter";
import { RecordAnnotations, TermAnnotations } from "./generated/Edm_Types";

// Generated EDM Types for the converter

export type PropertyPath = {
	fullyQualifiedName: string;
	type: "PropertyPath";
	value: string;
	$target: Property;
};
export type NavigationPropertyPath = {
	type: "NavigationPropertyPath";
	value: string;
	$target: V2NavigationProperty | V4NavigationProperty;
};

export type AnnotationPath<P> = {
	type: "AnnotationPath";
	value: string;
	$target: AnnotationTerm<P>;
};

export type AnnotationTerm<P> = P & {
	fullyQualifiedName: string;
	term: string;
	qualifier: string;
	annotations?: TermAnnotations;
};

export type PathAnnotationExpression<P> = {
	type: "Path";
	path: string; // The defined path
	$target: P;
	getValue(): P;
};

export type ApplyAnnotationExpression<P> = {
	type: "Apply";
	value: any;
	getValue(): P;
};

export type PropertyAnnotationValue<P> = P | PathAnnotationExpression<P> | ApplyAnnotationExpression<P>;

export type String = string;
export type InstancePath = string;
export type Boolean = boolean;
export type Byte = number;
export type Int16 = number;
export type Int32 = number;
export type Int64 = number;
export type Time = string;
export type Binary = string;
export type Decimal = number;
export type Double = number;

export type Date = string;
export type Guid = any;
export type Duration = any;
export type DateTimeOffset = any;

export type GeographyPoint = any;

export type PrimitiveType =
	| Binary
	| Boolean
	| Byte
	| Date
	| DateTimeOffset
	| Decimal
	| Double
	| Duration
	| Guid
	| Int16
	| Int32
	| Int64
	// | Edm.SByte
	// | Edm.Single
	// | Edm.Stream
	| String
	// | Edm.TimeOfData
	// | Edm.Geography
	| GeographyPoint;
// | Edm.GeographyLineString
// | Edm.GeographyPolygon
// | Edm.GeographyMultiPoint
// | Edm.GeographyMultiLineString
// | Edm.GeographyMultiPolygon
// | Edm.GeographyCollection
// | Edm.Geometry
// | Edm.GeometryPoint
// | Edm.GeometryLineString
// | Edm.GeometryPolygon
// | Edm.GeometryMultiPoint
// | Edm.GeometryMultiLineString
// | Edm.GeometryMultiPolygon
// | Edm.GeometryCollection;

export type EnumValue<P> = {
	EnumMember: P;
};

export type ComplexType = {
	annotations?: RecordAnnotations;
};

export type EntityType = _EntityType;
export type Action = _Action;
