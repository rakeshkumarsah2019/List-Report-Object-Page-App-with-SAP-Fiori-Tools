sap.ui.define([], function () {
  "use strict";

  var _exports = {};

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

  function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var Path = function Path(pathExpression, targetName) {
    _classCallCheck(this, Path);

    this.path = pathExpression.Path;
    this.type = "Path";
    this.$target = targetName;
  };

  function unalias(references, aliasedValue) {
    if (!references.referenceMap) {
      references.referenceMap = references.reduce(function (map, reference) {
        map[reference.alias] = reference;
        return map;
      }, {});
    }

    if (!aliasedValue) {
      return aliasedValue;
    }

    var _aliasedValue$split = aliasedValue.split("."),
        _aliasedValue$split2 = _slicedToArray(_aliasedValue$split, 2),
        alias = _aliasedValue$split2[0],
        value = _aliasedValue$split2[1];

    var reference = references.referenceMap[alias];

    if (reference) {
      return "".concat(reference.namespace, ".").concat(value);
    } else {
      // Try to see if it's an annotation Path like to_SalesOrder/@UI.LineItem
      if (aliasedValue.indexOf("@") !== -1) {
        var _aliasedValue$split3 = aliasedValue.split("@"),
            _aliasedValue$split4 = _slicedToArray(_aliasedValue$split3, 2),
            preAlias = _aliasedValue$split4[0],
            postAlias = _aliasedValue$split4[1];

        return "".concat(preAlias, "@").concat(unalias(references, postAlias));
      } else {
        return aliasedValue;
      }
    }
  }

  function buildObjectMap(parserOutput) {
    var objectMap = {};

    if (parserOutput.schema.entityContainer && parserOutput.schema.entityContainer.fullyQualifiedName) {
      objectMap[parserOutput.schema.entityContainer.fullyQualifiedName] = parserOutput.schema.entityContainer;
    }

    parserOutput.schema.entitySets.forEach(function (entitySet) {
      objectMap[entitySet.fullyQualifiedName] = entitySet;
    });
    parserOutput.schema.actions.forEach(function (action) {
      objectMap[action.fullyQualifiedName] = action;
      action.parameters.forEach(function (parameter) {
        objectMap[parameter.fullyQualifiedName] = parameter;
      });
    });
    parserOutput.schema.entityTypes.forEach(function (entityType) {
      objectMap[entityType.fullyQualifiedName] = entityType;
      entityType.entityProperties.forEach(function (property) {
        objectMap[property.fullyQualifiedName] = property;
      });
      entityType.navigationProperties.forEach(function (navProperty) {
        objectMap[navProperty.fullyQualifiedName] = navProperty;
      });
    });
    Object.keys(parserOutput.schema.annotations).forEach(function (annotationSource) {
      parserOutput.schema.annotations[annotationSource].forEach(function (annotationList) {
        var currentTargetName = unalias(parserOutput.references, annotationList.target);
        annotationList.annotations.forEach(function (annotation) {
          var annotationFQN = "/".concat(currentTargetName, "@").concat(unalias(parserOutput.references, annotation.term));

          if (annotation.qualifier) {
            annotationFQN += "#".concat(annotation.qualifier);
          }

          objectMap[annotationFQN] = annotation;
          annotation.fullyQualifiedName = annotationFQN;
        });
      });
    });
    return objectMap;
  }

  function combinePath(currentTarget, path) {
    if (path.startsWith("@")) {
      return currentTarget + path;
    } else {
      return currentTarget + "/" + path;
    }
  }

  function resolveTarget(objectMap, currentTarget, path) {
    var pathOnly = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    if (!path) {
      return undefined;
    }

    path = combinePath(currentTarget.fullyQualifiedName, path);
    var pathSplit = path.split("/");
    var currentPath = path;
    var target = pathSplit.reduce(function (currentValue, pathPart) {
      if (!currentValue) {
        currentPath = pathPart;
      } else if (currentValue._type === "EntitySet" && currentValue.entityType) {
        currentPath = combinePath(currentValue.entityType, pathPart);
      } else if (currentValue._type === "NavigationProperty" && currentValue.targetTypeName) {
        currentPath = combinePath(currentValue.targetTypeName, pathPart);
      } else if (currentValue._type === "NavigationProperty" && currentValue.targetType) {
        currentPath = combinePath(currentValue.targetType.fullyQualifiedName, pathPart);
      } else if (currentValue._type === "Property") {
        currentPath = combinePath(currentTarget.fullyQualifiedName.substr(0, currentTarget.fullyQualifiedName.lastIndexOf("/")), pathPart);
      } else if (currentValue._type === "Action" && currentValue.isBound) {
        currentPath = combinePath(currentValue.fullyQualifiedName, pathPart);

        if (!objectMap[currentPath]) {
          currentPath = combinePath(currentValue.sourceType, pathPart);
        }
      } else if (currentValue._type === "ActionParameter" && currentValue.isEntitySet) {
        currentPath = combinePath(currentValue.type, pathPart);
      } else if (currentValue._type === "ActionParameter" && !currentValue.isEntitySet) {
        currentPath = combinePath(currentTarget.fullyQualifiedName.substr(0, currentTarget.fullyQualifiedName.lastIndexOf("/")), pathPart);

        if (!objectMap[currentPath]) {
          var lastIdx = currentTarget.fullyQualifiedName.lastIndexOf("/");

          if (lastIdx === -1) {
            lastIdx = currentTarget.fullyQualifiedName.length;
          }

          currentPath = combinePath(objectMap[currentTarget.fullyQualifiedName.substr(0, lastIdx)].sourceType, pathPart);
        }
      } else {
        currentPath = combinePath(currentValue.fullyQualifiedName, pathPart);

        if (currentValue[pathPart] !== undefined) {
          return currentValue[pathPart];
        } else if (pathPart === "$AnnotationPath" && currentValue.$target) {
          return currentValue.$target;
        }
      }

      return objectMap[currentPath];
    }, null);

    if (!target) {// console.log("Missing target " + path);
    }

    if (pathOnly) {
      return currentPath;
    }

    return target;
  }

  function isAnnotationPath(pathStr) {
    return pathStr.indexOf("@") !== -1;
  }

  function parseValue(propertyValue, valueFQN, parserOutput, currentTarget, objectMap, toResolve) {
    if (propertyValue === undefined) {
      return undefined;
    }

    switch (propertyValue.type) {
      case "String":
        return propertyValue.String;

      case "Int":
        return propertyValue.Int;

      case "Bool":
        return propertyValue.Bool;

      case "Decimal":
        return propertyValue.Decimal;

      case "Date":
        return propertyValue.Date;

      case "EnumMember":
        return propertyValue.EnumMember;

      case "PropertyPath":
        return {
          type: "PropertyPath",
          value: propertyValue.PropertyPath,
          fullyQualifiedName: valueFQN,
          $target: resolveTarget(objectMap, currentTarget, propertyValue.PropertyPath)
        };

      case "NavigationPropertyPath":
        return {
          type: "NavigationPropertyPath",
          value: propertyValue.NavigationPropertyPath,
          fullyQualifiedName: valueFQN,
          $target: resolveTarget(objectMap, currentTarget, propertyValue.NavigationPropertyPath)
        };

      case "AnnotationPath":
        var annotationTarget = resolveTarget(objectMap, currentTarget, unalias(parserOutput.references, propertyValue.AnnotationPath), true);
        var annotationPath = {
          type: "AnnotationPath",
          value: propertyValue.AnnotationPath,
          fullyQualifiedName: valueFQN,
          $target: annotationTarget
        };
        toResolve.push(annotationPath);
        return annotationPath;

      case "Path":
        if (isAnnotationPath(propertyValue.Path)) {
          // If it's an anntoation that we can resolve, resolve it !
          var _$target = resolveTarget(objectMap, currentTarget, propertyValue.Path);

          if (_$target) {
            return _$target;
          }
        }

        var $target = resolveTarget(objectMap, currentTarget, propertyValue.Path, true);
        var path = new Path(propertyValue, $target);
        toResolve.push(path);
        return path;

      case "Record":
        return parseRecord(propertyValue.Record, valueFQN, parserOutput, currentTarget, objectMap, toResolve);

      case "Collection":
        return parseCollection(propertyValue.Collection, valueFQN, parserOutput, currentTarget, objectMap, toResolve);

      case "Apply":
        return propertyValue;
    }
  }

  function parseRecord(recordDefinition, currentFQN, parserOutput, currentTarget, objectMap, toResolve) {
    var annotationTerm = {
      $Type: unalias(parserOutput.references, recordDefinition.type),
      fullyQualifiedName: currentFQN
    };
    var annotationContent = {};
    recordDefinition.propertyValues.forEach(function (propertyValue) {
      annotationContent[propertyValue.name] = parseValue(propertyValue.value, "".concat(currentFQN, "/").concat(propertyValue.name), parserOutput, currentTarget, objectMap, toResolve);

      if (annotationContent.hasOwnProperty("Action") && (annotationTerm.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction" || annotationTerm.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithAction")) {
        if (currentTarget.actions) {
          annotationContent.ActionTarget = currentTarget.actions[annotationContent.Action];

          if (!annotationContent.ActionTarget) {// Add to diagnostics debugger;
          }
        }
      }
    });
    return Object.assign(annotationTerm, annotationContent);
  }

  function parseCollection(collectionDefinition, parentFQN, parserOutput, currentTarget, objectMap, toResolve) {
    switch (collectionDefinition.type) {
      case "PropertyPath":
        return collectionDefinition.map(function (propertyPath, propertyIdx) {
          return {
            type: "PropertyPath",
            value: propertyPath.PropertyPath,
            fullyQualifiedName: "".concat(parentFQN, "/").concat(propertyIdx),
            $target: resolveTarget(objectMap, currentTarget, propertyPath.PropertyPath)
          };
        });

      case "Path":
        return collectionDefinition.map(function (pathValue) {
          if (isAnnotationPath(pathValue.Path)) {
            // If it's an anntoation that we can resolve, resolve it !
            var _$target2 = resolveTarget(objectMap, currentTarget, pathValue.Path);

            if (_$target2) {
              return _$target2;
            }
          }

          var $target = resolveTarget(objectMap, currentTarget, pathValue.Path, true);
          var path = new Path(pathValue, $target);
          toResolve.push(path);
          return path;
        });

      case "AnnotationPath":
        return collectionDefinition.map(function (annotationPath, annotationIdx) {
          var annotationTarget = resolveTarget(objectMap, currentTarget, annotationPath.AnnotationPath, true);
          var annotationCollectionElement = {
            type: "AnnotationPath",
            value: annotationPath.AnnotationPath,
            fullyQualifiedName: "".concat(parentFQN, "/").concat(annotationIdx),
            $target: annotationTarget
          };
          toResolve.push(annotationCollectionElement);
          return annotationCollectionElement;
        });

      case "NavigationPropertyPath":
        return collectionDefinition.map(function (navPropertyPath, navPropIdx) {
          return {
            type: "NavigationPropertyPath",
            value: navPropertyPath.NavigationPropertyPath,
            fullyQualifiedName: "".concat(parentFQN, "/").concat(navPropIdx),
            $target: resolveTarget(objectMap, currentTarget, navPropertyPath.NavigationPropertyPath)
          };
        });

      case "Record":
        return collectionDefinition.map(function (recordDefinition, recordIdx) {
          return parseRecord(recordDefinition, "".concat(parentFQN, "/").concat(recordIdx), parserOutput, currentTarget, objectMap, toResolve);
        });

      case "String":
        return collectionDefinition.map(function (stringValue) {
          return stringValue;
        });

      default:
        if (collectionDefinition.length === 0) {
          return [];
        }

        throw new Error("Unsupported case");
    }
  }

  function convertAnnotation(annotation, parserOutput, currentTarget, objectMap, toResolve) {
    if (annotation.record) {
      var annotationTerm = {
        $Type: unalias(parserOutput.references, annotation.record.type),
        fullyQualifiedName: annotation.fullyQualifiedName,
        qualifier: annotation.qualifier
      };
      var annotationContent = {};
      annotation.record.propertyValues.forEach(function (propertyValue) {
        annotationContent[propertyValue.name] = parseValue(propertyValue.value, "".concat(annotation.fullyQualifiedName, "/").concat(propertyValue.name), parserOutput, currentTarget, objectMap, toResolve);

        if (annotationContent.hasOwnProperty("Action") && (!annotation.record || annotationTerm.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction" || annotationTerm.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithAction")) {
          if (currentTarget.actions) {
            annotationContent.ActionTarget = currentTarget.actions[annotationContent.Action];

            if (!annotationContent.ActionTarget) {// Add to diagnostics
              // debugger;
            }
          }
        }
      });
      return Object.assign(annotationTerm, annotationContent);
    } else if (annotation.collection === undefined) {
      if (annotation.value) {
        return parseValue(annotation.value, annotation.fullyQualifiedName, parserOutput, currentTarget, objectMap, toResolve);
      } else {
        return true;
      }
    } else if (annotation.collection) {
      var collection = parseCollection(annotation.collection, annotation.fullyQualifiedName, parserOutput, currentTarget, objectMap, toResolve);
      collection.fullyQualifiedName = annotation.fullyQualifiedName;
      return collection;
    } else {
      throw new Error("Unsupported case");
    }
  }

  function createResolvePathFn(entityType, objectMap) {
    return function (relativePath) {
      return resolveTarget(objectMap, entityType, relativePath);
    };
  }

  function resolveNavigationProperties(entityTypes, associations, objectMap) {
    entityTypes.forEach(function (entityType) {
      entityType.navigationProperties.forEach(function (navProp) {
        if (navProp.targetTypeName) {
          navProp.targetType = objectMap[navProp.targetTypeName];
        } else if (navProp.relationship) {
          var targetAssociation = associations.find(function (association) {
            return association.fullyQualifiedName === navProp.relationship;
          });

          if (targetAssociation) {
            var associationEnd = targetAssociation.associationEnd.find(function (end) {
              return end.role === navProp.toRole;
            });

            if (associationEnd) {
              navProp.targetType = objectMap[associationEnd.type];
            }
          }
        }
      });
      entityType.resolvePath = createResolvePathFn(entityType, objectMap);
    });
  }

  function linkActionsToEntityType(namespace, actions, objectMap) {
    actions.forEach(function (action) {
      if (action.isBound) {
        var sourceEntityType = objectMap[action.sourceType];
        action.sourceEntityType = sourceEntityType;

        if (sourceEntityType) {
          if (!sourceEntityType.actions) {
            sourceEntityType.actions = {};
          }

          sourceEntityType.actions[action.name] = action;
          sourceEntityType.actions["".concat(namespace, ".").concat(action.name)] = action;
        }

        var returnEntityType = objectMap[action.returnType];
        action.returnEntityType = returnEntityType;
      }
    });
  }

  function linkEntityTypeToEntitySet(entitySets, objectMap) {
    entitySets.forEach(function (entitySet) {
      entitySet.entityType = objectMap[entitySet.entityTypeName];

      if (!entitySet.annotations) {
        entitySet.annotations = {};
      }

      if (!entitySet.entityType.annotations) {
        entitySet.entityType.annotations = {};
      }
    });
  }

  function convertTypes(parserOutput) {
    var objectMap = buildObjectMap(parserOutput);
    resolveNavigationProperties(parserOutput.schema.entityTypes, parserOutput.schema.associations, objectMap);
    linkActionsToEntityType(parserOutput.schema.namespace, parserOutput.schema.actions, objectMap);
    linkEntityTypeToEntitySet(parserOutput.schema.entitySets, objectMap);
    var toResolve = [];
    var unresolvedAnnotations = [];
    Object.keys(parserOutput.schema.annotations).forEach(function (annotationSource) {
      parserOutput.schema.annotations[annotationSource].forEach(function (annotationList) {
        var currentTargetName = unalias(parserOutput.references, annotationList.target);
        var currentTarget = objectMap[currentTargetName];

        if (!currentTarget) {
          if (currentTargetName.indexOf("@") !== -1) {
            unresolvedAnnotations.push(annotationList);
          }
        } else if (typeof currentTarget === "object") {
          if (!currentTarget.annotations) {
            currentTarget.annotations = {};
          }

          annotationList.annotations.forEach(function (annotation) {
            var _annotation$term$spli = annotation.term.split("."),
                _annotation$term$spli2 = _slicedToArray(_annotation$term$spli, 2),
                vocAlias = _annotation$term$spli2[0],
                vocTerm = _annotation$term$spli2[1];

            if (!currentTarget.annotations[vocAlias]) {
              currentTarget.annotations[vocAlias] = {};
            }

            if (!currentTarget.annotations._annotations) {
              currentTarget.annotations._annotations = {};
            }

            var vocTermWithQualifier = "".concat(vocTerm).concat(annotation.qualifier ? "#".concat(annotation.qualifier) : "");
            currentTarget.annotations[vocAlias][vocTermWithQualifier] = convertAnnotation(annotation, parserOutput, currentTarget, objectMap, toResolve);

            if (currentTarget.annotations[vocAlias][vocTermWithQualifier] !== null && typeof currentTarget.annotations[vocAlias][vocTermWithQualifier] === "object") {
              currentTarget.annotations[vocAlias][vocTermWithQualifier].term = unalias(parserOutput.references, "".concat(vocAlias, ".").concat(vocTerm));
              currentTarget.annotations[vocAlias][vocTermWithQualifier].qualifier = annotation.qualifier;
            }

            currentTarget.annotations._annotations["".concat(vocAlias, ".").concat(vocTermWithQualifier)] = currentTarget.annotations[vocAlias][vocTermWithQualifier];
            objectMap["".concat(currentTargetName, "@").concat(unalias(parserOutput.references, vocAlias + "." + vocTermWithQualifier))] = currentTarget.annotations[vocAlias][vocTermWithQualifier];
          });
        } else {
          debugger;
        }
      });
    });
    unresolvedAnnotations.forEach(function (annotationList) {
      var currentTargetName = unalias(parserOutput.references, annotationList.target);

      var _currentTargetName$sp = currentTargetName.split("@"),
          _currentTargetName$sp2 = _slicedToArray(_currentTargetName$sp, 2),
          baseObj = _currentTargetName$sp2[0],
          annotationPart = _currentTargetName$sp2[1];

      var targetSplit = annotationPart.split("/");
      baseObj = baseObj + "@" + targetSplit[0];
      var currentTarget = targetSplit.slice(1).reduce(function (currentObj, path) {
        if (!currentObj) {
          return null;
        }

        return currentObj[path];
      }, objectMap[baseObj]);

      if (!currentTarget) {// console.log("Missing target again " + currentTargetName);
      } else if (typeof currentTarget === "object") {
        if (!currentTarget.annotations) {
          currentTarget.annotations = {};
        }

        annotationList.annotations.forEach(function (annotation) {
          var _annotation$term$spli3 = annotation.term.split("."),
              _annotation$term$spli4 = _slicedToArray(_annotation$term$spli3, 2),
              vocAlias = _annotation$term$spli4[0],
              vocTerm = _annotation$term$spli4[1];

          if (!currentTarget.annotations[vocAlias]) {
            currentTarget.annotations[vocAlias] = {};
          }

          if (!currentTarget.annotations._annotations) {
            currentTarget.annotations._annotations = {};
          }

          var vocTermWithQualifier = "".concat(vocTerm).concat(annotation.qualifier ? "#".concat(annotation.qualifier) : "");
          currentTarget.annotations[vocAlias][vocTermWithQualifier] = convertAnnotation(annotation, parserOutput, currentTarget, objectMap, toResolve);

          if (currentTarget.annotations[vocAlias][vocTermWithQualifier] !== null && typeof currentTarget.annotations[vocAlias][vocTermWithQualifier] === "object") {
            currentTarget.annotations[vocAlias][vocTermWithQualifier].term = unalias(parserOutput.references, "".concat(vocAlias, ".").concat(vocTerm));
            currentTarget.annotations[vocAlias][vocTermWithQualifier].qualifier = annotation.qualifier;
          }

          currentTarget.annotations._annotations["".concat(vocAlias, ".").concat(vocTermWithQualifier)] = currentTarget.annotations[vocAlias][vocTermWithQualifier];
          objectMap["".concat(currentTargetName, "@").concat(unalias(parserOutput.references, vocAlias + "." + vocTermWithQualifier))] = currentTarget.annotations[vocAlias][vocTermWithQualifier];
        });
      } else {
        debugger;
      }
    });
    toResolve.forEach(function (resolveable) {
      var targetStr = resolveable.$target;
      resolveable.$target = objectMap[targetStr];
    });
    parserOutput.entitySets = parserOutput.schema.entitySets;
    return {
      version: parserOutput.version,
      annotations: parserOutput.schema.annotations,
      namespace: parserOutput.schema.namespace,
      actions: parserOutput.schema.actions,
      entitySets: parserOutput.schema.entitySets,
      entityTypes: parserOutput.schema.entityTypes,
      references: parserOutput.references
    };
  }

  _exports.convertTypes = convertTypes;

  function transformCollectionItemToGenericType(collectionItem) {
    if (typeof collectionItem === "string") {
      return collectionItem;
    } else if (typeof collectionItem === "object") {
      if (collectionItem.hasOwnProperty("$Type")) {
        // Annotation Record
        var outItem = {
          type: collectionItem.$Type,
          propertyValues: []
        }; // Could validate keys and type based on $Type

        Object.keys(collectionItem).forEach(function (collectionKey) {
          if (collectionKey !== "$Type" && collectionKey !== "term" && collectionKey !== "qualifier" && collectionKey !== "ActionTarget" && collectionKey !== "fullyQualifiedName") {
            var value = collectionItem[collectionKey];

            if (typeof value === "string") {
              outItem.propertyValues.push({
                name: collectionKey,
                value: {
                  type: "String",
                  String: value
                }
              });
            } else if (typeof value === "boolean") {
              outItem.propertyValues.push({
                name: collectionKey,
                value: {
                  type: "Bool",
                  Bool: value
                }
              });
            } else if (value.type === "Path") {
              outItem.propertyValues.push({
                name: collectionKey,
                value: {
                  type: "Path",
                  Path: value.path
                }
              });
            } else if (value.type === "AnnotationPath") {
              outItem.propertyValues.push({
                name: collectionKey,
                value: {
                  type: "AnnotationPath",
                  AnnotationPath: value.value
                }
              });
            } else if (value.type === "PropertyPath") {
              outItem.propertyValues.push({
                name: collectionKey,
                value: {
                  type: "PropertyPath",
                  PropertyPath: value.value
                }
              });
            } else if (value.type === "NavigationPropertyPath") {
              outItem.propertyValues.push({
                name: collectionKey,
                value: {
                  type: "NavigationPropertyPath",
                  NavigationPropertyPath: value.value
                }
              });
            } else if (value.hasOwnProperty("$Type")) {
              outItem.propertyValues.push({
                name: collectionKey,
                value: {
                  type: "Record",
                  Record: transformCollectionItemToGenericType(value)
                }
              });
            }
          }
        });
        return outItem;
      }
    }
  }

  function transformTermToGenericType(annotation) {
    var baseAnnotation = {
      term: annotation.term,
      qualifier: annotation.qualifier
    };

    if (Array.isArray(annotation)) {
      // Collection
      return _objectSpread(_objectSpread({}, baseAnnotation), {}, {
        collection: annotation.map(transformCollectionItemToGenericType)
      });
    } else if (annotation.hasOwnProperty("$Type")) {
      return _objectSpread(_objectSpread({}, baseAnnotation), {}, {
        record: transformCollectionItemToGenericType(annotation)
      });
    } else {
      return baseAnnotation;
    }
  }

  _exports.transformTermToGenericType = transformTermToGenericType;
  return _exports;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9zYXAvZmUvY29yZS9jb252ZXJ0ZXJzL2NvbW1vbi9Bbm5vdGF0aW9uQ29udmVydGVyLnRzIl0sIm5hbWVzIjpbIlBhdGgiLCJwYXRoRXhwcmVzc2lvbiIsInRhcmdldE5hbWUiLCJwYXRoIiwidHlwZSIsIiR0YXJnZXQiLCJ1bmFsaWFzIiwicmVmZXJlbmNlcyIsImFsaWFzZWRWYWx1ZSIsInJlZmVyZW5jZU1hcCIsInJlZHVjZSIsIm1hcCIsInJlZmVyZW5jZSIsImFsaWFzIiwic3BsaXQiLCJ2YWx1ZSIsIm5hbWVzcGFjZSIsImluZGV4T2YiLCJwcmVBbGlhcyIsInBvc3RBbGlhcyIsImJ1aWxkT2JqZWN0TWFwIiwicGFyc2VyT3V0cHV0Iiwib2JqZWN0TWFwIiwic2NoZW1hIiwiZW50aXR5Q29udGFpbmVyIiwiZnVsbHlRdWFsaWZpZWROYW1lIiwiZW50aXR5U2V0cyIsImZvckVhY2giLCJlbnRpdHlTZXQiLCJhY3Rpb25zIiwiYWN0aW9uIiwicGFyYW1ldGVycyIsInBhcmFtZXRlciIsImVudGl0eVR5cGVzIiwiZW50aXR5VHlwZSIsImVudGl0eVByb3BlcnRpZXMiLCJwcm9wZXJ0eSIsIm5hdmlnYXRpb25Qcm9wZXJ0aWVzIiwibmF2UHJvcGVydHkiLCJPYmplY3QiLCJrZXlzIiwiYW5ub3RhdGlvbnMiLCJhbm5vdGF0aW9uU291cmNlIiwiYW5ub3RhdGlvbkxpc3QiLCJjdXJyZW50VGFyZ2V0TmFtZSIsInRhcmdldCIsImFubm90YXRpb24iLCJhbm5vdGF0aW9uRlFOIiwidGVybSIsInF1YWxpZmllciIsImNvbWJpbmVQYXRoIiwiY3VycmVudFRhcmdldCIsInN0YXJ0c1dpdGgiLCJyZXNvbHZlVGFyZ2V0IiwicGF0aE9ubHkiLCJ1bmRlZmluZWQiLCJwYXRoU3BsaXQiLCJjdXJyZW50UGF0aCIsImN1cnJlbnRWYWx1ZSIsInBhdGhQYXJ0IiwiX3R5cGUiLCJ0YXJnZXRUeXBlTmFtZSIsInRhcmdldFR5cGUiLCJzdWJzdHIiLCJsYXN0SW5kZXhPZiIsImlzQm91bmQiLCJzb3VyY2VUeXBlIiwiaXNFbnRpdHlTZXQiLCJsYXN0SWR4IiwibGVuZ3RoIiwiaXNBbm5vdGF0aW9uUGF0aCIsInBhdGhTdHIiLCJwYXJzZVZhbHVlIiwicHJvcGVydHlWYWx1ZSIsInZhbHVlRlFOIiwidG9SZXNvbHZlIiwiU3RyaW5nIiwiSW50IiwiQm9vbCIsIkRlY2ltYWwiLCJEYXRlIiwiRW51bU1lbWJlciIsIlByb3BlcnR5UGF0aCIsIk5hdmlnYXRpb25Qcm9wZXJ0eVBhdGgiLCJhbm5vdGF0aW9uVGFyZ2V0IiwiQW5ub3RhdGlvblBhdGgiLCJhbm5vdGF0aW9uUGF0aCIsInB1c2giLCJwYXJzZVJlY29yZCIsIlJlY29yZCIsInBhcnNlQ29sbGVjdGlvbiIsIkNvbGxlY3Rpb24iLCJyZWNvcmREZWZpbml0aW9uIiwiY3VycmVudEZRTiIsImFubm90YXRpb25UZXJtIiwiJFR5cGUiLCJhbm5vdGF0aW9uQ29udGVudCIsInByb3BlcnR5VmFsdWVzIiwibmFtZSIsImhhc093blByb3BlcnR5IiwiQWN0aW9uVGFyZ2V0IiwiQWN0aW9uIiwiYXNzaWduIiwiY29sbGVjdGlvbkRlZmluaXRpb24iLCJwYXJlbnRGUU4iLCJwcm9wZXJ0eVBhdGgiLCJwcm9wZXJ0eUlkeCIsInBhdGhWYWx1ZSIsImFubm90YXRpb25JZHgiLCJhbm5vdGF0aW9uQ29sbGVjdGlvbkVsZW1lbnQiLCJuYXZQcm9wZXJ0eVBhdGgiLCJuYXZQcm9wSWR4IiwicmVjb3JkSWR4Iiwic3RyaW5nVmFsdWUiLCJFcnJvciIsImNvbnZlcnRBbm5vdGF0aW9uIiwicmVjb3JkIiwiY29sbGVjdGlvbiIsImNyZWF0ZVJlc29sdmVQYXRoRm4iLCJyZWxhdGl2ZVBhdGgiLCJyZXNvbHZlTmF2aWdhdGlvblByb3BlcnRpZXMiLCJhc3NvY2lhdGlvbnMiLCJuYXZQcm9wIiwicmVsYXRpb25zaGlwIiwidGFyZ2V0QXNzb2NpYXRpb24iLCJmaW5kIiwiYXNzb2NpYXRpb24iLCJhc3NvY2lhdGlvbkVuZCIsImVuZCIsInJvbGUiLCJ0b1JvbGUiLCJyZXNvbHZlUGF0aCIsImxpbmtBY3Rpb25zVG9FbnRpdHlUeXBlIiwic291cmNlRW50aXR5VHlwZSIsInJldHVybkVudGl0eVR5cGUiLCJyZXR1cm5UeXBlIiwibGlua0VudGl0eVR5cGVUb0VudGl0eVNldCIsImVudGl0eVR5cGVOYW1lIiwiY29udmVydFR5cGVzIiwidW5yZXNvbHZlZEFubm90YXRpb25zIiwidm9jQWxpYXMiLCJ2b2NUZXJtIiwiX2Fubm90YXRpb25zIiwidm9jVGVybVdpdGhRdWFsaWZpZXIiLCJiYXNlT2JqIiwiYW5ub3RhdGlvblBhcnQiLCJ0YXJnZXRTcGxpdCIsInNsaWNlIiwiY3VycmVudE9iaiIsInJlc29sdmVhYmxlIiwidGFyZ2V0U3RyIiwidmVyc2lvbiIsInRyYW5zZm9ybUNvbGxlY3Rpb25JdGVtVG9HZW5lcmljVHlwZSIsImNvbGxlY3Rpb25JdGVtIiwib3V0SXRlbSIsImNvbGxlY3Rpb25LZXkiLCJ0cmFuc2Zvcm1UZXJtVG9HZW5lcmljVHlwZSIsImJhc2VBbm5vdGF0aW9uIiwiQXJyYXkiLCJpc0FycmF5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O01BMEJNQSxJLEdBS0wsY0FBWUMsY0FBWixFQUE0Q0MsVUFBNUMsRUFBZ0U7QUFBQTs7QUFDL0QsU0FBS0MsSUFBTCxHQUFZRixjQUFjLENBQUNELElBQTNCO0FBQ0EsU0FBS0ksSUFBTCxHQUFZLE1BQVo7QUFDQSxTQUFLQyxPQUFMLEdBQWVILFVBQWY7QUFDQSxHOztBQU9GLFdBQVNJLE9BQVQsQ0FBaUJDLFVBQWpCLEVBQWdEQyxZQUFoRCxFQUFzRztBQUNyRyxRQUFJLENBQUNELFVBQVUsQ0FBQ0UsWUFBaEIsRUFBOEI7QUFDN0JGLE1BQUFBLFVBQVUsQ0FBQ0UsWUFBWCxHQUEwQkYsVUFBVSxDQUFDRyxNQUFYLENBQWtCLFVBQUNDLEdBQUQsRUFBaUNDLFNBQWpDLEVBQStDO0FBQzFGRCxRQUFBQSxHQUFHLENBQUND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QUNEO0FBQ0Q7O0FBRU0sV0FBU0UsMEJBQVQsQ0FBb0M5RyxVQUFwQyxFQUFvRjtBQUMxRixRQUFNK0csY0FBYyxHQUFHO0FBQ3RCN0csTUFBQUEsSUFBSSxFQUFFRixVQUFVLENBQUNFLElBREs7QUFFdEJDLE1BQUFBLFNBQVMsRUFBRUgsVUFBVSxDQUFDRztBQUZBLEtBQXZCOztBQUlBLFFBQUk2RyxLQUFLLENBQUNDLE9BQU4sQ0FBY2pILFVBQWQsQ0FBSixFQUErQjtBQUM5QjtBQUNBLDZDQUNJK0csY0FESjtBQUVDeEMsUUFBQUEsVUFBVSxFQUFFdkUsVUFBVSxDQUFDbkMsR0FBWCxDQUFlNkksb0NBQWY7QUFGYjtBQUlBLEtBTkQsTUFNTyxJQUFJMUcsVUFBVSxDQUFDcUQsY0FBWCxDQUEwQixPQUExQixDQUFKLEVBQXdDO0FBQzlDLDZDQUFZMEQsY0FBWjtBQUE0QnpDLFFBQUFBLE1BQU0sRUFBRW9DLG9DQUFvQyxDQUFDMUcsVUFBRDtBQUF4RTtBQUNBLEtBRk0sTUFFQTtBQUNOLGFBQU8rRyxjQUFQO0FBQ0E7QUFDRCIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0QW5ub3RhdGlvbiBhcyBFZG1Bbm5vdGF0aW9uLFxuXHRBbm5vdGF0aW9uTGlzdCxcblx0QW5ub3RhdGlvblJlY29yZCxcblx0QW5ub3RhdGlvblRlcm0sXG5cdENvbXBsZXhUeXBlLFxuXHRDb252ZXJ0ZXJPdXRwdXQsXG5cdEV4cHJlc3Npb24sXG5cdFBhcnNlck91dHB1dCxcblx0UGF0aEV4cHJlc3Npb24sXG5cdFByb3BlcnR5UGF0aCxcblx0UHJvcGVydHlWYWx1ZSxcblx0QW5ub3RhdGlvblBhdGhFeHByZXNzaW9uLFxuXHROYXZpZ2F0aW9uUHJvcGVydHlQYXRoRXhwcmVzc2lvbixcblx0UHJvcGVydHlQYXRoRXhwcmVzc2lvblxufSBmcm9tIFwiQHNhcC11eC92b2NhYnVsYXJpZXMtdHlwZXNcIjtcbmltcG9ydCB7IEFzc29jaWF0aW9uLCBSZWZlcmVuY2UgfSBmcm9tIFwiQHNhcC11eC92b2NhYnVsYXJpZXMtdHlwZXMvZGlzdC9QYXJzZXJcIjtcbmltcG9ydCB7XG5cdEFubm90YXRpb24sXG5cdEVudGl0eVR5cGUsXG5cdFY0TmF2aWdhdGlvblByb3BlcnR5LFxuXHRWMk5hdmlnYXRpb25Qcm9wZXJ0eSxcblx0QWN0aW9uLFxuXHRFbnRpdHlTZXRcbn0gZnJvbSBcIkBzYXAtdXgvdm9jYWJ1bGFyaWVzLXR5cGVzL2Rpc3QvQ29udmVydGVyXCI7XG5cbmNsYXNzIFBhdGgge1xuXHRwYXRoOiBzdHJpbmc7XG5cdCR0YXJnZXQ6IHN0cmluZztcblx0dHlwZTogc3RyaW5nO1xuXG5cdGNvbnN0cnVjdG9yKHBhdGhFeHByZXNzaW9uOiBQYXRoRXhwcmVzc2lvbiwgdGFyZ2V0TmFtZTogc3RyaW5nKSB7XG5cdFx0dGhpcy5wYXRoID0gcGF0aEV4cHJlc3Npb24uUGF0aDtcblx0XHR0aGlzLnR5cGUgPSBcIlBhdGhcIjtcblx0XHR0aGlzLiR0YXJnZXQgPSB0YXJnZXROYW1lO1xuXHR9XG59XG5cbnR5cGUgUmVmZXJlbmNlc1dpdGhNYXAgPSBSZWZlcmVuY2VbXSAmIHtcblx0cmVmZXJlbmNlTWFwPzogUmVjb3JkPHN0cmluZywgUmVmZXJlbmNlPjtcbn07XG5cbmZ1bmN0aW9uIHVuYWxpYXMocmVmZXJlbmNlczogUmVmZXJlbmNlc1dpdGhNYXAsIGFsaWFzZWRWYWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcblx0aWYgKCFyZWZlcmVuY2VzLnJlZmVyZW5jZU1hcCkge1xuXHRcdHJlZmVyZW5jZXMucmVmZXJlbmNlTWFwID0gcmVmZXJlbmNlcy5yZWR1Y2UoKG1hcDogUmVjb3JkPHN0cmluZywgUmVmZXJlbmNlPiwgcmVmZXJlbmNlKSA9PiB7XG5cdFx0XHRtYXBbcmVmZXJlbmNlLmFsaWFzXSA9IHJlZmVyZW5jZTtcblx0XHRcdHJldHVybiBtYXA7XG5cdFx0fSwge30pO1xuXHR9XG5cdGlmICghYWxpYXNlZFZhbHVlKSB7XG5cdFx0cmV0dXJuIGFsaWFzZWRWYWx1ZTtcblx0fVxuXHRjb25zdCBbYWxpYXMsIHZhbHVlXSA9IGFsaWFzZWRWYWx1ZS5zcGxpdChcIi5cIik7XG5cdGNvbnN0IHJlZmVyZW5jZSA9IHJlZmVyZW5jZXMucmVmZXJlbmNlTWFwW2FsaWFzXTtcblx0aWYgKHJlZmVyZW5jZSkge1xuXHRcdHJldHVybiBgJHtyZWZlcmVuY2UubmFtZXNwYWNlfS4ke3ZhbHVlfWA7XG5cdH0gZWxzZSB7XG5cdFx0Ly8gVHJ5IHRvIHNlZSBpZiBpdCdzIGFuIGFubm90YXRpb24gUGF0aCBsaWtlIHRvX1NhbGVzT3JkZXIvQFVJLkxpbmVJdGVtXG5cdFx0aWYgKGFsaWFzZWRWYWx1ZS5pbmRleE9mKFwiQFwiKSAhPT0gLTEpIHtcblx0XHRcdGNvbnN0IFtwcmVBbGlhcywgcG9zdEFsaWFzXSA9IGFsaWFzZWRWYWx1ZS5zcGxpdChcIkBcIik7XG5cdFx0XHRyZXR1cm4gYCR7cHJlQWxpYXN9QCR7dW5hbGlhcyhyZWZlcmVuY2VzLCBwb3N0QWxpYXMpfWA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBhbGlhc2VkVmFsdWU7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGJ1aWxkT2JqZWN0TWFwKHBhcnNlck91dHB1dDogUGFyc2VyT3V0cHV0KTogUmVjb3JkPHN0cmluZywgYW55PiB7XG5cdGNvbnN0IG9iamVjdE1hcDogYW55ID0ge307XG5cdGlmIChwYXJzZXJPdXRwdXQuc2NoZW1hLmVudGl0eUNvbnRhaW5lciAmJiBwYXJzZXJPdXRwdXQuc2NoZW1hLmVudGl0eUNvbnRhaW5lci5mdWxseVF1YWxpZmllZE5hbWUpIHtcblx0XHRvYmplY3RNYXBbcGFyc2VyT3V0cHV0LnNjaGVtYS5lbnRpdHlDb250YWluZXIuZnVsbHlRdWFsaWZpZWROYW1lXSA9IHBhcnNlck91dHB1dC5zY2hlbWEuZW50aXR5Q29udGFpbmVyO1xuXHR9XG5cdHBhcnNlck91dHB1dC5zY2hlbWEuZW50aXR5U2V0cy5mb3JFYWNoKGVudGl0eVNldCA9PiB7XG5cdFx0b2JqZWN0TWFwW2VudGl0eVNldC5mdWxseVF1YWxpZmllZE5hbWVdID0gZW50aXR5U2V0O1xuXHR9KTtcblx0cGFyc2VyT3V0cHV0LnNjaGVtYS5hY3Rpb25zLmZvckVhY2goYWN0aW9uID0+IHtcblx0XHRvYmplY3RNYXBbYWN0aW9uLmZ1bGx5UXVhbGlmaWVkTmFtZV0gPSBhY3Rpb247XG5cdFx0YWN0aW9uLnBhcmFtZXRlcnMuZm9yRWFjaChwYXJhbWV0ZXIgPT4ge1xuXHRcdFx0b2JqZWN0TWFwW3BhcmFtZXRlci5mdWxseVF1YWxpZmllZE5hbWVdID0gcGFyYW1ldGVyO1xuXHRcdH0pO1xuXHR9KTtcblx0cGFyc2VyT3V0cHV0LnNjaGVtYS5lbnRpdHlUeXBlcy5mb3JFYWNoKGVudGl0eVR5cGUgPT4ge1xuXHRcdG9iamVjdE1hcFtlbnRpdHlUeXBlLmZ1bGx5UXVhbGlmaWVkTmFtZV0gPSBlbnRpdHlUeXBlO1xuXHRcdGVudGl0eVR5cGUuZW50aXR5UHJvcGVydGllcy5mb3JFYWNoKHByb3BlcnR5ID0+IHtcblx0XHRcdG9iamVjdE1hcFtwcm9wZXJ0eS5mdWxseVF1YWxpZmllZE5hbWVdID0gcHJvcGVydHk7XG5cdFx0fSk7XG5cdFx0ZW50aXR5VHlwZS5uYXZpZ2F0aW9uUHJvcGVydGllcy5mb3JFYWNoKG5hdlByb3BlcnR5ID0+IHtcblx0XHRcdG9iamVjdE1hcFtuYXZQcm9wZXJ0eS5mdWxseVF1YWxpZmllZE5hbWVdID0gbmF2UHJvcGVydHk7XG5cdFx0fSk7XG5cdH0pO1xuXHRPYmplY3Qua2V5cyhwYXJzZXJPdXRwdXQuc2NoZW1hLmFubm90YXRpb25zKS5mb3JFYWNoKGFubm90YXRpb25Tb3VyY2UgPT4ge1xuXHRcdHBhcnNlck91dHB1dC5zY2hlbWEuYW5ub3RhdGlvbnNbYW5ub3RhdGlvblNvdXJjZV0uZm9yRWFjaChhbm5vdGF0aW9uTGlzdCA9PiB7XG5cdFx0XHRjb25zdCBjdXJyZW50VGFyZ2V0TmFtZSA9IHVuYWxpYXMocGFyc2VyT3V0cHV0LnJlZmVyZW5jZXMsIGFubm90YXRpb25MaXN0LnRhcmdldCk7XG5cdFx0XHRhbm5vdGF0aW9uTGlzdC5hbm5vdGF0aW9ucy5mb3JFYWNoKGFubm90YXRpb24gPT4ge1xuXHRcdFx0XHRsZXQgYW5ub3RhdGlvbkZRTiA9IGAvJHtjdXJyZW50VGFyZ2V0TmFtZX1AJHt1bmFsaWFzKHBhcnNlck91dHB1dC5yZWZlcmVuY2VzLCBhbm5vdGF0aW9uLnRlcm0pfWA7XG5cdFx0XHRcdGlmIChhbm5vdGF0aW9uLnF1YWxpZmllcikge1xuXHRcdFx0XHRcdGFubm90YXRpb25GUU4gKz0gYCMke2Fubm90YXRpb24ucXVhbGlmaWVyfWA7XG5cdFx0XHRcdH1cblx0XHRcdFx0b2JqZWN0TWFwW2Fubm90YXRpb25GUU5dID0gYW5ub3RhdGlvbjtcblx0XHRcdFx0KGFubm90YXRpb24gYXMgQW5ub3RhdGlvbikuZnVsbHlRdWFsaWZpZWROYW1lID0gYW5ub3RhdGlvbkZRTjtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9KTtcblx0cmV0dXJuIG9iamVjdE1hcDtcbn1cblxuZnVuY3Rpb24gY29tYmluZVBhdGgoY3VycmVudFRhcmdldDogc3RyaW5nLCBwYXRoOiBzdHJpbmcpOiBzdHJpbmcge1xuXHRpZiAocGF0aC5zdGFydHNXaXRoKFwiQFwiKSkge1xuXHRcdHJldHVybiBjdXJyZW50VGFyZ2V0ICsgcGF0aDtcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gY3VycmVudFRhcmdldCArIFwiL1wiICsgcGF0aDtcblx0fVxufVxuXG5mdW5jdGlvbiByZXNvbHZlVGFyZ2V0KG9iamVjdE1hcDogYW55LCBjdXJyZW50VGFyZ2V0OiBhbnksIHBhdGg6IHN0cmluZywgcGF0aE9ubHk6IGJvb2xlYW4gPSBmYWxzZSkge1xuXHRpZiAoIXBhdGgpIHtcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG5cdHBhdGggPSBjb21iaW5lUGF0aChjdXJyZW50VGFyZ2V0LmZ1bGx5UXVhbGlmaWVkTmFtZSwgcGF0aCk7XG5cblx0Y29uc3QgcGF0aFNwbGl0ID0gcGF0aC5zcGxpdChcIi9cIik7XG5cdGxldCBjdXJyZW50UGF0aCA9IHBhdGg7XG5cdGNvbnN0IHRhcmdldCA9IHBhdGhTcGxpdC5yZWR1Y2UoKGN1cnJlbnRWYWx1ZTogYW55LCBwYXRoUGFydCkgPT4ge1xuXHRcdGlmICghY3VycmVudFZhbHVlKSB7XG5cdFx0XHRjdXJyZW50UGF0aCA9IHBhdGhQYXJ0O1xuXHRcdH0gZWxzZSBpZiAoY3VycmVudFZhbHVlLl90eXBlID09PSBcIkVudGl0eVNldFwiICYmIGN1cnJlbnRWYWx1ZS5lbnRpdHlUeXBlKSB7XG5cdFx0XHRjdXJyZW50UGF0aCA9IGNvbWJpbmVQYXRoKGN1cnJlbnRWYWx1ZS5lbnRpdHlUeXBlLCBwYXRoUGFydCk7XG5cdFx0fSBlbHNlIGlmIChjdXJyZW50VmFsdWUuX3R5cGUgPT09IFwiTmF2aWdhdGlvblByb3BlcnR5XCIgJiYgY3VycmVudFZhbHVlLnRhcmdldFR5cGVOYW1lKSB7XG5cdFx0XHRjdXJyZW50UGF0aCA9IGNvbWJpbmVQYXRoKGN1cnJlbnRWYWx1ZS50YXJnZXRUeXBlTmFtZSwgcGF0aFBhcnQpO1xuXHRcdH0gZWxzZSBpZiAoY3VycmVudFZhbHVlLl90eXBlID09PSBcIk5hdmlnYXRpb25Qcm9wZXJ0eVwiICYmIGN1cnJlbnRWYWx1ZS50YXJnZXRUeXBlKSB7XG5cdFx0XHRjdXJyZW50UGF0aCA9IGNvbWJpbmVQYXRoKGN1cnJlbnRWYWx1ZS50YXJnZXRUeXBlLmZ1bGx5UXVhbGlmaWVkTmFtZSwgcGF0aFBhcnQpO1xuXHRcdH0gZWxzZSBpZiAoY3VycmVudFZhbHVlLl90eXBlID09PSBcIlByb3BlcnR5XCIpIHtcblx0XHRcdGN1cnJlbnRQYXRoID0gY29tYmluZVBhdGgoXG5cdFx0XHRcdGN1cnJlbnRUYXJnZXQuZnVsbHlRdWFsaWZpZWROYW1lLnN1YnN0cigwLCBjdXJyZW50VGFyZ2V0LmZ1bGx5UXVhbGlmaWVkTmFtZS5sYXN0SW5kZXhPZihcIi9cIikpLFxuXHRcdFx0XHRwYXRoUGFydFxuXHRcdFx0KTtcblx0XHR9IGVsc2UgaWYgKGN1cnJlbnRWYWx1ZS5fdHlwZSA9PT0gXCJBY3Rpb25cIiAmJiBjdXJyZW50VmFsdWUuaXNCb3VuZCkge1xuXHRcdFx0Y3VycmVudFBhdGggPSBjb21iaW5lUGF0aChjdXJyZW50VmFsdWUuZnVsbHlRdWFsaWZpZWROYW1lLCBwYXRoUGFydCk7XG5cdFx0XHRpZiAoIW9iamVjdE1hcFtjdXJyZW50UGF0aF0pIHtcblx0XHRcdFx0Y3VycmVudFBhdGggPSBjb21iaW5lUGF0aChjdXJyZW50VmFsdWUuc291cmNlVHlwZSwgcGF0aFBhcnQpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoY3VycmVudFZhbHVlLl90eXBlID09PSBcIkFjdGlvblBhcmFtZXRlclwiICYmIGN1cnJlbnRWYWx1ZS5pc0VudGl0eVNldCkge1xuXHRcdFx0Y3VycmVudFBhdGggPSBjb21iaW5lUGF0aChjdXJyZW50VmFsdWUudHlwZSwgcGF0aFBhcnQpO1xuXHRcdH0gZWxzZSBpZiAoY3VycmVudFZhbHVlLl90eXBlID09PSBcIkFjdGlvblBhcmFtZXRlclwiICYmICFjdXJyZW50VmFsdWUuaXNFbnRpdHlTZXQpIHtcblx0XHRcdGN1cnJlbnRQYXRoID0gY29tYmluZVBhdGgoXG5cdFx0XHRcdGN1cnJlbnRUYXJnZXQuZnVsbHlRdWFsaWZpZWROYW1lLnN1YnN0cigwLCBjdXJyZW50VGFyZ2V0LmZ1bGx5UXVhbGlmaWVkTmFtZS5sYXN0SW5kZXhPZihcIi9cIikpLFxuXHRcdFx0XHRwYXRoUGFydFxuXHRcdFx0KTtcblx0XHRcdGlmICghb2JqZWN0TWFwW2N1cnJlbnRQYXRoXSkge1xuXHRcdFx0XHRsZXQgbGFzdElkeCA9IGN1cnJlbnRUYXJnZXQuZnVsbHlRdWFsaWZpZWROYW1lLmxhc3RJbmRleE9mKFwiL1wiKTtcblx0XHRcdFx0aWYgKGxhc3RJZHggPT09IC0xKSB7XG5cdFx0XHRcdFx0bGFzdElkeCA9IGN1cnJlbnRUYXJnZXQuZnVsbHlRdWFsaWZpZWROYW1lLmxlbmd0aDtcblx0XHRcdFx0fVxuXHRcdFx0XHRjdXJyZW50UGF0aCA9IGNvbWJpbmVQYXRoKFxuXHRcdFx0XHRcdChvYmplY3RNYXBbY3VycmVudFRhcmdldC5mdWxseVF1YWxpZmllZE5hbWUuc3Vic3RyKDAsIGxhc3RJZHgpXSBhcyBBY3Rpb24pLnNvdXJjZVR5cGUsXG5cdFx0XHRcdFx0cGF0aFBhcnRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VycmVudFBhdGggPSBjb21iaW5lUGF0aChjdXJyZW50VmFsdWUuZnVsbHlRdWFsaWZpZWROYW1lLCBwYXRoUGFydCk7XG5cdFx0XHRpZiAoY3VycmVudFZhbHVlW3BhdGhQYXJ0XSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHJldHVybiBjdXJyZW50VmFsdWVbcGF0aFBhcnRdO1xuXHRcdFx0fSBlbHNlIGlmIChwYXRoUGFydCA9PT0gXCIkQW5ub3RhdGlvblBhdGhcIiAmJiBjdXJyZW50VmFsdWUuJHRhcmdldCkge1xuXHRcdFx0XHRyZXR1cm4gY3VycmVudFZhbHVlLiR0YXJnZXQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBvYmplY3RNYXBbY3VycmVudFBhdGhdO1xuXHR9LCBudWxsKTtcblx0aWYgKCF0YXJnZXQpIHtcblx0XHQvLyBjb25zb2xlLmxvZyhcIk1pc3NpbmcgdGFyZ2V0IFwiICsgcGF0aCk7XG5cdH1cblx0aWYgKHBhdGhPbmx5KSB7XG5cdFx0cmV0dXJuIGN1cnJlbnRQYXRoO1xuXHR9XG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIGlzQW5ub3RhdGlvblBhdGgocGF0aFN0cjogc3RyaW5nKTogYm9vbGVhbiB7XG5cdHJldHVybiBwYXRoU3RyLmluZGV4T2YoXCJAXCIpICE9PSAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VWYWx1ZShcblx0cHJvcGVydHlWYWx1ZTogRXhwcmVzc2lvbixcblx0dmFsdWVGUU46IHN0cmluZyxcblx0cGFyc2VyT3V0cHV0OiBQYXJzZXJPdXRwdXQsXG5cdGN1cnJlbnRUYXJnZXQ6IGFueSxcblx0b2JqZWN0TWFwOiBhbnksXG5cdHRvUmVzb2x2ZTogUmVzb2x2ZWFibGVbXVxuKSB7XG5cdGlmIChwcm9wZXJ0eVZhbHVlID09PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG5cdHN3aXRjaCAocHJvcGVydHlWYWx1ZS50eXBlKSB7XG5cdFx0Y2FzZSBcIlN0cmluZ1wiOlxuXHRcdFx0cmV0dXJuIHByb3BlcnR5VmFsdWUuU3RyaW5nO1xuXHRcdGNhc2UgXCJJbnRcIjpcblx0XHRcdHJldHVybiBwcm9wZXJ0eVZhbHVlLkludDtcblx0XHRjYXNlIFwiQm9vbFwiOlxuXHRcdFx0cmV0dXJuIHByb3BlcnR5VmFsdWUuQm9vbDtcblx0XHRjYXNlIFwiRGVjaW1hbFwiOlxuXHRcdFx0cmV0dXJuIHByb3BlcnR5VmFsdWUuRGVjaW1hbDtcblx0XHRjYXNlIFwiRGF0ZVwiOlxuXHRcdFx0cmV0dXJuIHByb3BlcnR5VmFsdWUuRGF0ZTtcblx0XHRjYXNlIFwiRW51bU1lbWJlclwiOlxuXHRcdFx0cmV0dXJuIHByb3BlcnR5VmFsdWUuRW51bU1lbWJlcjtcblx0XHRjYXNlIFwiUHJvcGVydHlQYXRoXCI6XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0eXBlOiBcIlByb3BlcnR5UGF0aFwiLFxuXHRcdFx0XHR2YWx1ZTogcHJvcGVydHlWYWx1ZS5Qcm9wZXJ0eVBhdGgsXG5cdFx0XHRcdGZ1bGx5UXVhbGlmaWVkTmFtZTogdmFsdWVGUU4sXG5cdFx0XHRcdCR0YXJnZXQ6IHJlc29sdmVUYXJnZXQob2JqZWN0TWFwLCBjdXJyZW50VGFyZ2V0LCBwcm9wZXJ0eVZhbHVlLlByb3BlcnR5UGF0aClcblx0XHRcdH07XG5cdFx0Y2FzZSBcIk5hdmlnYXRpb25Qcm9wZXJ0eVBhdGhcIjpcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHR5cGU6IFwiTmF2aWdhdGlvblByb3BlcnR5UGF0aFwiLFxuXHRcdFx0XHR2YWx1ZTogcHJvcGVydHlWYWx1ZS5OYXZpZ2F0aW9uUHJvcGVydHlQYXRoLFxuXHRcdFx0XHRmdWxseVF1YWxpZmllZE5hbWU6IHZhbHVlRlFOLFxuXHRcdFx0XHQkdGFyZ2V0OiByZXNvbHZlVGFyZ2V0KG9iamVjdE1hcCwgY3VycmVudFRhcmdldCwgcHJvcGVydHlWYWx1ZS5OYXZpZ2F0aW9uUHJvcGVydHlQYXRoKVxuXHRcdFx0fTtcblx0XHRjYXNlIFwiQW5ub3RhdGlvblBhdGhcIjpcblx0XHRcdGNvbnN0IGFubm90YXRpb25UYXJnZXQgPSByZXNvbHZlVGFyZ2V0KFxuXHRcdFx0XHRvYmplY3RNYXAsXG5cdFx0XHRcdGN1cnJlbnRUYXJnZXQsXG5cdFx0XHRcdHVuYWxpYXMocGFyc2VyT3V0cHV0LnJlZmVyZW5jZXMsIHByb3BlcnR5VmFsdWUuQW5ub3RhdGlvblBhdGgpIGFzIHN0cmluZyxcblx0XHRcdFx0dHJ1ZVxuXHRcdFx0KTtcblx0XHRcdGNvbnN0IGFubm90YXRpb25QYXRoID0ge1xuXHRcdFx0XHR0eXBlOiBcIkFubm90YXRpb25QYXRoXCIsXG5cdFx0XHRcdHZhbHVlOiBwcm9wZXJ0eVZhbHVlLkFubm90YXRpb25QYXRoLFxuXHRcdFx0XHRmdWxseVF1YWxpZmllZE5hbWU6IHZhbHVlRlFOLFxuXHRcdFx0XHQkdGFyZ2V0OiBhbm5vdGF0aW9uVGFyZ2V0XG5cdFx0XHR9O1xuXHRcdFx0dG9SZXNvbHZlLnB1c2goYW5ub3RhdGlvblBhdGgpO1xuXHRcdFx0cmV0dXJuIGFubm90YXRpb25QYXRoO1xuXHRcdGNhc2UgXCJQYXRoXCI6XG5cdFx0XHRpZiAoaXNBbm5vdGF0aW9uUGF0aChwcm9wZXJ0eVZhbHVlLlBhdGgpKSB7XG5cdFx0XHRcdC8vIElmIGl0J3MgYW4gYW5udG9hdGlvbiB0aGF0IHdlIGNhbiByZXNvbHZlLCByZXNvbHZlIGl0ICFcblx0XHRcdFx0Y29uc3QgJHRhcmdldCA9IHJlc29sdmVUYXJnZXQob2JqZWN0TWFwLCBjdXJyZW50VGFyZ2V0LCBwcm9wZXJ0eVZhbHVlLlBhdGgpO1xuXHRcdFx0XHRpZiAoJHRhcmdldCkge1xuXHRcdFx0XHRcdHJldHVybiAkdGFyZ2V0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRjb25zdCAkdGFyZ2V0ID0gcmVzb2x2ZVRhcmdldChvYmplY3RNYXAsIGN1cnJlbnRUYXJnZXQsIHByb3BlcnR5VmFsdWUuUGF0aCwgdHJ1ZSk7XG5cdFx0XHRjb25zdCBwYXRoID0gbmV3IFBhdGgocHJvcGVydHlWYWx1ZSwgJHRhcmdldCk7XG5cdFx0XHR0b1Jlc29sdmUucHVzaChwYXRoKTtcblx0XHRcdHJldHVybiBwYXRoO1xuXG5cdFx0Y2FzZSBcIlJlY29yZFwiOlxuXHRcdFx0cmV0dXJuIHBhcnNlUmVjb3JkKHByb3BlcnR5VmFsdWUuUmVjb3JkLCB2YWx1ZUZRTiwgcGFyc2VyT3V0cHV0LCBjdXJyZW50VGFyZ2V0LCBvYmplY3RNYXAsIHRvUmVzb2x2ZSk7XG5cdFx0Y2FzZSBcIkNvbGxlY3Rpb25cIjpcblx0XHRcdHJldHVybiBwYXJzZUNvbGxlY3Rpb24oXG5cdFx0XHRcdHByb3BlcnR5VmFsdWUuQ29sbGVjdGlvbixcblx0XHRcdFx0dmFsdWVGUU4sXG5cdFx0XHRcdHBhcnNlck91dHB1dCxcblx0XHRcdFx0Y3VycmVudFRhcmdldCxcblx0XHRcdFx0b2JqZWN0TWFwLFxuXHRcdFx0XHR0b1Jlc29sdmVcblx0XHRcdCk7XG5cdFx0Y2FzZSBcIkFwcGx5XCI6XG5cdFx0XHRyZXR1cm4gcHJvcGVydHlWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBwYXJzZVJlY29yZChcblx0cmVjb3JkRGVmaW5pdGlvbjogQW5ub3RhdGlvblJlY29yZCxcblx0Y3VycmVudEZRTjogc3RyaW5nLFxuXHRwYXJzZXJPdXRwdXQ6IFBhcnNlck91dHB1dCxcblx0Y3VycmVudFRhcmdldDogYW55LFxuXHRvYmplY3RNYXA6IGFueSxcblx0dG9SZXNvbHZlOiBSZXNvbHZlYWJsZVtdXG4pIHtcblx0Y29uc3QgYW5ub3RhdGlvblRlcm06IGFueSA9IHtcblx0XHQkVHlwZTogdW5hbGlhcyhwYXJzZXJPdXRwdXQucmVmZXJlbmNlcywgcmVjb3JkRGVmaW5pdGlvbi50eXBlKSxcblx0XHRmdWxseVF1YWxpZmllZE5hbWU6IGN1cnJlbnRGUU5cblx0fTtcblx0Y29uc3QgYW5ub3RhdGlvbkNvbnRlbnQ6IGFueSA9IHt9O1xuXHRyZWNvcmREZWZpbml0aW9uLnByb3BlcnR5VmFsdWVzLmZvckVhY2goKHByb3BlcnR5VmFsdWU6IFByb3BlcnR5VmFsdWUpID0+IHtcblx0XHRhbm5vdGF0aW9uQ29udGVudFtwcm9wZXJ0eVZhbHVlLm5hbWVdID0gcGFyc2VWYWx1ZShcblx0XHRcdHByb3BlcnR5VmFsdWUudmFsdWUsXG5cdFx0XHRgJHtjdXJyZW50RlFOfS8ke3Byb3BlcnR5VmFsdWUubmFtZX1gLFxuXHRcdFx0cGFyc2VyT3V0cHV0LFxuXHRcdFx0Y3VycmVudFRhcmdldCxcblx0XHRcdG9iamVjdE1hcCxcblx0XHRcdHRvUmVzb2x2ZVxuXHRcdCk7XG5cdFx0aWYgKFxuXHRcdFx0YW5ub3RhdGlvbkNvbnRlbnQuaGFzT3duUHJvcGVydHkoXCJBY3Rpb25cIikgJiZcblx0XHRcdChhbm5vdGF0aW9uVGVybS4kVHlwZSA9PT0gXCJjb20uc2FwLnZvY2FidWxhcmllcy5VSS52MS5EYXRhRmllbGRGb3JBY3Rpb25cIiB8fFxuXHRcdFx0XHRhbm5vdGF0aW9uVGVybS4kVHlwZSA9PT0gXCJjb20uc2FwLnZvY2FidWxhcmllcy5VSS52MS5EYXRhRmllbGRXaXRoQWN0aW9uXCIpXG5cdFx0KSB7XG5cdFx0XHRpZiAoY3VycmVudFRhcmdldC5hY3Rpb25zKSB7XG5cdFx0XHRcdGFubm90YXRpb25Db250ZW50LkFjdGlvblRhcmdldCA9IGN1cnJlbnRUYXJnZXQuYWN0aW9uc1thbm5vdGF0aW9uQ29udGVudC5BY3Rpb25dO1xuXHRcdFx0XHRpZiAoIWFubm90YXRpb25Db250ZW50LkFjdGlvblRhcmdldCkge1xuXHRcdFx0XHRcdC8vIEFkZCB0byBkaWFnbm9zdGljcyBkZWJ1Z2dlcjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cdHJldHVybiBPYmplY3QuYXNzaWduKGFubm90YXRpb25UZXJtLCBhbm5vdGF0aW9uQ29udGVudCk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlQ29sbGVjdGlvbihcblx0Y29sbGVjdGlvbkRlZmluaXRpb246IGFueVtdLFxuXHRwYXJlbnRGUU46IHN0cmluZyxcblx0cGFyc2VyT3V0cHV0OiBQYXJzZXJPdXRwdXQsXG5cdGN1cnJlbnRUYXJnZXQ6IGFueSxcblx0b2JqZWN0TWFwOiBhbnksXG5cdHRvUmVzb2x2ZTogUmVzb2x2ZWFibGVbXVxuKSB7XG5cdHN3aXRjaCAoKGNvbGxlY3Rpb25EZWZpbml0aW9uIGFzIGFueSkudHlwZSkge1xuXHRcdGNhc2UgXCJQcm9wZXJ0eVBhdGhcIjpcblx0XHRcdHJldHVybiBjb2xsZWN0aW9uRGVmaW5pdGlvbi5tYXAoKHByb3BlcnR5UGF0aCwgcHJvcGVydHlJZHgpID0+IHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR0eXBlOiBcIlByb3BlcnR5UGF0aFwiLFxuXHRcdFx0XHRcdHZhbHVlOiBwcm9wZXJ0eVBhdGguUHJvcGVydHlQYXRoLFxuXHRcdFx0XHRcdGZ1bGx5UXVhbGlmaWVkTmFtZTogYCR7cGFyZW50RlFOfS8ke3Byb3BlcnR5SWR4fWAsXG5cdFx0XHRcdFx0JHRhcmdldDogcmVzb2x2ZVRhcmdldChvYmplY3RNYXAsIGN1cnJlbnRUYXJnZXQsIHByb3BlcnR5UGF0aC5Qcm9wZXJ0eVBhdGgpXG5cdFx0XHRcdH07XG5cdFx0XHR9KTtcblx0XHRjYXNlIFwiUGF0aFwiOlxuXHRcdFx0cmV0dXJuIGNvbGxlY3Rpb25EZWZpbml0aW9uLm1hcChwYXRoVmFsdWUgPT4ge1xuXHRcdFx0XHRpZiAoaXNBbm5vdGF0aW9uUGF0aChwYXRoVmFsdWUuUGF0aCkpIHtcblx0XHRcdFx0XHQvLyBJZiBpdCdzIGFuIGFubnRvYXRpb24gdGhhdCB3ZSBjYW4gcmVzb2x2ZSwgcmVzb2x2ZSBpdCAhXG5cdFx0XHRcdFx0Y29uc3QgJHRhcmdldCA9IHJlc29sdmVUYXJnZXQob2JqZWN0TWFwLCBjdXJyZW50VGFyZ2V0LCBwYXRoVmFsdWUuUGF0aCk7XG5cdFx0XHRcdFx0aWYgKCR0YXJnZXQpIHtcblx0XHRcdFx0XHRcdHJldHVybiAkdGFyZ2V0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRjb25zdCAkdGFyZ2V0ID0gcmVzb2x2ZVRhcmdldChvYmplY3RNYXAsIGN1cnJlbnRUYXJnZXQsIHBhdGhWYWx1ZS5QYXRoLCB0cnVlKTtcblx0XHRcdFx0Y29uc3QgcGF0aCA9IG5ldyBQYXRoKHBhdGhWYWx1ZSwgJHRhcmdldCk7XG5cdFx0XHRcdHRvUmVzb2x2ZS5wdXNoKHBhdGgpO1xuXHRcdFx0XHRyZXR1cm4gcGF0aDtcblx0XHRcdH0pO1xuXHRcdGNhc2UgXCJBbm5vdGF0aW9uUGF0aFwiOlxuXHRcdFx0cmV0dXJuIGNvbGxlY3Rpb25EZWZpbml0aW9uLm1hcCgoYW5ub3RhdGlvblBhdGgsIGFubm90YXRpb25JZHgpID0+IHtcblx0XHRcdFx0Y29uc3QgYW5ub3RhdGlvblRhcmdldCA9IHJlc29sdmVUYXJnZXQob2JqZWN0TWFwLCBjdXJyZW50VGFyZ2V0LCBhbm5vdGF0aW9uUGF0aC5Bbm5vdGF0aW9uUGF0aCwgdHJ1ZSk7XG5cdFx0XHRcdGNvbnN0IGFubm90YXRpb25Db2xsZWN0aW9uRWxlbWVudCA9IHtcblx0XHRcdFx0XHR0eXBlOiBcIkFubm90YXRpb25QYXRoXCIsXG5cdFx0XHRcdFx0dmFsdWU6IGFubm90YXRpb25QYXRoLkFubm90YXRpb25QYXRoLFxuXHRcdFx0XHRcdGZ1bGx5UXVhbGlmaWVkTmFtZTogYCR7cGFyZW50RlFOfS8ke2Fubm90YXRpb25JZHh9YCxcblx0XHRcdFx0XHQkdGFyZ2V0OiBhbm5vdGF0aW9uVGFyZ2V0XG5cdFx0XHRcdH07XG5cdFx0XHRcdHRvUmVzb2x2ZS5wdXNoKGFubm90YXRpb25Db2xsZWN0aW9uRWxlbWVudCk7XG5cdFx0XHRcdHJldHVybiBhbm5vdGF0aW9uQ29sbGVjdGlvbkVsZW1lbnQ7XG5cdFx0XHR9KTtcblx0XHRjYXNlIFwiTmF2aWdhdGlvblByb3BlcnR5UGF0aFwiOlxuXHRcdFx0cmV0dXJuIGNvbGxlY3Rpb25EZWZpbml0aW9uLm1hcCgobmF2UHJvcGVydHlQYXRoLCBuYXZQcm9wSWR4KSA9PiB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0dHlwZTogXCJOYXZpZ2F0aW9uUHJvcGVydHlQYXRoXCIsXG5cdFx0XHRcdFx0dmFsdWU6IG5hdlByb3BlcnR5UGF0aC5OYXZpZ2F0aW9uUHJvcGVydHlQYXRoLFxuXHRcdFx0XHRcdGZ1bGx5UXVhbGlmaWVkTmFtZTogYCR7cGFyZW50RlFOfS8ke25hdlByb3BJZHh9YCxcblx0XHRcdFx0XHQkdGFyZ2V0OiByZXNvbHZlVGFyZ2V0KG9iamVjdE1hcCwgY3VycmVudFRhcmdldCwgbmF2UHJvcGVydHlQYXRoLk5hdmlnYXRpb25Qcm9wZXJ0eVBhdGgpXG5cdFx0XHRcdH07XG5cdFx0XHR9KTtcblx0XHRjYXNlIFwiUmVjb3JkXCI6XG5cdFx0XHRyZXR1cm4gY29sbGVjdGlvbkRlZmluaXRpb24ubWFwKChyZWNvcmREZWZpbml0aW9uLCByZWNvcmRJZHgpID0+IHtcblx0XHRcdFx0cmV0dXJuIHBhcnNlUmVjb3JkKFxuXHRcdFx0XHRcdHJlY29yZERlZmluaXRpb24sXG5cdFx0XHRcdFx0YCR7cGFyZW50RlFOfS8ke3JlY29yZElkeH1gLFxuXHRcdFx0XHRcdHBhcnNlck91dHB1dCxcblx0XHRcdFx0XHRjdXJyZW50VGFyZ2V0LFxuXHRcdFx0XHRcdG9iamVjdE1hcCxcblx0XHRcdFx0XHR0b1Jlc29sdmVcblx0XHRcdFx0KTtcblx0XHRcdH0pO1xuXHRcdGNhc2UgXCJTdHJpbmdcIjpcblx0XHRcdHJldHVybiBjb2xsZWN0aW9uRGVmaW5pdGlvbi5tYXAoc3RyaW5nVmFsdWUgPT4ge1xuXHRcdFx0XHRyZXR1cm4gc3RyaW5nVmFsdWU7XG5cdFx0XHR9KTtcblx0XHRkZWZhdWx0OlxuXHRcdFx0aWYgKGNvbGxlY3Rpb25EZWZpbml0aW9uLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBjYXNlXCIpO1xuXHR9XG59XG5cbnR5cGUgUmVzb2x2ZWFibGUgPSB7XG5cdCR0YXJnZXQ6IHN0cmluZztcbn07XG5cbmZ1bmN0aW9uIGNvbnZlcnRBbm5vdGF0aW9uKFxuXHRhbm5vdGF0aW9uOiBBbm5vdGF0aW9uLFxuXHRwYXJzZXJPdXRwdXQ6IFBhcnNlck91dHB1dCxcblx0Y3VycmVudFRhcmdldDogYW55LFxuXHRvYmplY3RNYXA6IGFueSxcblx0dG9SZXNvbHZlOiBSZXNvbHZlYWJsZVtdXG4pOiBhbnkge1xuXHRpZiAoYW5ub3RhdGlvbi5yZWNvcmQpIHtcblx0XHRjb25zdCBhbm5vdGF0aW9uVGVybTogYW55ID0ge1xuXHRcdFx0JFR5cGU6IHVuYWxpYXMocGFyc2VyT3V0cHV0LnJlZmVyZW5jZXMsIGFubm90YXRpb24ucmVjb3JkLnR5cGUpLFxuXHRcdFx0ZnVsbHlRdWFsaWZpZWROYW1lOiBhbm5vdGF0aW9uLmZ1bGx5UXVhbGlmaWVkTmFtZSxcblx0XHRcdHF1YWxpZmllcjogYW5ub3RhdGlvbi5xdWFsaWZpZXJcblx0XHR9O1xuXHRcdGNvbnN0IGFubm90YXRpb25Db250ZW50OiBhbnkgPSB7fTtcblx0XHRhbm5vdGF0aW9uLnJlY29yZC5wcm9wZXJ0eVZhbHVlcy5mb3JFYWNoKChwcm9wZXJ0eVZhbHVlOiBQcm9wZXJ0eVZhbHVlKSA9PiB7XG5cdFx0XHRhbm5vdGF0aW9uQ29udGVudFtwcm9wZXJ0eVZhbHVlLm5hbWVdID0gcGFyc2VWYWx1ZShcblx0XHRcdFx0cHJvcGVydHlWYWx1ZS52YWx1ZSxcblx0XHRcdFx0YCR7YW5ub3RhdGlvbi5mdWxseVF1YWxpZmllZE5hbWV9LyR7cHJvcGVydHlWYWx1ZS5uYW1lfWAsXG5cdFx0XHRcdHBhcnNlck91dHB1dCxcblx0XHRcdFx0Y3VycmVudFRhcmdldCxcblx0XHRcdFx0b2JqZWN0TWFwLFxuXHRcdFx0XHR0b1Jlc29sdmVcblx0XHRcdCk7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdGFubm90YXRpb25Db250ZW50Lmhhc093blByb3BlcnR5KFwiQWN0aW9uXCIpICYmXG5cdFx0XHRcdCghYW5ub3RhdGlvbi5yZWNvcmQgfHxcblx0XHRcdFx0XHRhbm5vdGF0aW9uVGVybS4kVHlwZSA9PT0gXCJjb20uc2FwLnZvY2FidWxhcmllcy5VSS52MS5EYXRhRmllbGRGb3JBY3Rpb25cIiB8fFxuXHRcdFx0XHRcdGFubm90YXRpb25UZXJtLiRUeXBlID09PSBcImNvbS5zYXAudm9jYWJ1bGFyaWVzLlVJLnYxLkRhdGFGaWVsZFdpdGhBY3Rpb25cIilcblx0XHRcdCkge1xuXHRcdFx0XHRpZiAoY3VycmVudFRhcmdldC5hY3Rpb25zKSB7XG5cdFx0XHRcdFx0YW5ub3RhdGlvbkNvbnRlbnQuQWN0aW9uVGFyZ2V0ID0gY3VycmVudFRhcmdldC5hY3Rpb25zW2Fubm90YXRpb25Db250ZW50LkFjdGlvbl07XG5cdFx0XHRcdFx0aWYgKCFhbm5vdGF0aW9uQ29udGVudC5BY3Rpb25UYXJnZXQpIHtcblx0XHRcdFx0XHRcdC8vIEFkZCB0byBkaWFnbm9zdGljc1xuXHRcdFx0XHRcdFx0Ly8gZGVidWdnZXI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0cmV0dXJuIE9iamVjdC5hc3NpZ24oYW5ub3RhdGlvblRlcm0sIGFubm90YXRpb25Db250ZW50KTtcblx0fSBlbHNlIGlmIChhbm5vdGF0aW9uLmNvbGxlY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuXHRcdGlmIChhbm5vdGF0aW9uLnZhbHVlKSB7XG5cdFx0XHRyZXR1cm4gcGFyc2VWYWx1ZShcblx0XHRcdFx0YW5ub3RhdGlvbi52YWx1ZSxcblx0XHRcdFx0YW5ub3RhdGlvbi5mdWxseVF1YWxpZmllZE5hbWUsXG5cdFx0XHRcdHBhcnNlck91dHB1dCxcblx0XHRcdFx0Y3VycmVudFRhcmdldCxcblx0XHRcdFx0b2JqZWN0TWFwLFxuXHRcdFx0XHR0b1Jlc29sdmVcblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0fSBlbHNlIGlmIChhbm5vdGF0aW9uLmNvbGxlY3Rpb24pIHtcblx0XHRjb25zdCBjb2xsZWN0aW9uOiBhbnkgPSBwYXJzZUNvbGxlY3Rpb24oXG5cdFx0XHRhbm5vdGF0aW9uLmNvbGxlY3Rpb24sXG5cdFx0XHRhbm5vdGF0aW9uLmZ1bGx5UXVhbGlmaWVkTmFtZSxcblx0XHRcdHBhcnNlck91dHB1dCxcblx0XHRcdGN1cnJlbnRUYXJnZXQsXG5cdFx0XHRvYmplY3RNYXAsXG5cdFx0XHR0b1Jlc29sdmVcblx0XHQpO1xuXHRcdGNvbGxlY3Rpb24uZnVsbHlRdWFsaWZpZWROYW1lID0gYW5ub3RhdGlvbi5mdWxseVF1YWxpZmllZE5hbWU7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb247XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgY2FzZVwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVSZXNvbHZlUGF0aEZuKGVudGl0eVR5cGU6IEVudGl0eVR5cGUsIG9iamVjdE1hcDogUmVjb3JkPHN0cmluZywgYW55Pikge1xuXHRyZXR1cm4gZnVuY3Rpb24ocmVsYXRpdmVQYXRoOiBzdHJpbmcpOiBhbnkge1xuXHRcdHJldHVybiByZXNvbHZlVGFyZ2V0KG9iamVjdE1hcCwgZW50aXR5VHlwZSwgcmVsYXRpdmVQYXRoKTtcblx0fTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZU5hdmlnYXRpb25Qcm9wZXJ0aWVzKFxuXHRlbnRpdHlUeXBlczogRW50aXR5VHlwZVtdLFxuXHRhc3NvY2lhdGlvbnM6IEFzc29jaWF0aW9uW10sXG5cdG9iamVjdE1hcDogUmVjb3JkPHN0cmluZywgYW55PlxuKTogdm9pZCB7XG5cdGVudGl0eVR5cGVzLmZvckVhY2goZW50aXR5VHlwZSA9PiB7XG5cdFx0ZW50aXR5VHlwZS5uYXZpZ2F0aW9uUHJvcGVydGllcy5mb3JFYWNoKG5hdlByb3AgPT4ge1xuXHRcdFx0aWYgKChuYXZQcm9wIGFzIFY0TmF2aWdhdGlvblByb3BlcnR5KS50YXJnZXRUeXBlTmFtZSkge1xuXHRcdFx0XHQobmF2UHJvcCBhcyBWNE5hdmlnYXRpb25Qcm9wZXJ0eSkudGFyZ2V0VHlwZSA9XG5cdFx0XHRcdFx0b2JqZWN0TWFwWyhuYXZQcm9wIGFzIFY0TmF2aWdhdGlvblByb3BlcnR5KS50YXJnZXRUeXBlTmFtZV07XG5cdFx0XHR9IGVsc2UgaWYgKChuYXZQcm9wIGFzIFYyTmF2aWdhdGlvblByb3BlcnR5KS5yZWxhdGlvbnNoaXApIHtcblx0XHRcdFx0Y29uc3QgdGFyZ2V0QXNzb2NpYXRpb24gPSBhc3NvY2lhdGlvbnMuZmluZChcblx0XHRcdFx0XHRhc3NvY2lhdGlvbiA9PiBhc3NvY2lhdGlvbi5mdWxseVF1YWxpZmllZE5hbWUgPT09IChuYXZQcm9wIGFzIFYyTmF2aWdhdGlvblByb3BlcnR5KS5yZWxhdGlvbnNoaXBcblx0XHRcdFx0KTtcblx0XHRcdFx0aWYgKHRhcmdldEFzc29jaWF0aW9uKSB7XG5cdFx0XHRcdFx0Y29uc3QgYXNzb2NpYXRpb25FbmQgPSB0YXJnZXRBc3NvY2lhdGlvbi5hc3NvY2lhdGlvbkVuZC5maW5kKFxuXHRcdFx0XHRcdFx0ZW5kID0+IGVuZC5yb2xlID09PSAobmF2UHJvcCBhcyBWMk5hdmlnYXRpb25Qcm9wZXJ0eSkudG9Sb2xlXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRpZiAoYXNzb2NpYXRpb25FbmQpIHtcblx0XHRcdFx0XHRcdChuYXZQcm9wIGFzIFYyTmF2aWdhdGlvblByb3BlcnR5KS50YXJnZXRUeXBlID0gb2JqZWN0TWFwW2Fzc29jaWF0aW9uRW5kLnR5cGVdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdGVudGl0eVR5cGUucmVzb2x2ZVBhdGggPSBjcmVhdGVSZXNvbHZlUGF0aEZuKGVudGl0eVR5cGUgYXMgRW50aXR5VHlwZSwgb2JqZWN0TWFwKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGxpbmtBY3Rpb25zVG9FbnRpdHlUeXBlKG5hbWVzcGFjZTogc3RyaW5nLCBhY3Rpb25zOiBBY3Rpb25bXSwgb2JqZWN0TWFwOiBSZWNvcmQ8c3RyaW5nLCBhbnk+KTogdm9pZCB7XG5cdGFjdGlvbnMuZm9yRWFjaChhY3Rpb24gPT4ge1xuXHRcdGlmIChhY3Rpb24uaXNCb3VuZCkge1xuXHRcdFx0Y29uc3Qgc291cmNlRW50aXR5VHlwZSA9IG9iamVjdE1hcFthY3Rpb24uc291cmNlVHlwZV07XG5cdFx0XHRhY3Rpb24uc291cmNlRW50aXR5VHlwZSA9IHNvdXJjZUVudGl0eVR5cGU7XG5cdFx0XHRpZiAoc291cmNlRW50aXR5VHlwZSkge1xuXHRcdFx0XHRpZiAoIXNvdXJjZUVudGl0eVR5cGUuYWN0aW9ucykge1xuXHRcdFx0XHRcdHNvdXJjZUVudGl0eVR5cGUuYWN0aW9ucyA9IHt9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNvdXJjZUVudGl0eVR5cGUuYWN0aW9uc1thY3Rpb24ubmFtZV0gPSBhY3Rpb247XG5cdFx0XHRcdHNvdXJjZUVudGl0eVR5cGUuYWN0aW9uc1tgJHtuYW1lc3BhY2V9LiR7YWN0aW9uLm5hbWV9YF0gPSBhY3Rpb247XG5cdFx0XHR9XG5cdFx0XHRjb25zdCByZXR1cm5FbnRpdHlUeXBlID0gb2JqZWN0TWFwW2FjdGlvbi5yZXR1cm5UeXBlXTtcblx0XHRcdGFjdGlvbi5yZXR1cm5FbnRpdHlUeXBlID0gcmV0dXJuRW50aXR5VHlwZTtcblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBsaW5rRW50aXR5VHlwZVRvRW50aXR5U2V0KGVudGl0eVNldHM6IEVudGl0eVNldFtdLCBvYmplY3RNYXA6IFJlY29yZDxzdHJpbmcsIGFueT4pOiB2b2lkIHtcblx0ZW50aXR5U2V0cy5mb3JFYWNoKGVudGl0eVNldCA9PiB7XG5cdFx0ZW50aXR5U2V0LmVudGl0eVR5cGUgPSBvYmplY3RNYXBbZW50aXR5U2V0LmVudGl0eVR5cGVOYW1lXTtcblx0XHRpZiAoIWVudGl0eVNldC5hbm5vdGF0aW9ucykge1xuXHRcdFx0ZW50aXR5U2V0LmFubm90YXRpb25zID0ge307XG5cdFx0fVxuXHRcdGlmICghZW50aXR5U2V0LmVudGl0eVR5cGUuYW5ub3RhdGlvbnMpIHtcblx0XHRcdGVudGl0eVNldC5lbnRpdHlUeXBlLmFubm90YXRpb25zID0ge307XG5cdFx0fVxuXHR9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRUeXBlcyhwYXJzZXJPdXRwdXQ6IFBhcnNlck91dHB1dCk6IENvbnZlcnRlck91dHB1dCB7XG5cdGNvbnN0IG9iamVjdE1hcCA9IGJ1aWxkT2JqZWN0TWFwKHBhcnNlck91dHB1dCk7XG5cdHJlc29sdmVOYXZpZ2F0aW9uUHJvcGVydGllcyhcblx0XHRwYXJzZXJPdXRwdXQuc2NoZW1hLmVudGl0eVR5cGVzIGFzIEVudGl0eVR5cGVbXSxcblx0XHRwYXJzZXJPdXRwdXQuc2NoZW1hLmFzc29jaWF0aW9ucyxcblx0XHRvYmplY3RNYXBcblx0KTtcblx0bGlua0FjdGlvbnNUb0VudGl0eVR5cGUocGFyc2VyT3V0cHV0LnNjaGVtYS5uYW1lc3BhY2UsIHBhcnNlck91dHB1dC5zY2hlbWEuYWN0aW9ucyBhcyBBY3Rpb25bXSwgb2JqZWN0TWFwKTtcblx0bGlua0VudGl0eVR5cGVUb0VudGl0eVNldChwYXJzZXJPdXRwdXQuc2NoZW1hLmVudGl0eVNldHMgYXMgRW50aXR5U2V0W10sIG9iamVjdE1hcCk7XG5cdGNvbnN0IHRvUmVzb2x2ZTogUmVzb2x2ZWFibGVbXSA9IFtdO1xuXHRjb25zdCB1bnJlc29sdmVkQW5ub3RhdGlvbnM6IEFubm90YXRpb25MaXN0W10gPSBbXTtcblx0T2JqZWN0LmtleXMocGFyc2VyT3V0cHV0LnNjaGVtYS5hbm5vdGF0aW9ucykuZm9yRWFjaChhbm5vdGF0aW9uU291cmNlID0+IHtcblx0XHRwYXJzZXJPdXRwdXQuc2NoZW1hLmFubm90YXRpb25zW2Fubm90YXRpb25Tb3VyY2VdLmZvckVhY2goYW5ub3RhdGlvbkxpc3QgPT4ge1xuXHRcdFx0Y29uc3QgY3VycmVudFRhcmdldE5hbWUgPSB1bmFsaWFzKHBhcnNlck91dHB1dC5yZWZlcmVuY2VzLCBhbm5vdGF0aW9uTGlzdC50YXJnZXQpIGFzIHN0cmluZztcblx0XHRcdGNvbnN0IGN1cnJlbnRUYXJnZXQgPSBvYmplY3RNYXBbY3VycmVudFRhcmdldE5hbWVdO1xuXHRcdFx0aWYgKCFjdXJyZW50VGFyZ2V0KSB7XG5cdFx0XHRcdGlmIChjdXJyZW50VGFyZ2V0TmFtZS5pbmRleE9mKFwiQFwiKSAhPT0gLTEpIHtcblx0XHRcdFx0XHR1bnJlc29sdmVkQW5ub3RhdGlvbnMucHVzaChhbm5vdGF0aW9uTGlzdCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIGN1cnJlbnRUYXJnZXQgPT09IFwib2JqZWN0XCIpIHtcblx0XHRcdFx0aWYgKCFjdXJyZW50VGFyZ2V0LmFubm90YXRpb25zKSB7XG5cdFx0XHRcdFx0Y3VycmVudFRhcmdldC5hbm5vdGF0aW9ucyA9IHt9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGFubm90YXRpb25MaXN0LmFubm90YXRpb25zLmZvckVhY2goYW5ub3RhdGlvbiA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgW3ZvY0FsaWFzLCB2b2NUZXJtXSA9IGFubm90YXRpb24udGVybS5zcGxpdChcIi5cIik7XG5cdFx0XHRcdFx0aWYgKCFjdXJyZW50VGFyZ2V0LmFubm90YXRpb25zW3ZvY0FsaWFzXSkge1xuXHRcdFx0XHRcdFx0Y3VycmVudFRhcmdldC5hbm5vdGF0aW9uc1t2b2NBbGlhc10gPSB7fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCFjdXJyZW50VGFyZ2V0LmFubm90YXRpb25zLl9hbm5vdGF0aW9ucykge1xuXHRcdFx0XHRcdFx0Y3VycmVudFRhcmdldC5hbm5vdGF0aW9ucy5fYW5ub3RhdGlvbnMgPSB7fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjb25zdCB2b2NUZXJtV2l0aFF1YWxpZmllciA9IGAke3ZvY1Rlcm19JHthbm5vdGF0aW9uLnF1YWxpZmllciA/IGAjJHthbm5vdGF0aW9uLnF1YWxpZmllcn1gIDogXCJcIn1gO1xuXHRcdFx0XHRcdGN1cnJlbnRUYXJnZXQuYW5ub3RhdGlvbnNbdm9jQWxpYXNdW3ZvY1Rlcm1XaXRoUXVhbGlmaWVyXSA9IGNvbnZlcnRBbm5vdGF0aW9uKFxuXHRcdFx0XHRcdFx0YW5ub3RhdGlvbiBhcyBBbm5vdGF0aW9uLFxuXHRcdFx0XHRcdFx0cGFyc2VyT3V0cHV0LFxuXHRcdFx0XHRcdFx0Y3VycmVudFRhcmdldCxcblx0XHRcdFx0XHRcdG9iamVjdE1hcCxcblx0XHRcdFx0XHRcdHRvUmVzb2x2ZVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdFx0Y3VycmVudFRhcmdldC5hbm5vdGF0aW9uc1t2b2NBbGlhc11bdm9jVGVybVdpdGhRdWFsaWZpZXJdICE9PSBudWxsICYmXG5cdFx0XHRcdFx0XHR0eXBlb2YgY3VycmVudFRhcmdldC5hbm5vdGF0aW9uc1t2b2NBbGlhc11bdm9jVGVybVdpdGhRdWFsaWZpZXJdID09PSBcIm9iamVjdFwiXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRjdXJyZW50VGFyZ2V0LmFubm90YXRpb25zW3ZvY0FsaWFzXVt2b2NUZXJtV2l0aFF1YWxpZmllcl0udGVybSA9IHVuYWxpYXMoXG5cdFx0XHRcdFx0XHRcdHBhcnNlck91dHB1dC5yZWZlcmVuY2VzLFxuXHRcdFx0XHRcdFx0XHRgJHt2b2NBbGlhc30uJHt2b2NUZXJtfWBcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRjdXJyZW50VGFyZ2V0LmFubm90YXRpb25zW3ZvY0FsaWFzXVt2b2NUZXJtV2l0aFF1YWxpZmllcl0ucXVhbGlmaWVyID0gYW5ub3RhdGlvbi5xdWFsaWZpZXI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGN1cnJlbnRUYXJnZXQuYW5ub3RhdGlvbnMuX2Fubm90YXRpb25zW2Ake3ZvY0FsaWFzfS4ke3ZvY1Rlcm1XaXRoUXVhbGlmaWVyfWBdID1cblx0XHRcdFx0XHRcdGN1cnJlbnRUYXJnZXQuYW5ub3RhdGlvbnNbdm9jQWxpYXNdW3ZvY1Rlcm1XaXRoUXVhbGlmaWVyXTtcblx0XHRcdFx0XHRvYmplY3RNYXBbXG5cdFx0XHRcdFx0XHRgJHtjdXJyZW50VGFyZ2V0TmFtZX1AJHt1bmFsaWFzKFxuXHRcdFx0XHRcdFx0XHRwYXJzZXJPdXRwdXQucmVmZXJlbmNlcyxcblx0XHRcdFx0XHRcdFx0dm9jQWxpYXMgKyBcIi5cIiArIHZvY1Rlcm1XaXRoUXVhbGlmaWVyXG5cdFx0XHRcdFx0XHQpfWBcblx0XHRcdFx0XHRdID0gY3VycmVudFRhcmdldC5hbm5vdGF0aW9uc1t2b2NBbGlhc11bdm9jVGVybVdpdGhRdWFsaWZpZXJdO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlYnVnZ2VyO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcblx0dW5yZXNvbHZlZEFubm90YXRpb25zLmZvckVhY2goYW5ub3RhdGlvbkxpc3QgPT4ge1xuXHRcdGNvbnN0IGN1cnJlbnRUYXJnZXROYW1lID0gdW5hbGlhcyhwYXJzZXJPdXRwdXQucmVmZXJlbmNlcywgYW5ub3RhdGlvbkxpc3QudGFyZ2V0KSBhcyBzdHJpbmc7XG5cdFx0bGV0IFtiYXNlT2JqLCBhbm5vdGF0aW9uUGFydF0gPSBjdXJyZW50VGFyZ2V0TmFtZS5zcGxpdChcIkBcIik7XG5cdFx0Y29uc3QgdGFyZ2V0U3BsaXQgPSBhbm5vdGF0aW9uUGFydC5zcGxpdChcIi9cIik7XG5cdFx0YmFzZU9iaiA9IGJhc2VPYmogKyBcIkBcIiArIHRhcmdldFNwbGl0WzBdO1xuXHRcdGNvbnN0IGN1cnJlbnRUYXJnZXQgPSB0YXJnZXRTcGxpdC5zbGljZSgxKS5yZWR1Y2UoKGN1cnJlbnRPYmosIHBhdGgpID0+IHtcblx0XHRcdGlmICghY3VycmVudE9iaikge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBjdXJyZW50T2JqW3BhdGhdO1xuXHRcdH0sIG9iamVjdE1hcFtiYXNlT2JqXSk7XG5cdFx0aWYgKCFjdXJyZW50VGFyZ2V0KSB7XG5cdFx0XHQvLyBjb25zb2xlLmxvZyhcIk1pc3NpbmcgdGFyZ2V0IGFnYWluIFwiICsgY3VycmVudFRhcmdldE5hbWUpO1xuXHRcdH0gZWxzZSBpZiAodHlwZW9mIGN1cnJlbnRUYXJnZXQgPT09IFwib2JqZWN0XCIpIHtcblx0XHRcdGlmICghY3VycmVudFRhcmdldC5hbm5vdGF0aW9ucykge1xuXHRcdFx0XHRjdXJyZW50VGFyZ2V0LmFubm90YXRpb25zID0ge307XG5cdFx0XHR9XG5cdFx0XHRhbm5vdGF0aW9uTGlzdC5hbm5vdGF0aW9ucy5mb3JFYWNoKGFubm90YXRpb24gPT4ge1xuXHRcdFx0XHRjb25zdCBbdm9jQWxpYXMsIHZvY1Rlcm1dID0gYW5ub3RhdGlvbi50ZXJtLnNwbGl0KFwiLlwiKTtcblx0XHRcdFx0aWYgKCFjdXJyZW50VGFyZ2V0LmFubm90YXRpb25zW3ZvY0FsaWFzXSkge1xuXHRcdFx0XHRcdGN1cnJlbnRUYXJnZXQuYW5ub3RhdGlvbnNbdm9jQWxpYXNdID0ge307XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFjdXJyZW50VGFyZ2V0LmFubm90YXRpb25zLl9hbm5vdGF0aW9ucykge1xuXHRcdFx0XHRcdGN1cnJlbnRUYXJnZXQuYW5ub3RhdGlvbnMuX2Fubm90YXRpb25zID0ge307XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCB2b2NUZXJtV2l0aFF1YWxpZmllciA9IGAke3ZvY1Rlcm19JHthbm5vdGF0aW9uLnF1YWxpZmllciA/IGAjJHthbm5vdGF0aW9uLnF1YWxpZmllcn1gIDogXCJcIn1gO1xuXHRcdFx0XHRjdXJyZW50VGFyZ2V0LmFubm90YXRpb25zW3ZvY0FsaWFzXVt2b2NUZXJtV2l0aFF1YWxpZmllcl0gPSBjb252ZXJ0QW5ub3RhdGlvbihcblx0XHRcdFx0XHRhbm5vdGF0aW9uIGFzIEFubm90YXRpb24sXG5cdFx0XHRcdFx0cGFyc2VyT3V0cHV0LFxuXHRcdFx0XHRcdGN1cnJlbnRUYXJnZXQsXG5cdFx0XHRcdFx0b2JqZWN0TWFwLFxuXHRcdFx0XHRcdHRvUmVzb2x2ZVxuXHRcdFx0XHQpO1xuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0Y3VycmVudFRhcmdldC5hbm5vdGF0aW9uc1t2b2NBbGlhc11bdm9jVGVybVdpdGhRdWFsaWZpZXJdICE9PSBudWxsICYmXG5cdFx0XHRcdFx0dHlwZW9mIGN1cnJlbnRUYXJnZXQuYW5ub3RhdGlvbnNbdm9jQWxpYXNdW3ZvY1Rlcm1XaXRoUXVhbGlmaWVyXSA9PT0gXCJvYmplY3RcIlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRjdXJyZW50VGFyZ2V0LmFubm90YXRpb25zW3ZvY0FsaWFzXVt2b2NUZXJtV2l0aFF1YWxpZmllcl0udGVybSA9IHVuYWxpYXMoXG5cdFx0XHRcdFx0XHRwYXJzZXJPdXRwdXQucmVmZXJlbmNlcyxcblx0XHRcdFx0XHRcdGAke3ZvY0FsaWFzfS4ke3ZvY1Rlcm19YFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0Y3VycmVudFRhcmdldC5hbm5vdGF0aW9uc1t2b2NBbGlhc11bdm9jVGVybVdpdGhRdWFsaWZpZXJdLnF1YWxpZmllciA9IGFubm90YXRpb24ucXVhbGlmaWVyO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGN1cnJlbnRUYXJnZXQuYW5ub3RhdGlvbnMuX2Fubm90YXRpb25zW2Ake3ZvY0FsaWFzfS4ke3ZvY1Rlcm1XaXRoUXVhbGlmaWVyfWBdID1cblx0XHRcdFx0XHRjdXJyZW50VGFyZ2V0LmFubm90YXRpb25zW3ZvY0FsaWFzXVt2b2NUZXJtV2l0aFF1YWxpZmllcl07XG5cdFx0XHRcdG9iamVjdE1hcFtcblx0XHRcdFx0XHRgJHtjdXJyZW50VGFyZ2V0TmFtZX1AJHt1bmFsaWFzKHBhcnNlck91dHB1dC5yZWZlcmVuY2VzLCB2b2NBbGlhcyArIFwiLlwiICsgdm9jVGVybVdpdGhRdWFsaWZpZXIpfWBcblx0XHRcdFx0XSA9IGN1cnJlbnRUYXJnZXQuYW5ub3RhdGlvbnNbdm9jQWxpYXNdW3ZvY1Rlcm1XaXRoUXVhbGlmaWVyXTtcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkZWJ1Z2dlcjtcblx0XHR9XG5cdH0pO1xuXHR0b1Jlc29sdmUuZm9yRWFjaChyZXNvbHZlYWJsZSA9PiB7XG5cdFx0Y29uc3QgdGFyZ2V0U3RyID0gcmVzb2x2ZWFibGUuJHRhcmdldDtcblx0XHRyZXNvbHZlYWJsZS4kdGFyZ2V0ID0gb2JqZWN0TWFwW3RhcmdldFN0cl07XG5cdH0pO1xuXHQocGFyc2VyT3V0cHV0IGFzIGFueSkuZW50aXR5U2V0cyA9IHBhcnNlck91dHB1dC5zY2hlbWEuZW50aXR5U2V0cztcblxuXHRyZXR1cm4ge1xuXHRcdHZlcnNpb246IHBhcnNlck91dHB1dC52ZXJzaW9uLFxuXHRcdGFubm90YXRpb25zOiBwYXJzZXJPdXRwdXQuc2NoZW1hLmFubm90YXRpb25zLFxuXHRcdG5hbWVzcGFjZTogcGFyc2VyT3V0cHV0LnNjaGVtYS5uYW1lc3BhY2UsXG5cdFx0YWN0aW9uczogcGFyc2VyT3V0cHV0LnNjaGVtYS5hY3Rpb25zIGFzIEFjdGlvbltdLFxuXHRcdGVudGl0eVNldHM6IHBhcnNlck91dHB1dC5zY2hlbWEuZW50aXR5U2V0cyBhcyBFbnRpdHlTZXRbXSxcblx0XHRlbnRpdHlUeXBlczogcGFyc2VyT3V0cHV0LnNjaGVtYS5lbnRpdHlUeXBlcyBhcyBFbnRpdHlUeXBlW10sXG5cdFx0cmVmZXJlbmNlczogcGFyc2VyT3V0cHV0LnJlZmVyZW5jZXNcblx0fTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtQ29sbGVjdGlvbkl0ZW1Ub0dlbmVyaWNUeXBlKFxuXHRjb2xsZWN0aW9uSXRlbTogYW55XG4pOlxuXHR8IEFubm90YXRpb25SZWNvcmRcblx0fCBzdHJpbmdcblx0fCBQcm9wZXJ0eVBhdGhFeHByZXNzaW9uXG5cdHwgUGF0aEV4cHJlc3Npb25cblx0fCBOYXZpZ2F0aW9uUHJvcGVydHlQYXRoRXhwcmVzc2lvblxuXHR8IEFubm90YXRpb25QYXRoRXhwcmVzc2lvblxuXHR8IHVuZGVmaW5lZCB7XG5cdGlmICh0eXBlb2YgY29sbGVjdGlvbkl0ZW0gPT09IFwic3RyaW5nXCIpIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbkl0ZW07XG5cdH0gZWxzZSBpZiAodHlwZW9mIGNvbGxlY3Rpb25JdGVtID09PSBcIm9iamVjdFwiKSB7XG5cdFx0aWYgKGNvbGxlY3Rpb25JdGVtLmhhc093blByb3BlcnR5KFwiJFR5cGVcIikpIHtcblx0XHRcdC8vIEFubm90YXRpb24gUmVjb3JkXG5cdFx0XHRjb25zdCBvdXRJdGVtID0ge1xuXHRcdFx0XHR0eXBlOiBjb2xsZWN0aW9uSXRlbS4kVHlwZSxcblx0XHRcdFx0cHJvcGVydHlWYWx1ZXM6IFtdIGFzIGFueVtdXG5cdFx0XHR9O1xuXHRcdFx0Ly8gQ291bGQgdmFsaWRhdGUga2V5cyBhbmQgdHlwZSBiYXNlZCBvbiAkVHlwZVxuXHRcdFx0T2JqZWN0LmtleXMoY29sbGVjdGlvbkl0ZW0pLmZvckVhY2goY29sbGVjdGlvbktleSA9PiB7XG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRjb2xsZWN0aW9uS2V5ICE9PSBcIiRUeXBlXCIgJiZcblx0XHRcdFx0XHRjb2xsZWN0aW9uS2V5ICE9PSBcInRlcm1cIiAmJlxuXHRcdFx0XHRcdGNvbGxlY3Rpb25LZXkgIT09IFwicXVhbGlmaWVyXCIgJiZcblx0XHRcdFx0XHRjb2xsZWN0aW9uS2V5ICE9PSBcIkFjdGlvblRhcmdldFwiICYmXG5cdFx0XHRcdFx0Y29sbGVjdGlvbktleSAhPT0gXCJmdWxseVF1YWxpZmllZE5hbWVcIlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRjb25zdCB2YWx1ZSA9IGNvbGxlY3Rpb25JdGVtW2NvbGxlY3Rpb25LZXldO1xuXHRcdFx0XHRcdGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0XHRcdG91dEl0ZW0ucHJvcGVydHlWYWx1ZXMucHVzaCh7XG5cdFx0XHRcdFx0XHRcdG5hbWU6IGNvbGxlY3Rpb25LZXksXG5cdFx0XHRcdFx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJTdHJpbmdcIixcblx0XHRcdFx0XHRcdFx0XHRTdHJpbmc6IHZhbHVlXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIikge1xuXHRcdFx0XHRcdFx0b3V0SXRlbS5wcm9wZXJ0eVZhbHVlcy5wdXNoKHtcblx0XHRcdFx0XHRcdFx0bmFtZTogY29sbGVjdGlvbktleSxcblx0XHRcdFx0XHRcdFx0dmFsdWU6IHtcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcIkJvb2xcIixcblx0XHRcdFx0XHRcdFx0XHRCb29sOiB2YWx1ZVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHZhbHVlLnR5cGUgPT09IFwiUGF0aFwiKSB7XG5cdFx0XHRcdFx0XHRvdXRJdGVtLnByb3BlcnR5VmFsdWVzLnB1c2goe1xuXHRcdFx0XHRcdFx0XHRuYW1lOiBjb2xsZWN0aW9uS2V5LFxuXHRcdFx0XHRcdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiUGF0aFwiLFxuXHRcdFx0XHRcdFx0XHRcdFBhdGg6IHZhbHVlLnBhdGhcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICh2YWx1ZS50eXBlID09PSBcIkFubm90YXRpb25QYXRoXCIpIHtcblx0XHRcdFx0XHRcdG91dEl0ZW0ucHJvcGVydHlWYWx1ZXMucHVzaCh7XG5cdFx0XHRcdFx0XHRcdG5hbWU6IGNvbGxlY3Rpb25LZXksXG5cdFx0XHRcdFx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJBbm5vdGF0aW9uUGF0aFwiLFxuXHRcdFx0XHRcdFx0XHRcdEFubm90YXRpb25QYXRoOiB2YWx1ZS52YWx1ZVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHZhbHVlLnR5cGUgPT09IFwiUHJvcGVydHlQYXRoXCIpIHtcblx0XHRcdFx0XHRcdG91dEl0ZW0ucHJvcGVydHlWYWx1ZXMucHVzaCh7XG5cdFx0XHRcdFx0XHRcdG5hbWU6IGNvbGxlY3Rpb25LZXksXG5cdFx0XHRcdFx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJQcm9wZXJ0eVBhdGhcIixcblx0XHRcdFx0XHRcdFx0XHRQcm9wZXJ0eVBhdGg6IHZhbHVlLnZhbHVlXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodmFsdWUudHlwZSA9PT0gXCJOYXZpZ2F0aW9uUHJvcGVydHlQYXRoXCIpIHtcblx0XHRcdFx0XHRcdG91dEl0ZW0ucHJvcGVydHlWYWx1ZXMucHVzaCh7XG5cdFx0XHRcdFx0XHRcdG5hbWU6IGNvbGxlY3Rpb25LZXksXG5cdFx0XHRcdFx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJOYXZpZ2F0aW9uUHJvcGVydHlQYXRoXCIsXG5cdFx0XHRcdFx0XHRcdFx0TmF2aWdhdGlvblByb3BlcnR5UGF0aDogdmFsdWUudmFsdWVcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eShcIiRUeXBlXCIpKSB7XG5cdFx0XHRcdFx0XHRvdXRJdGVtLnByb3BlcnR5VmFsdWVzLnB1c2goe1xuXHRcdFx0XHRcdFx0XHRuYW1lOiBjb2xsZWN0aW9uS2V5LFxuXHRcdFx0XHRcdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiUmVjb3JkXCIsXG5cdFx0XHRcdFx0XHRcdFx0UmVjb3JkOiB0cmFuc2Zvcm1Db2xsZWN0aW9uSXRlbVRvR2VuZXJpY1R5cGUodmFsdWUpXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gb3V0SXRlbTtcblx0XHR9XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybVRlcm1Ub0dlbmVyaWNUeXBlKGFubm90YXRpb246IEFubm90YXRpb25UZXJtPGFueT4pOiBFZG1Bbm5vdGF0aW9uIHtcblx0Y29uc3QgYmFzZUFubm90YXRpb24gPSB7XG5cdFx0dGVybTogYW5ub3RhdGlvbi50ZXJtLFxuXHRcdHF1YWxpZmllcjogYW5ub3RhdGlvbi5xdWFsaWZpZXJcblx0fTtcblx0aWYgKEFycmF5LmlzQXJyYXkoYW5ub3RhdGlvbikpIHtcblx0XHQvLyBDb2xsZWN0aW9uXG5cdFx0cmV0dXJuIHtcblx0XHRcdC4uLmJhc2VBbm5vdGF0aW9uLFxuXHRcdFx0Y29sbGVjdGlvbjogYW5ub3RhdGlvbi5tYXAodHJhbnNmb3JtQ29sbGVjdGlvbkl0ZW1Ub0dlbmVyaWNUeXBlKSBhcyBhbnlbXVxuXHRcdH07XG5cdH0gZWxzZSBpZiAoYW5ub3RhdGlvbi5oYXNPd25Qcm9wZXJ0eShcIiRUeXBlXCIpKSB7XG5cdFx0cmV0dXJuIHsgLi4uYmFzZUFubm90YXRpb24sIHJlY29yZDogdHJhbnNmb3JtQ29sbGVjdGlvbkl0ZW1Ub0dlbmVyaWNUeXBlKGFubm90YXRpb24pIGFzIGFueSB9O1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBiYXNlQW5ub3RhdGlvbjtcblx0fVxufVxuIl19